;
; VBIM                  DEC 13, 1982
;
RTCLOK	=	$12
ATRACT	=	$4D
COLPM0	=	$D012
RDLSTH	=	$D403	; THESE LABELS AR USED
RDLSTL	=	$D402	; CAUSE CHRIS BLEW IT
CHBAS	=	$2F4
CHBASE	=	$D409
PORTA	=	$D300
STICK0	=	$278
STRIG0	=	$284
VVBLKD	=	$224
;
;
VBIM:
	INC	RTCLOK+2
	BNE	SYSVB1
	INC	ATRACT
	INC	RTCLOK+1
;
SYSVB1:
	LDA	#$FE
	LDX	#0
	LDY	ATRACT
	BPL	VBATRA
	STA	ATRACT
	LDX	RTCLOK+1
	LDA	#$F6
;
VBATRA:
	STA	DRKMSK
	STX	COLRSH
;
SYSVB3:
	CLI
	LDA	#$08
	STA	CONSOL
	LDX	#8
;
SCOLLP:
	LDA	PCOLR0,X
	EOR	COLRSH
	AND	DRKMSK
	STA	COLPM0,X
	DEX
	BPL	SCOLLP
;
	LDA	DLISTH
	STA	RDLSTH
	LDA	DLISTL
	STA	RDLSTL
;
	LDA	CHBAS
	STA	CHBASE
;
;	NO COUNT DOWN TIMERS
;	NO KEYBOARD SUPPORT
;
SYSVB7:
	LDA	PORTA
	AND	#$0F
	STA	STICK0
;
	LDA	TRIG0
	STA	STRIG0
;
	JMP	(VVBLKD)
;
;


     SUBTTL    'Fanfare'
;
; Crockford's Music Interpreter
;
; Modified for Excalibur 11/11/82
;
; Entry points:
;    INTFAN -- must be called when loaded, or to silence
;    STRFAN -- must be called to start fanfare
;    PLAFAN -- must be called every VBLANK
;
; Assumes that there exists a page zero word called STREAM.
;
AUDF: =   $D200
AUDC: =   $D201
AUDCTL: = $D208
;
;
INTFAN:
     PROC
     LDX  #DATASIZE
     LDA  #0
:1:
     STA  CMD-1,X
     DEX
     BNE  :1
;
     LDX  #10
:2:
     STA  $D200-1,X; CLEAR AUD REGISTERS
     DEX
     BNE  :2
;
     LDA  #3
     STA  $D20F     ;SKCTL
     STA  $232
;
     LDA  #LOW :H
     STA  STREAM
     LDA  #HIGH :H
     STA  STREAM+1
     LDA  #$FF
     STA  MI_STATE
     RTS
:H:
     DB   4,128
     EPROC
;EXCALIBUR WINNING MODULE V01    JUNE 15, 1983
;
; WITH FASTER MUSIC
; FLASHING SWORD
; PROPER NAME WITH FANCY CALIG
; NAME DISSAPEARS USING LARRY'S RNDBIT
; AUTHOR'S NAMES ENFOLD ON SCREEN
; SYMBOLICALLY RELOCATABLE
; FASTER RNDBIT ROUTINE
;  ACTION PROPERLY TIMED WITH MUSIC
; DISK SWAPPING CODE AT END
;
RTCLKL	=	$14
COLRSH	=	$4F
DRKMSK	=	$4E
DOSVEC	=	$000A
;
	ORG	$C0
SNPTR	ORG	*+2
CRPTR	ORG	*+2
DLPTR	ORG	*+2
OLDBEG	ORG	*+1
OLDEND	ORG	*+1
NEWBEG	ORG	*+1
NEWEND	ORG	*+1
TEMP2	ORG	*+1
FOGPTR	ORG	*+2
TAMP1	ORG	*+1
TAMP2	ORG	*+1
;

;
FSPACE	=	$8200
FSTART	=	FSPACE+[40*15]
DLPTCH	=	$8180
DLAREA	=	$A0
THUMB	=	[DLAREA*256]+$B9C
FINGR1	=	[DLAREA*256]+$BC3
FINGR2	=	[DLAREA*256]+$C13
PMAREA	=	$1C
NAM1	=	$2A00
NAM1S0	=	NAM1+[40*15]
NAM1S1	=	NAM1S0+20
NAM2	=	$2000
NAM2S0	=	NAM2+[40*15]
NAM2S1	=	NAM2S0+20

DLIVEC	=	$200
DLISTL	=	$230	; NOT USE SHADOW $230
DLISTH	=	$231	; NOT USE SHADOW $231
SDMCTL	=	$22F	; NOT USE SHADOW $22F
DMACTL	=	$D400

GPRIOR	=	$26F	; NOT USE SHADOW $26F
PRIOR	=	$D01B
PCOLR0	=	$2C0
PCOLR1	=	$2C1
PCOLR2	=	$2C2
PCOLR3	=	$2C3
COLOR0	=	$2C4
COLOR1	=	$2C5
COLOR2	=	$2C6
COLOR3	=	$2C7
COLOR4	=	$2C8
M	=	[PMAREA*256]+$180
P0	=	M+128
P1	=	P0+128
P2	=	P1+128
P3	=	P2+128
HPOSP0	=	$D000
HPOSP1	=	$D001
HPOSP2	=	$D002
HPOSP3	=	$D003
HPOSM0	=	$D004
HPOSM1	=	$D005
HPOSM2	=	$D006
HPOSM3	=	$D007
GRAFP0	=	$D00D
GRAFP1	=	$D00E
GRAFP2	=	$D00F
GRAFP3	=	$D010
GRAFM	=	$D011
COLPM3	=	$D015
COLPF0	=	$D016
COLPF1	=	$D017
COLPF2	=	$D018
COLPF3	=	$D019
COLBAK	=	$D01A
TRIG0	=	$D010
RANDOM	=	$D20A
PMBASE	=	$D407
WSYNC	=	$D40A
VCOUNT	=	$D40B
NMIEN	=	$D40E
GRACTL	=	$D01D
SETVBV	=	$E45C
XITVBV	=	$E462
AUDF1	=	$D200
AUDF2	=	$D202
AUDF3	=	$D204
AUDC1	=	$D201
AUDC2	=	$D203
AUDC3	=	$D205
AUDCTL	=	$D208
SKCTL	=	$D20F
SSKCTL	=	$0232
CONSOL	=	$D01F
TEMPO	=	2
TMPODV	=	3
;
;
RETRC:	MACRO	PLAYER
	PROC
	LDX	%1BEG
:LOOPB	LDA	%1+1,X
	STA	%1,X
	INX
	CPX	%1END
	BNE	:LOOPB
	LDA	%1BEG
	CMP	#$48
	BCC	:X1
	DEC	%1BEG
:X1	LDX	SWDCNT
	LDA	%1TAB,X
	LDX	%1END
	STA	%1,X
	EPROC
	ENDM
;
	ORG	WINADD
	JMP	BEGIN
MEMORG	ORG	*+1	; MUST BE ON A 00 BOUNDARY
P0BEG	ORG	*+1
P1BEG	ORG	*+1
P2BEG	ORG	*+1
P3BEG	ORG	*+1
MBEG	ORG	*+1
P0END	ORG	*+1
P1END	ORG	*+1
P2END	ORG	*+1
P3END	ORG	*+1
MEND	ORG	*+1
FMCNT2	ORG	*+1
DLICNT	ORG	*+1
DL1PF0	ORG	*+1
DL2PF0	ORG	*+1
DL2BAK	ORG	*+1
SWDCNT	ORG	*+1
MTNCNT	ORG	*+1
LEFT	ORG	*+1
RIGHT	ORG	*+1
COLOR	ORG	*+1
CHRIS	ORG	*+1
CHRIS2	ORG	*+1
SUM	ORG	*+1
SUM2	ORG	*+1
STARTX	ORG	*+1
RMASK	ORG	*+1
YCNT	ORG	*+1
HNDPTR	ORG	*+2
FMCNT3	ORG	*+1
PCLR0S	ORG	*+1
DL1PF1	ORG	*+1
DL1PF2	ORG	*+1
;
JFCNT	ORG	*+1	; MUSIC VARIABLES
JFCNT1	ORG	*+1
NTCNT1	ORG	*+1
NTCNT2	ORG	*+1
NTCNT3	ORG	*+1
TIM1	ORG	*+1
TIM2	ORG	*+1
TIM3	ORG	*+1
AUDC1S	ORG	*+1
AUDC2S	ORG	*+1
;
BEGIN	CLD
	LDA	#PMAREA
	STA	PMBASE
	LDA	#0
	STA	SDMCTL	;turn off ANTIC for starters
	STA	DMACTL
	LDA	#3
	STA	GRACTL
	LDA	#$12
	STA	PRIOR
	STA	GPRIOR
	LDA	#DLAREA
	STA	MEMORG
;
	LDA	#0	; initialize POKEY
	STA	AUDCTL
	LDA	#3
	STA	SKCTL
;
;clear out player RAM
;
	LDA	#0
	TAX
LOOP4	STA	M,X
	INX
	BNE	LOOP4
LOOP5	STA	P1,X
	INX
	BNE	LOOP5
LOOP6	STA	P2,X
	INX
	BNE	LOOP6
;
;initialize colors
;
	LDA	#$8F
	STA	PCOLR0
	STA	PCOLR1
	STA	PCOLR2
	LDA	#$46
	STA	PCOLR3
	STA	COLOR3
	LDA	#$88
	STA	COLOR4
	LDA	#$0F
	STA	COLOR0
	LDA	#$0F
	STA	COLOR1
	LDA	#$88
	STA	COLOR2
;
	LDA	#$12
	STA	DL1PF1
	LDA	#$D4
	STA	DL1PF2
;
	LDX	#9		; ZERO OUT MUSIC VAR.S
	LDA	#0
LOOP86:
	STA	JFCNT,X
	DEX
	BPL	LOOP86
;
	LDX	#$10
LOOP33
	LDA	ITAB,X
	STA	MEMORG,X
	DEX
	BPL	LOOP33
;
;write display list
;
	LDA	MEMORG
	STA	SNPTR+1
	CLC
	ADC	#$14	; DON'T HIT CALIG AT 9000
	STA	DLPTR+1
	STA	DLISTH
	LDA	#0
	STA	SNPTR
	STA	DLPTR
	STA	DLISTL
;
	LDY	#0
	LDX	#0
	LDA	#$70
	STA	(DLPTR),Y
	INY
	STA	(DLPTR),Y
	INY
	STA	(DLPTR),Y
	INY
	LDA	#$4B
	STA	(DLPTR),Y
	INY
	LDA	SNPTR
	STA	(DLPTR),Y
	INY
	LDA	SNPTR+1
	STA	(DLPTR),Y
	INY
	LDA	#$B
LOOP14	STA	(DLPTR),Y
	INY
	INX
	CPX	#31
	BNE	LOOP14
	LDA	#$CD
	STA	(DLPTR),Y
	INY
	LDA	#120
	STA	(DLPTR),Y
	INY
	LDA	SNPTR+1
	CLC
	ADC	#2
	STA	(DLPTR),Y
	INY
	INX
	LDA	#$D
LOOP15	STA	(DLPTR),Y
	INY
	INX
	CPX	#62
	BNE	LOOP15
	LDA	#$8D
	STA	(DLPTR),Y
	INY
	INX
	LDA	#$D
LOOP16	STA	(DLPTR),Y
	INY
	INX
	CPX	#99
	BNE	LOOP16
	LDA	#$41
	STA	(DLPTR),Y
	INY
	LDA	DLPTR
	STA	(DLPTR),Y
	INY
	LDA	DLPTR+1
	STA	(DLPTR),Y
;
	JSR	CLEER	; clear screen

;
;initialize mountains
;
	LDA	#0
	STA	MTNCNT
;
LOOP12	LDA	MTNCNT
	LSR	A
	LSR	A
	LSR	A
	CLC
	ADC	#5
	ADC	MEMORG
	STA	SNPTR+1
	LDA	MTNCNT
	AND	#6
	ROR	A
	ROR	A
	ROR	A
	ROR	A
	STA	SNPTR
;
	LDA	#$40
	STA	CHRIS
	STA	CHRIS2
	LDA	#$60
	STA	SUM
	STA	SUM2
;
X26	LDX	RANDOM
	CPX	#$88
	BCS	X26
	STX	OLDBEG
	INX
	STX	NEWBEG
	LDA	RANDOM
	AND	#$F
	CLC
	ADC	#$10
	ADC	OLDBEG
	BCS	X25
	CMP	#$FE
	BCC	X14
X25	LDA	#$FE
X14	STA	OLDEND
	SEC
	SBC	#1
	STA	NEWEND
;
LOOP11	LDA	#1
	STA	COLOR
	LDA	OLDBEG
	STA	LEFT
	LDA	OLDEND
	STA	RIGHT
	JSR	HLINE
	LDA	NEWBEG
	CLC
	ADC	#2
	CMP	NEWEND
	BCS	X15
	LDA	NEWBEG
	STA	LEFT
	LDA	NEWEND
	STA	RIGHT
	LDA	#2
	STA	COLOR
	JSR	HLINE
;
;next level
;
	LDA	SNPTR
	SEC
	SBC	#40
	STA	SNPTR
	BCS	X16
	DEC	SNPTR+1
X16	CLD	; THIS IS A FIX SO LOGIC 
		; ANALYZER SYSTEM WOULD WORK
	LDA	NEWBEG
	STA	OLDBEG
	LDA	NEWEND
	STA	OLDEND
;
	INC	NEWBEG
	LDA	CHRIS
LOOP10	CLC
	ADC	SUM
	STA	SUM
	BCC	X17
	INC	NEWBEG
	LDA	RANDOM
	AND	#$1F
	CLC
	ADC	CHRIS
	BCC	X18
	LDA	#$FF
X18	STA	CHRIS
	JMP	LOOP10
X17	DEC	NEWEND
	LDA	CHRIS2
X19	CLC
	ADC	SUM2
	STA	SUM2
	BCS	X20
	DEC	NEWEND
	LDA	RANDOM
	AND	#$1F
	CLC
	ADC	CHRIS2
	BCC	X21
	LDA	#$FF
X21	STA	CHRIS2
	JMP	X19
;
X20	JMP	LOOP11
;
X15	INC	MTNCNT
	LDA	MTNCNT
	CMP	#20
	BCS	X22
	JMP	LOOP12
;
;draw lake
;
X22	LDA	#0
	STA	COLOR
	LDA	MEMORG
	CLC
	ADC	#8
	STA	SNPTR+1
	LDA	#0
	STA	SNPTR
	LDA	#7
	STA	RMASK
	LDX	#$55
	LDY	#14
	JSR	LOOP18
;
;draw hand
;
	LDA	MEMORG
	CLC
	ADC	#17
	STA	SNPTR+1
	STA	HNDPTR+1
	LDA	#219
	STA	SNPTR
	STA	HNDPTR
	LDX	#0
LOOP37	LDY	#0
LOOP36	LDA	HNDTAB,X
	STA	(SNPTR),Y
	INX
	INY
	CPY	#3
	BNE	LOOP36
	CPX	#33
	BEQ	X37
	LDA	SNPTR
	CLC
	ADC	#40
	STA	SNPTR
	BCC	LOOP37
	INC	SNPTR+1
	BCS	LOOP37
;
;enable VBI
;
X37	LDX	#VBISR/256
	LDY	#VBISR&$FF
	LDA	#7
	JSR	SETVBV
;
	LDA	#DLISRV/256
	STA	DLIVEC+1
	LDA	#DLISRV&255
	STA	DLIVEC
;
X55	LDA	VCOUNT
	CMP	#16
	BCS	X55
;
	LDA	#$C0
	STA	NMIEN
	LDA	#$2E
	STA	SDMCTL
	STA	DMACTL
;
	LDA	#20
	STA	LINLEN		; ANTIC MODE D HAS 20
	LDA	#$00		; MAKE THE CHARACTERS APPEAER
	SEC
	SBC	#20*0
	STA	PADPTR		; 0 SCANLINES HIGHER
	LDA	MEMORG
	SBC	#0
	STA	PADPTR+1
	;	JSR	EXCAL
;
	JSR	EXCERS		; ERASE TITLE BUFFER
	LDA	#FSPACE&$FF
	STA	PADPTR
	LDA	#FSPACE/256
	STA	PADPTR+1
	;	JSR	EXCAL
;
	LDA	#$7C
	STA	HPOSP0
	LDA	#$7E
	STA	HPOSM1
	LDA	#$7C
	STA	HPOSM2
	LDA	#$7A
	STA	HPOSM3
	LDA	#$7F
	STA	HPOSP3
;
	LDY	#53	; WAS #53
LOOP98
	LDX	#255	; DELAY UNTIL AFTER SWORD RISES
LOOP99
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	DEX
	BNE	LOOP99
	DEY
	BNE	LOOP98
;
	;	LDA	#1	; BEGIN DISSOLVE ON 'EXCALIBUR'
	;	STA	BUFF3
LOOP96
	;	LDA	#4	; INIT COUNTER
	;	STA	WIDTH
LOOP97
	;	JSR	DISSLV
	;	DEC	WIDTH
	;	BNE	LOOP97
	;	INC	BUFF3
	;	LDA	BUFF3
	;	CMP	#12
	;	BNE	LOOP96
	JSR	TITERS
; 
	JSR	EXCERS
;
	LDA	#DLPTCH/256	; SET ANTIC F ON TOP
	STA	SNPTR+1
	LDA	#DLPTCH&$FF
	STA	SNPTR
	LDY	#0
	LDA	#$4F
	STA	(SNPTR),Y
	INY
	LDA	#FSPACE&$FF
	STA	(SNPTR),Y
	INY
	LDA	#FSPACE/256
	STA	(SNPTR),Y
	INY
;
	LDX	#0		; 60 ANTIC MODE F LINES
	LDA	#$0F
LOOP95:
	STA	(SNPTR),Y
	INY
	INX
	CPX	#61
	BNE	LOOP95
;
	LDA	#01		; THEN JUMP TO DISPLAY LIST
	STA	(SNPTR),Y
	INY
;
	LDA	DLPTR
	CLC
	ADC	#37
	PHP
	STA	(SNPTR),Y
	INY
	LDA	DLPTR+1
	PLP
	ADC	#0
	STA	(SNPTR),Y
;
	JSR	NM2ERS
	JSR	NM2FST
;
	LDX	#VBIS1/256	; SWAP IN NEW DISPLAY LIST
	LDY	#VBIS1&$FF
	LDA	#7
	JSR	SETVBV
;
	LDA	#$C0
	STA	NMIEN
	LDA	#$2E
	STA	SDMCTL
	STA	DMACTL
;
	JSR	NM1ERS	; WRITE "BY CHRIS C."
	LDA	#40
	STA	LINLEN	; ANTIC MODE F HAS 40
	LDA	#NAM1S0&$FF	; NAME IN NAM1
	STA	PADPTR
	LDA	#NAM1S0/256
	STA	PADPTR+1
	JSR	ARTHUR
	LDA	#NAM1S1&$FF
	STA	PADPTR
	LDA	#NAM1S1/256
	STA	PADPTR+1
	JSR	KING
;
	JSR	NM2ERS	; ERASE 2ND BUFFER
	LDA	#NAM2S0&$FF	; CHRIS' NAME IN NAM2
	STA	PADPTR
	LDA	#NAM2S0/256
	STA	PADPTR+1
	JSR	ARTHUR
	LDA	#NAM2S1&$FF
	STA	PADPTR
	LDA	#NAM2S1/256
	STA	PADPTR+1
	JSR	KING
;
	LDA	#11		; INSOLVE CHRIS C. ON SCREEN
	STA	BUFF3
LOOP94:
	LDA	#4
	STA	WIDTH
LOOP93:
	JSR	INSLV
	DEC	WIDTH
	BNE	LOOP93
	DEC	BUFF3
	LDA	BUFF3
	BNE	LOOP94
;
	JSR	NM2FST	; CHRIS C. SOLID ON SCREEN
	LDY	#97
	JSR	PLTEAU	; WAIT A BIT
;
;
	JSR	DIMALL
;
	LDY	#32
	JSR	PLTEAU
	JSR	ENDIT
;
	LDY	#255
	JSR	PLTEAU
;
	LDX	#XITVBV/256	; TURN OFF SOUND
	LDY	#XITVBV&255
	LDA	#7
	JSR	SETVBV
	LDA	#$C0
	STA	NMIEN
	LDA	#$2E
	STA	SDMCTL
	STA	DMACTL
;
HERE:	JMP	HERE	; HANG LOOP
;
;
;
DIMALL:

	LDX	#$00
	STX	THUMB
	STX	FINGR1
	STX	FINGR1+1
	STX	FINGR1+2
	STX	FINGR2
	STX	FINGR2+1
	STX	FINGR2+2
;
DIM00:
	STX	DIMX
;
	LDA	Q0,X
	STA	COLOR0
	STA	COLOR1
;
	LDA	Q2,X
	STA	COLOR2
	STA	COLOR4
;
	;	LDA	Q3,X
	;	STA	COLOR3
;
	LDA	DL1P0,X
	STA	DL1PF0
	LDA	DL1P1,X
	STA	DL1PF1
	LDA	DL1P2,X
	STA	DL1PF2
;
	LDA	DL2P0,X
	STA	DL2PF0
	LDA	DL2BK,X
	STA	DL2BAK
;
	LDY	#01
	JSR	PLTEAU
;
	LDX	DIMX
	INX
	CPX	#15
	BCC	DIM00
;
	RTS
;
DIMX:	DB	0
;
;
Q0:
	DB	$0D,$0C,$0B,$0A
	DB	$09,$08,$07,$06
	DB	$05,$04,$03,$02
	DB	$01,$00,$00
Q2:
	DB	$88,$88,$88,$88
	DB	$88,$88,$87,$86
	DB	$85,$84,$83,$82
	DB	$81,$80,$00
Q3:
	DB	$46,$46,$46,$46
	DB	$46,$46,$46,$46
	DB	$45,$44,$43,$42
	DB	$41,$40,$00
DL1P0:
	DB	$00,$00,$00,$00
	DB	$00,$00,$00,$00
	DB	$00,$00,$00,$00
	DB	$00,$00,$00
DL1P1:
	DB	$12,$12,$12,$12
	DB	$12,$12,$12,$12
	DB	$12,$12,$12,$12
	DB	$11,$10,$00
DL1P2:
	DB	$D4,$D4,$D4,$D4
	DB	$D4,$D4,$D4,$D4
	DB	$D4,$D4,$D3,$D2
	DB	$D1,$D0,$00
DL2P0:
	DB	$4D,$4C,$4B,$4A
	DB	$49,$48,$47,$46
	DB	$45,$44,$43,$42
	DB	$41,$40,$00
DL2BK:
	DB	$94,$94,$94,$94
	DB	$94,$94,$94,$94
	DB	$94,$94,$93,$92
	DB	$91,$90,$00
;
;
;
	;Q0:	DB	$0D,$0B,09,07,05,03,01,00
	;Q2:	DB	$88,$86,$86,$84,$84,$82,$82,00
	;Q3:	DB	$46,$46,$44,$44,$44,$42,$42,00
	;DL1P0:	DB	00,00,00,00,00,00,00,00
	;DL1P1:	DB	18,18,18,18,18,18,18,00
	;DL1P2:	DB	$D4,$D4,$D4,$D2,$D2,$D2,00,00
	;DL2P0:	DB	$4D,$4B,$49,$47,$45,$43,$41,00
	;DL2BK:	DB	$94,$94,$94,$92,$92,$92,00,00
;
;
ENDIT:
	JSR	TITERS		; ERASE TEXT WINDOWS
	JSR	EXCERS
	JSR	NM1ERS
	JSR	NM2ERS
;
	LDX	#VBIS2/256
	LDY	#VBIS2&255
	LDA	#7
	JSR	SETVBV
	LDA	#$C0
	STA	NMIEN
	LDA	#$2E
	STA	SDMCTL
;
	LDA	#$0F		; BRING WHITE BACK
	STA	COLOR0
	LDA	#$00
	STA	COLOR1
	LDA	#$00
	STA	COLOR2
	LDA	#$46
	STA	COLOR3
	LDA	#$00
	STA	COLOR4
;
	LDA	#00
	STA	DL1PF0
	STA	DL1PF1
	STA	DL1PF2
	STA	DL2PF0
	STA	DL2BAK
;
	LDA	#20
	STA	LINLEN
	LDA	#NAM1S0&255
	STA	PADPTR
	LDA	#NAM1S0/256
	STA	PADPTR+1
	JSR	FOREVR
;
	LDA	#NAM2S0&255
	STA	PADPTR
	LDA	#NAM2S0/256
	STA	PADPTR+1
	JSR	FOREVR
;
	LDA	#11
	STA	BUFF3
LOOP92:
	LDA	#3
	STA	WIDTH
LOOP91:
	JSR	TITSLV
	DEC	WIDTH
	BNE	LOOP91
	DEC	BUFF3
	LDA	BUFF3
	BNE	LOOP92
;
	JSR	NM2MEM
;
	RTS
;
;
CLEER:		;routine to clear screen
	LDA	MEMORG
	STA	SNPTR+1
	LDA	#0
	STA	SNPTR
	TAX
	TAY
LOOP13	STA	(SNPTR),Y
	INY
	CPY	#$F8
	BNE	X13
	CPX	#4
	BNE	X13
	LDA	#$FF
X13	CPY	#0
	BNE	LOOP13
	INC	SNPTR+1
	INX
X30	CPX	#20
	BNE	LOOP13
	RTS
;
;
PLTEAU:	; WAIT LOOP
LOOP88
	LDX	#255	; DELAY
LOOP87
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	DEX
	BNE	LOOP87
	DEY
	BNE	LOOP88
	RTS
;
;
; WRITE 'EXCALIBUR'
;
FOREVR:
	LDX	#22
	LDA	#'F'
	JSR	CALIG
	LDA	#'o'
	JSR	CALIG
	LDA	#'r'
	JSR	CALIG
	LDA	#'e'
	JSR	CALIG
	LDA	#'v'
	JSR	CALIG
	LDA	#'e'
	JSR	CALIG
	LDA	#'r'
	JSR	CALIG
	RTS
;
;
ARTHUR:
	LDX	#44
	LDA	#'A'
	JSR	CALIG
	LDA	#'r'
	JSR	CALIG
	LDA	#'t'
	JSR	CALIG
	LDA	#'h'
	JSR	CALIG
	LDA	#'u'
	JSR	CALIG
	LDA	#'r'
	JSR	CALIG
	RTS
;
;
KING:
	LDX	#0
	LDA	#'i'
	JSR	CALIG
	LDA	#'s'
	JSR	CALIG
	INX
	INX
	INX
	INX
	INX
	INX
	INX
	INX
	INX
	INX
	INX
	INX
	LDA	#'k'
	JSR	CALIG
	LDA	#'i'
	JSR	CALIG
	LDA	#'n'
	JSR	CALIG
	LDA	#'g'
	JSR	CALIG
	RTS
;
;
NM2FST:		; COPIES NAM2S TO FSTART
	LDA	#NAM2S0/256
	STA	CRPTR+1
	LDA	#NAM2S0&$FF
	STA	CRPTR
	LDA	#FSTART/256
	STA	SNPTR+1
	LDA	#FSTART&$FF
	STA	SNPTR
	LDA	#0
	STA	BUFF1
	LDY	#0
NM20:
	LDA	(CRPTR),Y
	STA	(SNPTR),Y
	INY
	BNE	NM20
	INC	SNPTR+1
	INC	CRPTR+1
	INC	BUFF1
	LDA	BUFF1
	CMP	#5
	BNE	NM20
	RTS
;
;
NM2MEM:		; COPIES NAM2S TO MEMORG
	LDA	#NAM2S0/256
	STA	CRPTR+1
	LDA	#NAM2S0&$FF
	STA	CRPTR
	LDA	MEMORG
	STA	SNPTR+1
	LDA	#00
	STA	SNPTR
	LDA	#0
	STA	BUFF1
	LDY	#0
NM2M0:
	LDA	(CRPTR),Y
	STA	(SNPTR),Y
	INY
	BNE	NM2M0
	INC	SNPTR+1
	INC	CRPTR+1
	INC	BUFF1
	LDA	BUFF1
	CMP	#5
	BNE	NM2M0
	RTS
;
;

;
;
;
DISSLV:		; DISSOLVES WORDS IN TITLE
	LDA	#FSPACE/256
	STA	CRPTR+1
	LDA	#FSPACE&$FF
	STA	CRPTR
	LDA	MEMORG
	STA	SNPTR+1
	LDA	#0
	STA	SNPTR
	STA	BUFF1
	TAY
DIS0:
	JSR	RNDBIT
	LDA	(CRPTR),Y
	EOR	#$FF
	ORA	BUFF2
	EOR	#$FF
	STA	(SNPTR),Y
	INY
	LDA	(CRPTR),Y	; NEW CODE
	EOR	#$FF	; NEW CODE
	ORA	BUFF2	; NEW CODE
	EOR	#$FF	; NEW CODE
	STA	(SNPTR),Y	; NEW CODE
	INY		; NEW CODE
	BNE	DIS0
	INC	SNPTR+1
	INC	CRPTR+1
	INC	BUFF1
	LDA	BUFF1
	CMP	#3
	BNE	DIS0
	RTS
;
;
;
TITSLV:
	LDA	MEMORG
	STA	SNPTR+1
	LDA	#0
	STA	SNPTR
	JMP	INSL1
;
;
;
INSLV:		; INSOLVES NAME IN TITLE
	LDA	#FSTART/256
	STA	SNPTR+1
	LDA	#FSTART&$FF
	STA	SNPTR
INSL1:
	LDA	#NAM1S0/256
	STA	CRPTR+1
	LDA	#NAM1S0&$FF
	STA	CRPTR
	LDA	#0
	STA	BUFF1
	TAY
INSL0:
	JSR	RNDBIT
	LDA	(CRPTR),Y
	EOR	#$FF
	ORA	BUFF2
	EOR	#$FF
	STA	(SNPTR),Y
	INY
	LDA	(CRPTR),Y	; NEW CODE FOR SPEED
	EOR	#$FF
	ORA	BUFF2
	EOR	#$FF
	STA	(SNPTR),Y
	INY	; NEW CODE
	BNE	INSL0
	INC	SNPTR+1
	INC	CRPTR+1
	INC	BUFF1
	LDA	BUFF1
	CMP	#5
	BNE	INSL0
	RTS
;
;
ENFOLD:		; ENFOLDS 2 NAMES IN TITLE
	LDA	#NAM1S0/256
	STA	CRPTR+1
	LDA	#NAM1S0&$FF
	STA	CRPTR
	LDA	#NAM2S0/256
	STA	PADPTR+1
	LDA	#NAM2S0&$FF
	STA	PADPTR
	LDA	#FSTART/256
	STA	SNPTR+1
	LDA	#FSTART&$FF
	STA	SNPTR
	LDA	#0
	STA	BUFF1
	TAY
ENF0:
	LDA	(CRPTR),Y
	ORA	(PADPTR),Y
	BEQ	ENF1
	JSR	RNDBIT
	LDA	(CRPTR),Y
	EOR	(PADPTR),Y
	AND	BUFF2
	EOR	(PADPTR),Y
	STA	(SNPTR),Y
ENF1:
	INY
	LDA	(CRPTR),Y	; NEW CODE FOR SPEED
	ORA	(PADPTR),Y
	BEQ	ENF2
	LDA	(CRPTR),Y
	EOR	(PADPTR),Y
	AND	BUFF2
	EOR	(PADPTR),Y
	STA	(SNPTR),Y
ENF2:
	INY		; NEW CODE FOR SPEED
	BNE	ENF0
	INC	SNPTR+1
	INC	CRPTR+1
	INC	PADPTR+1
	INC	FOGPTR+1
	INC	BUFF1
	LDA	BUFF1
	CMP	#5
	BNE	ENF0
	RTS
;
;
; **********************************
RND07:
	LDA	BIT7,X
	STA	BUFF2
	RTS
;
RND8:
	LDA	RANDOM
	CMP	#128
	BCC	RNDEND
	LDA	BIT7,X
	STA	BUFF2
RNDEND:
	RTS

;
RND9:
	LDA	RANDOM
	CMP	#31
	BCC	RNDEND
	INX
	LDA	BIT7,X
	STA	BUFF2
	RTS
;
RND7:	BEQ	RND07
;
RND10:
	LDA	RANDOM
	CMP	#10
	BCC	RNDEND
	LDA	BIT7,X
	STA	BUFF2
	RTS
;
RND11:
	LDA	RANDOM
	CMP	#0
	BCC	RNDEND
	LDA	BIT7,X
	STA	BUFF2
	RTS
;
;
RNDBIT:		; SUPPLIES A RANDOM COUNTED
	LDA	RANDOM
	AND	#$0F
	TAX
	LDA	#$FF
	STA	BUFF4
	STA	BUFF2
	LDA	BUFF3		; SET OF BITS
	CMP	#7		; BUFF3 SPECS HOW MANY
	BEQ	RND7		; BUFF2 WILL CONTAIN RESULTS
	CMP	#8

	BEQ	RND8
	CMP	#9
	BEQ	RND9
	CMP	#10
	BEQ	RND10
	CMP	#11
	BEQ	RND11
	CMP	#6
	BEQ	RND6
	CMP	#5
	BEQ	RND5
	CMP	#4
	BEQ	RND4
	CMP	#3
	BEQ	RND3
	CMP	#2
	BEQ	RND2
;
RND1:
	LDA	BIT1,X
	STA	BUFF2
	RTS
;
RND5:
	LDA	BIT5,X
	STA	BUFF2
	RTS
;
RND6:
	LDA	BIT6,X
	STA	BUFF2
	RTS
;
RND2:
	LDA	BIT2,X
	STA	BUFF2
	RTS
;
RND3:
	LDA	BIT3,X
	STA	BUFF2
	RTS
;
RND4:
	LDA	BIT4,X
	STA	BUFF2
	RTS
;
;
;
BIT1:
	DB	128
	DB	32
	DB	8
	DB	2
	DB	64
	DB	16
	DB	4
	DB	1
	DB	4
	DB	0
	DB	64
	DB	0
;
BIT2:
	DB	65
	DB	144
	DB	32
	DB	16
	DB	8
	DB	4
	DB	9
	DB	34
	DB	132
	DB	72
	DB	18
	DB	36
;
BIT3:
	DB	18
	DB	42
	DB	74
	DB	146
	DB	69
	DB	72
	DB	73
	DB	65
	DB	133
	DB	52
	DB	176
	DB	36
;
BIT4:
	DB	201
	DB	43
	DB	165
	DB	90
	DB	150
	DB	54
	DB	77
	DB	184
	DB	73
	DB	42
	DB	133
	DB	146
	DB	203
	DB	171
	DB	208
	DB	151
;
BIT7:
	DB	255-128
	DB	255-32
	DB	255-8
	DB	255-2
	DB	255-64
	DB	255-16
	DB	255-4
	DB	255-1
	DB	255-4
	DB	255-0
	DB	255-64
	DB	255-0
;
BIT6:
	DB	255-65
	DB	255-144
	DB	255-32
	DB	255-16
	DB	255-8
	DB	255-4
	DB	255-9
	DB	255-34
	DB	255-132
	DB	255-72
	DB	255-18
	DB	255-36
;
BIT5:
	DB	255-18
	DB	255-42
	DB	255-74
	DB	255-146
	DB	255-69
	DB	255-72
	DB	255-73
	DB	255-65
	DB	255-133
	DB	255-52
	DB	255-176
	DB	255-36
	DB	201
	DB	43
	DB	165
	DB	90
;
; ********************************
;
;
NM1ERS:	; ERASES NAME1 AREA
	LDA	#NAM1/256
	STA	SNPTR+1
	LDA	#NAM1&$FF
	STA	SNPTR
	JMP	EXC1
;
;
NM2ERS:	; ERASES NAME2 AREA
	LDA	#NAM2/256
	STA	SNPTR+1
	LDA	#NAM2&$FF
	STA	SNPTR
	JMP	EXC1
;
;
EXCERS:	; ERASES TITLE BUFFER AREA
	LDA	#FSPACE/256
	STA	SNPTR+1
	LDA	#FSPACE&$FF
	STA	SNPTR
EXC1:
	LDA	#0
	STA	BUFF1
	TAY
EXC2:
	LDA	#0
EXC0:
	STA	(SNPTR),Y
	INY
	BNE	EXC0
	INC	SNPTR+1
	INC	BUFF1
	LDA	BUFF1
	CMP	#9
	BNE	EXC2
	LDA	#0
EXC3:
	STA	(SNPTR),Y
	INY
	CPY	#176
	BNE	EXC3
	RTS
;
;
TITERS:		; ERASES WORDS IN TITLE
	LDA	MEMORG
	STA	SNPTR+1
	LDA	#0
	STA	SNPTR
TIT1:
	STA	BUFF1
	TAY
TIT2:
	LDA	#0
TIT0:
	STA	(SNPTR),Y
	INY
	BNE	TIT0
	INC	SNPTR+1
	INC	BUFF1
	LDA	BUFF1
	CMP	#3
	BNE	TIT2
	RTS
;
;
;subroutine to draw from a template
;
LOOP18	STY	YCNT
	STX	STARTX
	LDA	RANDOM
	AND	RMASK
	CLC
	ADC	TMPLTL,Y
	ADC	STARTX
	STA	LEFT
	LDA	RANDOM
	AND	RMASK
	CLC
	ADC	TMPLTR,Y
	ADC	STARTX
	BCS	X28
	CMP	#$FF	;special case test
	BNE	X24
X28	LDA	#$FE
X24	STA	RIGHT
	JSR	HLINE
	LDA	SNPTR
	CLC
	ADC	#40
	STA	SNPTR
	BCC	X31
	INC	SNPTR+1
X31	LDY	YCNT
	INY
	LDX	STARTX
	LDA	TMPLTR,Y
	BNE	LOOP18
	RTS
;
;subroutines to draw lines
;
PLOT	PHA
	LSR	A
	LSR	A
	TAY
	PLA
	AND	#3
	ASL	A
	ADC	#3
	TAX
	STA	TAMP1
	LDA	(SNPTR),Y
LOOP9	ROL	A
	DEX
	BNE	LOOP9
	STA	TAMP2
	LDA	COLOR
	EOR	TAMP2
	AND	#3
	EOR	TAMP2
	LDX	TAMP1
LOOP8	ROR	A
	DEX
	BNE	LOOP8
	STA	(SNPTR),Y
	RTS
;
HLINE	LDA	LEFT
	JSR	PLOT
	INC	LEFT
	LDA	RIGHT
	CMP	LEFT
	BCS	HLINE
	RTS
;
;DLI service routine
;
DLISRV	PHA
	INC	DLICNT
	LDA	DLICNT
	LSR	A
	BCC	DLI2
	LDA	DL1PF0
	EOR	COLRSH
	AND	DRKMSK
	STA	COLPF0
	LDA	DL1PF2
	EOR	COLRSH
	AND	DRKMSK
	STA	COLPF2
	LDA	DL1PF1
	EOR	COLRSH
	AND	DRKMSK
	STA	COLPF1
	PLA
	RTI
DLI2	LDA	DL2PF0
	EOR	COLRSH
	AND	DRKMSK
	STA	WSYNC
	STA	COLPF0
	LDA	DL2BAK
	EOR	COLRSH
	AND	DRKMSK
	STA	COLBAK
	PLA
	RTI
;
;stage two processing retracts sword
;
VBIS2:
	LDY	#3
	LDA	#$4B
	STA	(DLPTR),Y
	INY
	LDA	#00
	STA	(DLPTR),Y
	INY
	LDA	MEMORG
	STA	(DLPTR),Y
	JMP	VBISR
;
;
VBIS1:
	LDY	#3
	LDA	#01
	STA	(DLPTR),Y
	INY
	LDA	#DLPTCH&$FF
	STA	(DLPTR),Y
	INY
	LDA	#DLPTCH/256
	STA	(DLPTR),Y
;
VBISR:
VBISR1:
;
	LDA	#0
	STA	DLICNT
;
	LDA	JFCNT	; FLASH THE SWORD EVERY 4
	AND	#3
	CMP	#0
	BNE	LL09
	LDA	PCLR0S
	BPL	LL01

	LDA	#$0F
	STA	PCOLR0
	STA	PCLR0S
	JMP	LL09

LL01
	LDA	#$8F
	STA	PCOLR0
	STA	PCLR0S

LL09
	INC	JFCNT
	BNE	L0
	INC	JFCNT+1
;
L0:
	;	LDA	JFCNT	; COMMENTED OUT BECAUSE
	;	CMP	#00	; PHRASE IS ONLY HEARD 1CE
	;	BNE	L1
	;	LDA	JFCNT+1
	;	CMP	#4
	;	BNE	L1
;
	;	LDA	#0
	;	STA	JFCNT
	;	STA	JFCNT+1
	;	STA	NTCNT1
	;	STA	NTCNT2
	;	STA	NTCNT3
	;	STA	TIM1
	;	STA	TIM2
	;	STA	TIM3
	;	JMP	XITVBV
;
L1:			; VOICE 1
	INC	TIM1
	LDX	NTCNT1
;
	LDA	T1,X	; DECAY ON VOICE 1
	SEC
	SBC	C1,X
	CMP	TIM1
	BCS	L1A
	LDA	AUDC1S
	CMP	#$E1
	BEQ	L1A
	LDA	AUDC1S
	SEC
	SBC	#1
	STA	AUDC1
	STA	AUDC1S
;
L1A:
	LDA	T1,X
	CMP	TIM1
	BNE	L1C
	LDA	#1
	STA	TIM1
	INC	NTCNT1
	INX
	LDA	#$E1
	STA	AUDC1
	STA	AUDC1S
	LDA	F1,X
	STA	AUDF1
	JMP	L2
;
L1C:			; ATTACK ON VOICE 1
	LDA	#$11
	CMP	TIM1
	BCC	L2
	LDA	C1,X
	ORA	#$E0
	CMP	AUDC1S
	BEQ	L2
;
	LDA	AUDC1S
	CLC
	ADC	#1
	STA	AUDC1
	STA	AUDC1S
;
L2:			; VOICE 2
	INC	TIM2
	LDX	NTCNT2
;
	LDA	T2,X	; DECAY ON VOICE 2
	SEC
	SBC	C2,X
	CMP	TIM2
	BCS	L2A
	LDA	AUDC2S
	CMP	$E1
	BEQ	L2A
	LDA	AUDC2S
	SEC
	SBC	#1
	STA	AUDC2
	STA	AUDC2S
;
L2A:
	LDA	T2,X
	CMP	TIM2
	BNE	L2C
	LDA	#1
	STA	TIM2
	INC	NTCNT2
	INX
	LDA	#$E1
	STA	AUDC2
	STA	AUDC2S
	LDA	F2,X
	STA	AUDF2
	JMP	L3
;
L2C:			; ATTACK ON VOICE 2
	LDA	#$11
	CMP	TIM2
	BCC	L3
	LDA	C2,X
	ORA	#$E0
	CMP	AUDC2S
	BEQ	L3
;
	LDA	AUDC2S
	CLC
	ADC	#1
	STA	AUDC2
	STA	AUDC2S
;
L3:
	INC	TIM3
	LDX	NTCNT3
	LDA	T3,X
	CMP	TIM3
	BNE	L4
	LDA	#1
	STA	TIM3
	INC	NTCNT3
	INX
	LDA	F3,X
	BNE	L3C
	LDA	#$E1
	STA	AUDC3
L3C:
	LDA	#$E3
	STA	AUDC3
L3D:
	LDA	F3,X
	STA	AUDF3
;
L4:			; END MUSIC PROCESS, DO SWORD
			; DELAY TO SYNC WITH MUSIC
	;	LDA	JFCNT+1
	;	CMP	#2
	;	BCS	L9
	;	LDA	JFCNT+1
	;	CMP #1
	;	BCC	X35
	;	LDA	JFCNT
	;	CMP	#50
	;	BCC	X35
;
L9:
	INC	FMCNT2
	LDA	FMCNT2
	CMP	#$10	;#$42   #$60
	BCS	X34
X35	JMP	XITVBV
X34	CMP	#$62  ;#$92   #$FF
	BNE	X36
	DEC	FMCNT2
	BNE	X35
X36
	AND	#1	;#3
	BNE	X35
	INC	SWDCNT
	RETRC	P0
	RETRC	P3
	RETRC	M
	LDA	HNDPTR
	STA	SNPTR
	SEC
	SBC	#40
	STA	TAMP1
	LDA	HNDPTR+1
	STA	SNPTR+1
	SBC	#0
	STA	TAMP2
	LDX	#11
X33	LDY	#0
X29	LDA	(SNPTR),Y
	STA	(TAMP1),Y
	INY
	CPY	#3
	BNE	X29
	LDA	SNPTR+1
	STA	TAMP2
	LDA	SNPTR
	STA	TAMP1
	CLC
	ADC	#40
	STA	SNPTR
	BCC	X32
	INC	SNPTR+1
X32	DEX
	BNE	X33
	LDA	HNDPTR
	SEC
	SBC	#40
	STA	HNDPTR
	LDA	HNDPTR+1
	SBC	#0
	STA	HNDPTR+1
	JMP	XITVBV
;
HNDTAB	DB	0,0,0
	DB	0,$15,0
	DB	5,$45,$40
	DB	0,5,$40
	DB	5,$45,$50
	DB	0,5,$50
	DB	5,$45,$50
	DB	0,5,$50
	DB	0,5,$54
	DB	0,5,$54
	DB	0,0,0
ITAB	DB	DLAREA
	DB	$6E,$6E,$6E,$6E,$6E
	DB	$6F,$6F,$6F,$6F,$6F
	DB	0,0,0,$4E,$94,$FF
P0TAB	DB	8,$1C,$3E,$7F
	DB	127,127,127,127
	DB	127,127,127,127
	DB	127,127,127,127
	DB	127,127,127,127
	DB	127,127,127,127
	DB	127,127,127,127
	DB	127,127,127,127,0
	DB	0,0,0,0
	DB	0,0,0,0
P3TAB	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	255,255,224,224
	DB	224,224,224,224
	DB	0
MTAB	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	248,248,0,0
	DB	0,0,0,0,0
BASET	DB	$10,$58,$88,$C8
TMPLTL	DB	19,17,15,13,11
	DB	10,9,8,7,6
	DB	7,8,10,0
	DB	72,67,58,57,45
	DB	46,39,36,31,29
	DB	28,25,22,21,22
	DB	23,21,16,12,10
	DB	9,10,12,12,11
	DB	8,6,5,4,3
	DB	3,2,1,0,0
	DB	0,0,0,0,0
	DB	0,0,0,0,0
	DB	0,0,0,0,0
TMPLTR	DB	31,33,35,37,39
	DB	40,41,42,43,44
	DB	43,42,40,0
	DB	98,103,112,113,125
	DB	124,131,134,139,141
	DB	142,145,148,149,148
	DB	147,149,154,158,160
	DB	161,160,158,158,159
	DB	162,164,165,166,167
	DB	167,168,169,170,170
	DB	170,170,170,170,170
	DB	170,170,170,170,170
	DB	170,170,170,0
;
F1:			; MUSIC TABLES
	DB	0
	DB	121	; C4
	DB	162	; G3
	DB	162	; G3
	DB	121	; C4
	DB	108	; D4
	DB	102	; Eb4
	DB	108	; D4
	DB	81	; G4
	DB	81	; G4
	DB	85	; Bb4
	DB	81	; G4
	DB	68	; Bb4
	DB	60	; C5
	DB	68	; Bb4
	DB	76	; Ab4
	DB	0
	DB	0
;

T1:
	DB	1
	DB	[48*TEMPO]+[48/4]*TMPODV
	DB	[12*TEMPO]+[12/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[12*TEMPO]+[12/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[24*TEMPO]+[24/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	[12*TEMPO]+[12/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[48*TEMPO]+[48/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	[32*TEMPO]+[32/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	255
	DB	255
;
C1:
	DB	$01
	DB	$05
	DB	$07
	DB	$07
	DB	$07
	DB	$07
	DB	$07
	DB	$07
	DB	$09
	DB	$0B
	DB	$0B
	DB	$0B
	DB	$0D
	DB	$0D
	DB	$0D
	DB	$0D
	DB	$01
	DB	$01
;
F2:
	DB	0
	DB	162	; G3
	DB	217	; D3
	DB	217	; D3
	DB	162	; G3
	DB	162	; G3
	DB	121	; C4
	DB	162	; G3
	DB	102	; Eb4
	DB	102	; Eb4
	DB	108	; D4
	DB	102	; Eb4
	DB	96	; En4
	DB	81	; G4
	DB	96	; En4
	DB	96	; En4
	DB	96	; En4
	DB	91	; F4
	DB	0
	DB	0
;
T2:
	DB	1
	DB	[48*TEMPO]+[48/4]*TMPODV
	DB	[12*TEMPO]+[12/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[12*TEMPO]+[12/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[24*TEMPO]+[24/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	[12*TEMPO]+[12/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[24*TEMPO]+[24/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	[32*TEMPO]+[32/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	255
	DB	255
;
C2:
	DB	$01
	DB	$05
	DB	$07
	DB	$07
	DB	$07
	DB	$07
	DB	$07
	DB	$07
	DB	$09
	DB	$0B
	DB	$0B
	DB	$0B
	DB	$0D
	DB	$0D
	DB	$0D
	DB	$0D
	DB	$0D
	DB	$0D
	DB	$01
	DB	$01
;
F3:
	DB	0
	DB	243	; C3   DRUM BEAT
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	0
	DB	0
;
T3:
	DB	1
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[20*TEMPO]+[20/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[24*TEMPO]+[24/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[20*TEMPO]+[20/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[24*TEMPO]+[24/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[40*TEMPO]+[40/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[20*TEMPO]+[20/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	255
	DB	255
;
;


COLORS:
	LDA	#$00
	STA	DL1PF0
	STA	DL1PF1
	STA	DL1PF2
	STA	DL2PF0
	STA	DL2BAK
	STA	COLOR0
	STA	COLOR1
	STA	COLOR2
	STA	COLOR3
	STA	COLOR4
	STA	PCOLR0
	STA	PCOLR1
	STA	PCOLR2
	STA	PCOLR3
	RTS
;
;

LOGINT:		; routine called by swap
			; to init game
;
	JSR	KNTRND	; INIT KNIGHT RELATIONS
	JSR	PERINT	; INIT PERSONALITIES
	JSR	INTFAN	; INIT MUSIC
;
	LDA	#32
	STA	KNTHON
;
	LDA	#$80
	STA	MAGIC
	STA	MERFLG	; NON-0 MEANS HE'S HOME
;
	LDA	#7
	STA	TOTHON
;
	LDA	#0
	STA	ADLTRY
	STA	TRAPFL
	STA	WEEKLO
	STA	WEEKHI
	STA	KILLLO
	STA	KILLHI
	STA	ARRIVE
	STA	HEAD
	STA	BUTT
	STA	SUCESS
;
	LDX	#15
LOG01:		; CROPS ARE 32(+ 8) PER KINGDOM
	LDA	#$10
	STA	TRBTOR,X
	STA	LIEGE,X
	STA	TARGIT,X
	STA	AGRSSR,X
;
	LDA	#1
	STA	KNTHON,X
	STA	HITCRP,X
;
	LDA	#00
	STA	BNKRAT,X
	STA	REVAS,X
	STA	TRBCNT,X
	STA	GEORGE,X
	STA	FLDARM,X
	STA	FLDKNT,X
	STA	PILCAR,X
	STA	PILCAR+16,X
	STA	RETRET,X
	STA	BRNCNT,X
	STA	KNTARM,X
	STA	RELHON,X
	STA	ARMSIZ,X
	STA	ARMEXP,X
	STA	ARMEXP+16,X
	STA	KNTIN,X
	STA	BANK,X
	STA	BANK+16,X
	STA	ACCUM,X
	STA	TRIBUT,X
	STA	BURNT,X
	STA	DANGER,X
	STA	TITBGT,X
	STA	TITGAV,X
;
	LDA	#$C4	; ALL KNIGHTS UNSELECTED
	STA	KNTCOL,X
;
	LDA	#$C0	; 3/4 ARMY ON CAMPAIGNS
	STA	HAIRY,X
;
	LDA	#10
	STA	KGKNTS,X
	STA	HOMKNT,X
;
	LDA	#15
	STA	PRESTG,X
;
	LDA	#48
	STA	ACTCRP,X
	STA	OUTCRP,X
;
	LDA	#$FF
	STA	ADVNCE,X
;
	LDA	#$40
	STA	MONGER,X
;
	LDA	#9
	STA	TAX,X
;
	LDA	#6
	STA	ARMBGT,X
;
	DEX
	BMI	LOGQQ
	JMP	LOG01
LOGQQ:
;
	LDA	#30		; ARTHUR GETS TWICE AS
	STA	PRESTG		; MUCH PRESTIGE
;
	LDA	#$01
	STA	KNTIN+0		; ARTHUR IS AT CAMELOT
	STA	KNTIN+1		; NOSNIKTA
	STA	KNTIN+2		; SREMMUS
	STA	KNTIN+3		; DROFWARC
	STA	KNTIN+6		; KAY
	STA	KNTIN+10	; LAMEROK
	STA	KNTIN+11	; GWENIVIERE
	STA	KNTIN+14	; LUCAS
;
				; STORE LOWEST CROP TYPE
	LDX	#255		; FOR EVERY CROP PER KINGDOMS
LOG02:
	LDA	#$88		; TW0 FIELD CROP
	STA	CRPTYP,X
	DEX
	BEQ	LOGZZ
	LDA	#$89		; FOUR FIELD CROP
	STA	CRPTYP,X
	DEX
	BEQ	LOGZZ
	JMP	LOG02
LOGZZ:
	LDA	#$89
	STA	CRPTYP,X
;
	LDY	#48		; SOME CROPS ARE MORE
LOG03:
	LDX	RANDOM
	LDA	CRPTYP,X
	CMP	#$88
	BNE	LOG03
	LDA	#$89
	STA	CRPTYP,X
	TXA
	LSR	A
	LSR	A
	LSR	A
	LSR	A
	TAX
	INC	ACTCRP,X	; REFLECT MORE IN TOTALS
	INC	ACTCRP,X
	INC	OUTCRP,X
	INC	OUTCRP,X
	DEY
	BNE	LOG03
;
	; SET UP STATUS OF KINGDOMS
	; CAMELOT IS SUB TO ARTHUR
	; ALL THE REST ARE NUETRAL
	LDA	#$40
	LDX	#$01
LOG04:
	STA	KNGSTS,X
	INX
	CPX	#00
	BNE	LOG04
;
LOG05:
	LDA	#$10
	STA	KNGSTS,X
	TXA
	CLC
	ADC	#$11
	BCS	LOG06
	TAX
	JMP	LOG05
;
LOG06:			; THIS SETS TH GAME INTRIGUE
	LDX	#$0F	; BY SETTING THE STAGE FOR
LOG07:			; KINGDOM GROWTH & WHERE THE
	LDA	RANDOM	; POWER CENTERS SHALL BE
	ORA	#$C0
	STA	MAINT,X	; A TOUCH OF RANDOMNESS
	DEX
	BPL	LOG07
;
	LDX	#$F		; INIT KNIGHT'S RELATIONS
LUUP08	LDA	RANDOM
	AND	#$3F	; ALL KNIGHTS 1/2 TO ARTHUR
	CLC
	ADC	#$60
	STA	KTABX,X
	LDA	RANDOM
	AND	#$3F
	CLC
	ADC	#$60
	STA	KTABY,X
	DEX
	BPL	LUUP08
;
	LDA	#$80	; ARTHUR IS THE CENTER
	STA	KTABX
	STA	KTABY
;
;Guenevere corrections
;
	LDA	#124		; GWENY IS CLOSE TO HIM
	STA	KTABX+11
	STA	KTABY+11
;
	LDX	#$7F
	LDA	#00
LUUP12:
	STA	TRBASK,X
	DEX
	BPL	LUUP12
	RTS
;
;

; COPYRITE.ASM          JULY 7, 1983
;
COPYRT:
	JSR	COLORS
;
	LDA	#COPYDL/256
	STA	DLISTH
	STA	$D403
	LDA	#COPYDL&255
	STA	DLISTL
	STA	$D402
;
	JSR	SETUP
;
	JSR	READIT
;
	RTS
;
;
COPYDL:
	DB	$70,$70,$70,$70,$70,$70,$70,$70
	DB	$70,$70,$70
	DB	$42
	DW	LINE1
	DB	$41
	DW	COPYDL
;
LINE1:	DB	0,0,0,0
	DB	$23,$2F,$30,$39,$32,$29,$27,$28,$34
	DB	0,0,$08,$63,$09,0
	DB	$21,$34,$21,$32,$29
	DB	0,0,0
	DB	$11,$19,$18,$13
	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
;
;
;
; PREINT.ASM         APRIL 14, 1983
;
; KING PERSONALITY INITIALIZATION
;
PERINT:
	LDX	#$0F
PERIN0:
	LDA	RANDOM
	AND	IAMMSK
	ADC	IAMBTN,X
	STA	AMBITN,X
;
	LDA	RANDOM
	AND	ICOMSK
	ADC	ICOWRD,X
	STA	COWARD,X
;
	LDA	RANDOM
	AND	ICRMSK
	ADC	ICRPST,X
	STA	CRPSTG,X
;
	LDA	AMBITN,X	; SUB CRPSTG OFFSET
	SEC			; FROM AMBITION SO HE
	SBC	CRPSTG,X	; WILL GET LESS
	BCS	PERIN3		; AMBITIOUS AS CRPSTG
	LDA	#0		; LOWERS
PERIN3:
	STA	AMBITN,X
;
	LDA	COWARD,X	; ADD CRPSTG OFFSET
	CLC			; TO COWARDICE SO HE
	ADC	CRPSTG,X	; WILL GET MORE
	BCC	PERIN4		; COWARDLY AS CRPSTG
	LDA	#$FF		; LOWERS
PERIN4:
	STA	COWARD,X
;
	LDA	RANDOM
	AND	INAMSK
	ADC	INASTY,X
	STA	NASTY,X
;
	LDA	RANDOM
	AND	INIMSK
	ADC	INICEY,X
	STA	NICEY,X
;
	LDA	RANDOM
	AND	ITYMSK
	ADC	ITYRNT,X
	STA	TYRANT,X
;
	LDA	RANDOM
	AND	IWSMSK
	ADC	IWSWSH,X
	STA	WSHWSH,X
;
	DEX
	BPL	PERIN0
;
	LDX	#$00
PERIN1:
	LDA	RANDOM
	AND	LNGMSK
	CLC
	ADC	ILNGTM,X
	BCC	PERIN2
	LDA	#$FF
PERIN2:
	STA	LNGTRM,X
	STA	JUSTIC,X
	INX
	BNE	PERIN1
;
	RTS
;
;
IWSMSK:	DB	$1F	; MASKS MUST BE
IAMMSK:	DB	$1F	; CONTINUOUS SET OF
ICOMSK:	DB	$1F	; BITS FROM RIGHT
ICRMSK:	DB	$0F	; TO LEFT
INAMSK:	DB	$1F
INIMSK:	DB	$1F
ITYMSK:	DB	$0F
LNGMSK:	DB	$1F
;
;
IAMBTN:	DB	$70,$B0,$70,$B0
	DB	$10,$D0,$84,$20
	DB	$B0,$B0,$3C,$68
	DB	$B0,$70,$70,$30
;
IWSWSH:	DB	$8E,$80,$80,$90	; $80=NORM
	DB	$E0,$54,$A8,$40	; ART'S VAL IS HI
	DB	$38,$70,$78,$88	; TO GET LESS TRI
	DB	$30,$C4,$A8,$B8	; -BUTE HIS WAY !
;
ICOWRD:	DB	$70,$40,$B0,$70	; $80=NORM
	DB	$60,$6C,$18,$D0
	DB	$B0,$70,$3C,$30
	DB	$30,$70,$70,$B0
;
ICRPST:	DB	$3C,$20,$1C,$1C
	DB	$14,$19,$19,$1B
	DB	$14,$19,$19,$1A
	DB	$1C,$1F,$10,$0E
;
INASTY:	DB	$70,$B0,$70,$68
	DB	$10,$2C,$38,$A8
	DB	$B0,$70,$20,$78
	DB	$D0,$A0,$70,$30
;
INICEY:	DB	$70,$D0,$C8,$38
	DB	$30,$6C,$36,$2C
	DB	$B0,$70,$D0,$90
	DB	$30,$70,$C0,$C0
;
ITYRNT:	DB	$20,$30,$40,$78
	DB	$40,$38,$80,$38
	DB	$60,$50,$50,$30
	DB	$90,$40,$40,$20
;
;
ILNGTM:
LNGART:	DB	$FF,$80,$68,$68
	DB	$98,$78,$70,$48
	DB	$A0,$70,$C0,$80
	DB	$10,$70,$70,$30
;
LNGAUG:	DB	$80,$FF,$90,$A0
	DB	$B0,$C0,$D0,$E0
	DB	$70,$60,$50,$40
	DB	$30,$20,$10,$08
;
LNGURY:	DB	$58,$40,$FF,$30
	DB	$48,$68,$6C,$70
	DB	$78,$7C,$84,$88
	DB	$08,$8C,$98,$B0
;
LNGLOT:	DB	$50,$40,$70,$FF
	DB	$A0,$60,$30,$80
	DB	$90,$88,$98,$A8
	DB	$78,$68,$10,$20
;
LNGIDR:	DB	$B8,$D0,$70,$70
	DB	$FF,$60,$64,$70
	DB	$70,$AC,$78,$68
	DB	$70,$70,$70,$70
;
LNGCOL:	DB	$68,$70,$70,$30
	DB	$A0,$FF,$60,$72
	DB	$88,$6C,$74,$80
	DB	$08,$B0,$A0,$90
;
LNGBAL:	DB	$70,$72,$30,$58
	DB	$48,$83,$FF,$60
	DB	$70,$30,$60,$C0
	DB	$08,$B0,$20,$10
;
LNGGAR:	DB	$68,$70,$A0,$30
	DB	$80,$78,$50,$FF
	DB	$60,$58,$64,$74
	DB	$08,$58,$48,$40
;
LNGSAT:	DB	$80,$64,$C2,$B1
	DB	$83,$20,$30,$76
	DB	$FF,$40,$54,$50
	DB	$08,$32,$48,$E0
;
LNGPEN:	DB	$60,$23,$D8,$31
	DB	$64,$48,$58,$44
	DB	$64,$FF,$9C,$78
	DB	$08,$70,$70,$70
;
LNGPEL:	DB	$C0,$C3,$68,$95
	DB	$91,$53,$31,$50
	DB	$58,$70,$FF,$81
	DB	$08,$23,$A8,$73
;
LNGCHE:	DB	$80,$88,$54,$B2
	DB	$47,$D0,$A7,$C0
	DB	$60,$64,$81,$FF
	DB	$80,$70,$80,$50
;
LNGHEN:	DB	$10,$70,$70,$A0
	DB	$70,$70,$50,$70
	DB	$70,$60,$28,$A0
	DB	$FF,$58,$18,$08
;
LNGHOR:	DB	$70,$70,$D0,$70
	DB	$40,$60,$70,$A0
	DB	$70,$58,$70,$70
	DB	$50,$FF,$A0,$20
;
LNGROY:	DB	$68,$70,$70,$40
	DB	$70,$40,$A0,$70
	DB	$70,$98,$68,$80
	DB	$60,$70,$FF,$D0
;
LNGHOE:	DB	$80,$B0,$40,$78
	DB	$88,$A0,$6C,$58
	DB	$30,$AC,$70,$50
	DB	$08,$70,$C0,$FF
;
;
;
WAYT:
	LDY	#255
WAYT0:
	ROR	WAYTZZ
	ROL	WAYTZZ
	DEY
	BNE	WAYT0
	DEX
	BNE	WAYT
	RTS
;
WAYTZZ:	DB	0
;
;
;

;EXCALIBUR TITLE MODULE V16 SEPT 10, 1982
;
; WITH FASTER MUSIC
; FLASHING SWORD
; PROPER NAME WITH FANCY CALIG
; NAME DISSAPEARS USING LARRY'S RNDBIT
; AUTHOR'S NAMES ENFOLD ON SCREEN
; SYMBOLICALLY RELOCATABLE
; FASTER RNDBIT ROUTINE
;  ACTION PROPERLY TIMED WITH MUSIC
; DISK SWAPPING CODE AT END
;
RTCLKL	=	$14
COLRSH	=	$4F
DRKMSK	=	$4E
DOSVEC	=	$000A
;
	ORG	$C0
SNPTR	ORG	*+2
CRPTR	ORG	*+2
DLPTR	ORG	*+2
OLDBEG	ORG	*+1
OLDEND	ORG	*+1
NEWBEG	ORG	*+1
NEWEND	ORG	*+1
TEMP2	ORG	*+1
FOGPTR	ORG	*+2
TAMP1	ORG	*+1
TAMP2	ORG	*+1
;

;
FSPACE	=	$8200
FSTART	=	FSPACE+[40*15]
DLPTCH	=	$8180
DLAREA	=	$A0
PMAREA	=	$1C
NAM1	=	$2A00
NAM1S0	=	NAM1+[40*15]
NAM1S1	=	NAM1S0+20
NAM2	=	$2000
NAM2S0	=	NAM2+[40*15]
NAM2S1	=	NAM2S0+20

DLIVEC	=	$200
DLISTL	=	$230	; NOT USE SHADOW $230
DLISTH	=	$231	; NOT USE SHADOW $231
SDMCTL	=	$22F	; NOT USE SHADOW $22F
DMACTL	=	$D400

PRIOR	=	$26F	; NOT USE SHADOW $26F
PCOLR0	=	$2C0
PCOLR1	=	$2C1
PCOLR2	=	$2C2
PCOLR3	=	$2C3
COLOR0	=	$2C4
COLOR1	=	$2C5
COLOR2	=	$2C6
COLOR3	=	$2C7
COLOR4	=	$2C8
M	=	[PMAREA*256]+$180
P0	=	M+128
P1	=	P0+128
P2	=	P1+128
P3	=	P2+128
HPOSP0	=	$D000
HPOSP1	=	$D001
HPOSP2	=	$D002
HPOSP3	=	$D003
HPOSM0	=	$D004
HPOSM1	=	$D005
HPOSM2	=	$D006
HPOSM3	=	$D007
GRAFP0	=	$D00D
GRAFP1	=	$D00E
GRAFP2	=	$D00F
GRAFP3	=	$D010
GRAFM	=	$D011
COLPM3	=	$D015
COLPF0	=	$D016
COLPF1	=	$D017
COLPF2	=	$D018
COLPF3	=	$D019
COLBAK	=	$D01A
TRIG0	=	$D010
RANDOM	=	$D20A
PMBASE	=	$D407
WSYNC	=	$D40A
NMIEN	=	$D40E
GRACTL	=	$D01D
SETVBV	=	$E45C
XITVBV	=	$E462
AUDF1	=	$D200
AUDF2	=	$D202
AUDF3	=	$D204
AUDC1	=	$D201
AUDC2	=	$D203
AUDC3	=	$D205
SKCTL	=	$D20F
SSKCTL	=	$0232
CONSOL	=	$D01F
TEMPO	=	3
TMPODV	=	2
;
;
RETRC:	MACRO	PLAYER
	PROC
	LDX	%1BEG
:LOOPB	LDA	%1+1,X
	STA	%1,X
	INX
	CPX	%1END
	BNE	:LOOPB
	LDA	%1BEG
	CMP	#$48
	BCC	:X1
	DEC	%1BEG
:X1	LDX	SWDCNT
	LDA	%1TAB,X
	LDX	%1END
	STA	%1,X
	EPROC
	ENDM
;
	ORG	TITADD
	JMP	BEGIN
MEMORG	ORG	*+1	; MUST BE ON A 00 BOUNDARY
P0BEG	ORG	*+1
P1BEG	ORG	*+1
P2BEG	ORG	*+1
P3BEG	ORG	*+1
MBEG	ORG	*+1
P0END	ORG	*+1
P1END	ORG	*+1
P2END	ORG	*+1
P3END	ORG	*+1
MEND	ORG	*+1
FMCNT2	ORG	*+1
DLICNT	ORG	*+1
DL1PF0	ORG	*+1
DL2PF0	ORG	*+1
DL2BAK	ORG	*+1
SWDCNT	ORG	*+1
MTNCNT	ORG	*+1
LEFT	ORG	*+1
RIGHT	ORG	*+1
COLOR	ORG	*+1
CHRIS	ORG	*+1
CHRIS2	ORG	*+1
SUM	ORG	*+1
SUM2	ORG	*+1
STARTX	ORG	*+1
RMASK	ORG	*+1
YCNT	ORG	*+1
HNDPTR	ORG	*+2
FMCNT3	ORG	*+1
PCLR0S	ORG	*+1
DL1PF1	ORG	*+1
DL1PF2	ORG	*+1
;
JFCNT	ORG	*+1	; MUSIC VARIABLES
JFCNT1	ORG	*+1
NTCNT1	ORG	*+1
NTCNT2	ORG	*+1
NTCNT3	ORG	*+1
TIM1	ORG	*+1
TIM2	ORG	*+1
TIM3	ORG	*+1
AUDC1S	ORG	*+1
AUDC2S	ORG	*+1
;
BEGIN
	JSR	COPYRT
	CLD
	LDA	#PMAREA
	STA	PMBASE
	LDA	#0
	STA	SDMCTL	;turn off ANTIC for starters
	LDA	#3
	STA	GRACTL
	LDA	#$12
	STA	PRIOR
	LDA	#DLAREA
	STA	MEMORG
;
	LDA	#0	; initialize POKEY
	STA	AUDCTL
	LDA	#3
	STA	SKCTL
;
;clear out player RAM
;
	LDA	#0
	TAX
LOOP4	STA	M,X
	INX
	BNE	LOOP4
LOOP5	STA	P1,X
	INX
	BNE	LOOP5
LOOP6	STA	P2,X
	INX
	BNE	LOOP6
;
;initialize colors
;
	LDA	#$8F
	STA	PCOLR0
	STA	PCOLR1
	STA	PCOLR2
	LDA	#$46
	STA	PCOLR3
	STA	COLOR3
	LDA	#$00	;#$88   ; BLACK SCREEN AT START
	STA	COLOR4
	LDA	#$0F
	STA	COLOR0
	LDA	#$0F
	STA	COLOR1
	LDA	#$88
	STA	COLOR2
;
	LDA	#$12
	STA	DL1PF1
	LDA	#$D4
	STA	DL1PF2
;
	LDX	#9		; ZERO OUT MUSIC VAR.S
	LDA	#0
LOOP86:
	STA	JFCNT,X
	DEX
	BPL	LOOP86
;
	LDX	#$10
LOOP33
	LDA	ITAB,X
	STA	MEMORG,X
	DEX
	BPL	LOOP33
;
;write display list
;
	LDA	MEMORG
	STA	SNPTR+1
	CLC
	ADC	#$14	; DON'T HIT CALIG AT 9000
	STA	DLPTR+1
	STA	DLISTH
	LDA	#0
	STA	SNPTR
	STA	DLPTR
	STA	DLISTL
;
	LDY	#0
	LDX	#0
	LDA	#$70
	STA	(DLPTR),Y
	INY
	STA	(DLPTR),Y
	INY
	STA	(DLPTR),Y
	INY
	LDA	#$4B
	STA	(DLPTR),Y
	INY
	LDA	SNPTR
	STA	(DLPTR),Y
	INY
	LDA	SNPTR+1
	STA	(DLPTR),Y
	INY
	LDA	#$B
LOOP14	STA	(DLPTR),Y
	INY
	INX
	CPX	#31
	BNE	LOOP14
	LDA	#$CD
	STA	(DLPTR),Y
	INY
	LDA	#120
	STA	(DLPTR),Y
	INY
	LDA	SNPTR+1
	CLC
	ADC	#2
	STA	(DLPTR),Y
	INY
	INX
	LDA	#$D
LOOP15	STA	(DLPTR),Y
	INY
	INX
	CPX	#62
	BNE	LOOP15
	LDA	#$8D
	STA	(DLPTR),Y
	INY
	INX
	LDA	#$D
LOOP16	STA	(DLPTR),Y
	INY
	INX
	CPX	#99
	BNE	LOOP16
	LDA	#$41
	STA	(DLPTR),Y
	INY
	LDA	DLPTR
	STA	(DLPTR),Y
	INY
	LDA	DLPTR+1
	STA	(DLPTR),Y
;
	JSR	CLEER	; clear screen

;
;initialize mountains
;
	LDA	#0
	STA	MTNCNT
;
LOOP12	LDA	MTNCNT
	LSR	A
	LSR	A
	LSR	A
	CLC
	ADC	#5
	ADC	MEMORG
	STA	SNPTR+1
	LDA	MTNCNT
	AND	#6
	ROR	A
	ROR	A
	ROR	A
	ROR	A
	STA	SNPTR
;
	LDA	#$40
	STA	CHRIS
	STA	CHRIS2
	LDA	#$60
	STA	SUM
	STA	SUM2
;
X26	LDX	RANDOM
	CPX	#$88
	BCS	X26
	STX	OLDBEG
	INX
	STX	NEWBEG
	LDA	RANDOM
	AND	#$F
	CLC
	ADC	#$10
	ADC	OLDBEG
	BCS	X25
	CMP	#$FE
	BCC	X14
X25	LDA	#$FE
X14	STA	OLDEND
	SEC
	SBC	#1
	STA	NEWEND
;
LOOP11	LDA	#1
	STA	COLOR
	LDA	OLDBEG
	STA	LEFT
	LDA	OLDEND
	STA	RIGHT
	JSR	HLINE
	LDA	NEWBEG
	CLC
	ADC	#2
	CMP	NEWEND
	BCS	X15
	LDA	NEWBEG
	STA	LEFT
	LDA	NEWEND
	STA	RIGHT
	LDA	#2
	STA	COLOR
	JSR	HLINE
;
;next level
;
	LDA	SNPTR
	SEC
	SBC	#40
	STA	SNPTR
	BCS	X16
	DEC	SNPTR+1
X16	CLD	; THIS IS A FIX SO LOGIC 
		; ANALYZER SYSTEM WOULD WORK
	LDA	NEWBEG
	STA	OLDBEG
	LDA	NEWEND
	STA	OLDEND
;
	INC	NEWBEG
	LDA	CHRIS
LOOP10	CLC
	ADC	SUM
	STA	SUM
	BCC	X17
	INC	NEWBEG
	LDA	RANDOM
	AND	#$1F
	CLC
	ADC	CHRIS
	BCC	X18
	LDA	#$FF
X18	STA	CHRIS
	JMP	LOOP10
X17	DEC	NEWEND
	LDA	CHRIS2
X19	CLC
	ADC	SUM2
	STA	SUM2
	BCS	X20
	DEC	NEWEND
	LDA	RANDOM
	AND	#$1F
	CLC
	ADC	CHRIS2
	BCC	X21
	LDA	#$FF
X21	STA	CHRIS2
	JMP	X19
;
X20	JMP	LOOP11
;
X15	INC	MTNCNT
	LDA	MTNCNT
	CMP	#20
	BCS	X22
	JMP	LOOP12
;
;draw lake
;
X22	LDA	#0
	STA	COLOR
	LDA	MEMORG
	CLC
	ADC	#8
	STA	SNPTR+1
	LDA	#0
	STA	SNPTR
	LDA	#7
	STA	RMASK
	LDX	#$55
	LDY	#14
	JSR	LOOP18
;
;draw hand
;
	LDA	MEMORG
	CLC
	ADC	#17
	STA	SNPTR+1
	STA	HNDPTR+1
	LDA	#219
	STA	SNPTR
	STA	HNDPTR
	LDX	#0
LOOP37	LDY	#0
LOOP36	LDA	HNDTAB,X
	STA	(SNPTR),Y
	INX
	INY
	CPY	#3
	BNE	LOOP36
	CPX	#33
	BEQ	X37
	LDA	SNPTR
	CLC
	ADC	#40
	STA	SNPTR
	BCC	LOOP37
	INC	SNPTR+1
	BCS	LOOP37
;
;enable VBI
;
X37	LDX	#VBISR/256
	LDY	#VBISR&$FF
	LDA	#7
	JSR	SETVBV
;
	LDA	#DLISRV/256
	STA	DLIVEC+1
	LDA	#DLISRV&255
	STA	DLIVEC
;
X55	LDA	VCOUNT
	CMP	#16
	BCS	X55
;
	LDA	#$88	; MAKE THE SKY BLUE
	STA	COLOR4
;
	LDA	#$C0
	STA	NMIEN
	LDA	#$2E
	STA	SDMCTL
;
	LDA	#20
	STA	LINLEN		; ANTIC MODE D HAS 20
	LDA	#$00		; MAKE THE CHARACTERS APPEAER
	SEC
	SBC	#20*0
	STA	PADPTR		; 0 SCANLINES HIGHER
	LDA	MEMORG
	SBC	#0
	STA	PADPTR+1
	JSR	EXCAL
;
	JSR	EXCERS		; ERASE TITLE BUFFER
	LDA	#FSPACE&$FF
	STA	PADPTR
	LDA	#FSPACE/256
	STA	PADPTR+1
	JSR	EXCAL
;
	LDA	#$7C
	STA	HPOSP0
	LDA	#$7E
	STA	HPOSM1
	LDA	#$7C
	STA	HPOSM2
	LDA	#$7A
	STA	HPOSM3
	LDA	#$7F
	STA	HPOSP3
;
	LDY	#73	; WAS #53
LOOP98
	LDX	#255	; DELAY UNTIL AFTER SWORD RISES
LOOP99
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	DEX
	BNE	LOOP99
	DEY
	BNE	LOOP98
;
	LDA	#1	; BEGIN DISSOLVE ON 'EXCALIBUR'
	STA	BUFF3
LOOP96
	LDA	#4	; INIT COUNTER
	STA	WIDTH
LOOP97
	JSR	DISSLV
	DEC	WIDTH
	BNE	LOOP97
	INC	BUFF3
	LDA	BUFF3
	CMP	#12
	BNE	LOOP96
	JSR	TITERS
;
	JSR	EXCERS
;
	LDA	#DLPTCH/256	; SET ANTIC F ON TOP
	STA	SNPTR+1
	LDA	#DLPTCH&$FF
	STA	SNPTR
	LDY	#0
	LDA	#$4F
	STA	(SNPTR),Y
	INY
	LDA	#FSPACE&$FF
	STA	(SNPTR),Y
	INY
	LDA	#FSPACE/256
	STA	(SNPTR),Y
	INY
;
	LDX	#0		; 60 ANTIC MODE F LINES
	LDA	#$0F
LOOP95:
	STA	(SNPTR),Y
	INY
	INX
	CPX	#61
	BNE	LOOP95
;
	LDA	#01		; THEN JUMP TO DISPLAY LIST
	STA	(SNPTR),Y
	INY
;
	LDA	DLPTR
	CLC
	ADC	#37
	PHP
	STA	(SNPTR),Y
	INY
	LDA	DLPTR+1
	PLP
	ADC	#0
	STA	(SNPTR),Y
;
	LDX	#VBIS1/256	; SWAP IN NEW DISPLAY LIST
	LDY	#VBIS1&$FF
	LDA	#7
	JSR	SETVBV
;
	LDA	#$C0
	STA	NMIEN
	LDA	#$2E
	STA	SDMCTL
;
	JSR	NM1ERS	; WRITE "BY CHRIS C."
	LDA	#40
	STA	LINLEN	; ANTIC MODE F HAS 40
	LDA	#NAM1S0&$FF	; NAME IN NAM1
	STA	PADPTR
	LDA	#NAM1S0/256
	STA	PADPTR+1
	JSR	BCHRIS
	LDA	#NAM1S1&$FF
	STA	PADPTR
	LDA	#NAM1S1/256
	STA	PADPTR+1
	JSR	CRAW
;
	JSR	NM2ERS	; ERASE 2ND BUFFER
	LDA	#NAM2S0&$FF	; CHRIS' NAME IN NAM2
	STA	PADPTR
	LDA	#NAM2S0/256
	STA	PADPTR+1
	JSR	BCHRIS
	LDA	#NAM2S1&$FF
	STA	PADPTR
	LDA	#NAM2S1/256
	STA	PADPTR+1
	JSR	CRAW
;
	LDA	#11		; INSOLVE CHRIS C. ON SCREEN
	STA	BUFF3
LOOP94:
	LDA	#4
	STA	WIDTH
LOOP93:
	JSR	INSLV
	DEC	WIDTH
	BNE	LOOP93
	DEC	BUFF3
	LDA	BUFF3
	BNE	LOOP94
;
	JSR	NM2FST	; CHRIS C. SOLID ON SCREEN
	LDY	#35
	JSR	PLTEAU	; WAIT A BIT
;
;
	JSR	NM2ERS	; ERASE 2ND BUFFER
	LDA	#NAM2S0&$FF	; LARRY'S NAME IN NAM2
	STA	PADPTR
	LDA	#NAM2S0/256
	STA	PADPTR+1
	JSR	LARRY
	LDA	#NAM2S1&$FF
	STA	PADPTR
	LDA	#NAM2S1/256
	STA	PADPTR+1
	JSR	SUMMER
;
	LDA	#11		; ENFOLD LARRY S. ON SCREEN
	STA	BUFF3
LOOP92:
	LDA	#4
	STA	WIDTH
LOOP91:
	JSR	ENFOLD
	DEC	WIDTH
	BNE	LOOP91
	DEC	BUFF3
	LDA	BUFF3
	BNE	LOOP92
;
	JSR	NM2FST	; LARRY SOLID ON SCREEN
	LDY	#62
	JSR	PLTEAU	; WAIT A BIT

	JSR	NM1ERS	; ERASE 1ST BUFFER
	LDA	#NAM1S0&$FF	; LARRY'S NAME IN NAM1
	STA	PADPTR
	LDA	#NAM1S0/256
	STA	PADPTR+1
	JSR	LARRY
	LDA	#NAM1S1&$FF
	STA	PADPTR
	LDA	#NAM1S1/256
	STA	PADPTR+1
	JSR	SUMMER
;
;
;
	JSR	NM2ERS	; ERASE 2ND BUFFER
	LDA	#NAM2S0&$FF	; VAL'S NAME IN NAM2
	STA	PADPTR
	LDA	#NAM2S0/256
	STA	PADPTR+1
	JSR	VALERI
	LDA	#NAM2S1&$FF
	STA	PADPTR
	LDA	#NAM2S1/256
	STA	PADPTR+1
	JSR	MANGUM
;
	LDA	#11		; ENFOLD VAL M. ON SCREEN
	STA	BUFF3
LOOP90:
	LDA	#4
	STA	WIDTH
LOOP89:
	JSR	ENFOLD
	DEC	WIDTH
	BNE	LOOP89
	DEC	BUFF3
	LDA	BUFF3
	BNE	LOOP90
;
	JSR	NM2FST	; VAL M. SOLID ON SCREEN;
;
	LDY	#75
	JSR	PLTEAU
	JMP	SWPLOG	; LOAD IN MAIN CODE AND CAMELOT
;
;
CLEER:		;routine to clear screen
	LDA	MEMORG
	STA	SNPTR+1
	LDA	#0
	STA	SNPTR
	TAX
	TAY
LOOP13	STA	(SNPTR),Y
	INY
	CPY	#$F8
	BNE	X13
	CPX	#4
	BNE	X13
	LDA	#$FF
X13	CPY	#0
	BNE	LOOP13
	INC	SNPTR+1
	INX
X30	CPX	#20
	BNE	LOOP13
	RTS
;
;
PLTEAU:	; WAIT LOOP
LOOP88
	LDX	#255	; DELAY
LOOP87
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	ROL	OFFSET
	ROR	OFFSET
	DEX
	BNE	LOOP87
	DEY
	BNE	LOOP88
	RTS
;
;
; WRITE 'EXCALIBUR'
;
EXCAL:
	LDX	#10
	LDA	#'E'
	JSR	CALIG
	LDA	#'x'
	JSR	CALIG
	LDA	#'c'
	JSR	CALIG
	LDA	#'a'
	JSR	CALIG
	LDA	#'l'
	JSR	CALIG
	LDA	#'i'
	JSR	CALIG
	LDA	#'b'
	JSR	CALIG
	LDA	#'u'
	JSR	CALIG
	LDA	#'r'
	JSR	CALIG
	RTS
;
;
BCHRIS:		; WRITE "BY CHRIS C."
	LDX	#20
	LDA	#'b'
	JSR	CALIG
	LDA	#'y'
	JSR	CALIG
	INX
	INX
	INX
	INX
	INX
	INX
	INX
	INX
	INX
	INX
	INX
	INX
	INX
	INX
	LDA	#'C'
	JSR	CALIG
	LDA	#'h'
	JSR	CALIG
	LDA	#'r'
	JSR	CALIG
	LDA	#'i'
	JSR	CALIG
	LDA	#'s'
	JSR	CALIG
	RTS
;
;
CRAW:
	LDX	#0
	LDA	#'C'
	JSR	CALIG
	LDA	#'r'
	JSR	CALIG
	LDA	#'a'
	JSR	CALIG
	LDA	#'w'
	JSR	CALIG
	LDA	#'f'
	JSR	CALIG
	LDA	#'o'
	JSR	CALIG
	LDA	#'r'
	JSR	CALIG
	LDA	#'d'
	JSR	CALIG
	RTS
;
;
LARRY:
	LDX	#40
	LDA	#'L'
	JSR	CALIG
	LDA	#'a'
	JSR	CALIG
	LDA	#'r'
	JSR	CALIG
	LDA	#'r'
	JSR	CALIG
	LDA	#'y'
	JSR	CALIG
	RTS
;
;
SUMMER:
	LDX	#0
	LDA	#'S'
	JSR	CALIG
	LDA	#'u'
	JSR	CALIG
	LDA	#'m'
	JSR	CALIG
	LDA	#'m'
	JSR	CALIG
	LDA	#'e'
	JSR	CALIG
	LDA	#'r'
	JSR	CALIG
	LDA	#'s'
	JSR	CALIG
	RTS
;
;
VALERI:
	LDX	#40
	LDA	#'V'
	JSR	CALIG
	LDA	#'a'
	JSR	CALIG
	LDA	#'l'
	JSR	CALIG
	LDA	#'e'
	JSR	CALIG
	LDA	#'r'
	JSR	CALIG
	LDA	#'i'
	JSR	CALIG
	LDA	#'e'
	JSR	CALIG
	RTS
;
;
MANGUM:
	LDX	#0
	LDA	#'A'
	JSR	CALIG
	LDA	#'t'
	JSR	CALIG
	LDA	#'k'
	JSR	CALIG
	LDA	#'i'
	JSR	CALIG
	LDA	#'n'
	JSR	CALIG
	LDA	#'s'
	JSR	CALIG
	LDA	#'o'
	JSR	CALIG
	LDA	#'n'
	JSR	CALIG
	RTS
;
;
NM2FST:		; COPIES NAM2S TO FSTART
	LDA	#NAM2S0/256
	STA	CRPTR+1
	LDA	#NAM2S0&$FF
	STA	CRPTR
	LDA	#FSTART/256
	STA	SNPTR+1
	LDA	#FSTART&$FF
	STA	SNPTR
	LDA	#0
	STA	BUFF1
	LDY	#0
NM20:
	LDA	(CRPTR),Y
	STA	(SNPTR),Y
	INY
	BNE	NM20
	INC	SNPTR+1
	INC	CRPTR+1
	INC	BUFF1
	LDA	BUFF1
	CMP	#5
	BNE	NM20
	RTS
;
;

;
;
;
DISSLV:		; DISSOLVES WORDS IN TITLE
	LDA	#FSPACE/256
	STA	CRPTR+1
	LDA	#FSPACE&$FF
	STA	CRPTR
	LDA	MEMORG
	STA	SNPTR+1
	LDA	#0
	STA	SNPTR
	STA	BUFF1
	TAY
DIS0:
	JSR	RNDBIT
	LDA	(CRPTR),Y
	EOR	#$FF
	ORA	BUFF2
	EOR	#$FF
	STA	(SNPTR),Y
	INY
	LDA	(CRPTR),Y	; NEW CODE
	EOR	#$FF	; NEW CODE
	ORA	BUFF2	; NEW CODE
	EOR	#$FF	; NEW CODE
	STA	(SNPTR),Y	; NEW CODE
	INY		; NEW CODE
	BNE	DIS0
	INC	SNPTR+1
	INC	CRPTR+1
	INC	BUFF1
	LDA	BUFF1
	CMP	#3
	BNE	DIS0
	RTS
;
;
;
INSLV:		; INSOLVES NAME IN TITLE
	LDA	#NAM1S0/256
	STA	CRPTR+1
	LDA	#NAM1S0&$FF
	STA	CRPTR
	LDA	#FSTART/256
	STA	SNPTR+1
	LDA	#FSTART&$FF
	STA	SNPTR
	LDA	#0
	STA	BUFF1
	TAY
INSL0:
	JSR	RNDBIT
	LDA	(CRPTR),Y
	EOR	#$FF
	ORA	BUFF2
	EOR	#$FF
	STA	(SNPTR),Y
	INY
	LDA	(CRPTR),Y	; NEW CODE FOR SPEED
	EOR	#$FF
	ORA	BUFF2
	EOR	#$FF
	STA	(SNPTR),Y
	INY	; NEW CODE
	BNE	INSL0
	INC	SNPTR+1
	INC	CRPTR+1
	INC	BUFF1
	LDA	BUFF1
	CMP	#5
	BNE	INSL0
	RTS
;
;
ENFOLD:		; ENFOLDS 2 NAMES IN TITLE
	LDA	#NAM1S0/256
	STA	CRPTR+1
	LDA	#NAM1S0&$FF
	STA	CRPTR
	LDA	#NAM2S0/256
	STA	PADPTR+1
	LDA	#NAM2S0&$FF
	STA	PADPTR
	LDA	#FSTART/256
	STA	SNPTR+1
	LDA	#FSTART&$FF
	STA	SNPTR
	LDA	#0
	STA	BUFF1
	TAY
ENF0:
	LDA	(CRPTR),Y
	ORA	(PADPTR),Y
	BEQ	ENF1
	JSR	RNDBIT
	LDA	(CRPTR),Y
	EOR	(PADPTR),Y
	AND	BUFF2
	EOR	(PADPTR),Y
	STA	(SNPTR),Y
ENF1:
	INY
	LDA	(CRPTR),Y	; NEW CODE FOR SPEED
	ORA	(PADPTR),Y
	BEQ	ENF2
	LDA	(CRPTR),Y
	EOR	(PADPTR),Y
	AND	BUFF2
	EOR	(PADPTR),Y
	STA	(SNPTR),Y
ENF2:
	INY		; NEW CODE FOR SPEED
	BNE	ENF0
	INC	SNPTR+1
	INC	CRPTR+1
	INC	PADPTR+1
	INC	FOGPTR+1
	INC	BUFF1
	LDA	BUFF1
	CMP	#5
	BNE	ENF0
	RTS
;
;
; **********************************
RND07:
	LDA	BIT7,X
	STA	BUFF2
	RTS
;
RND8:
	LDA	RANDOM
	CMP	#128
	BCC	RNDEND
	LDA	BIT7,X
	STA	BUFF2
RNDEND:
	RTS

;
RND9:
	LDA	RANDOM
	CMP	#31
	BCC	RNDEND
	INX
	LDA	BIT7,X
	STA	BUFF2
	RTS
;
RND7:	BEQ	RND07
;
RND10:
	LDA	RANDOM
	CMP	#10
	BCC	RNDEND
	LDA	BIT7,X
	STA	BUFF2
	RTS
;
RND11:
	LDA	RANDOM
	CMP	#0
	BCC	RNDEND
	LDA	BIT7,X
	STA	BUFF2
	RTS
;
;
RNDBIT:		; SUPPLIES A RANDOM COUNTED
	LDA	RANDOM
	AND	#$0F
	TAX
	LDA	#$FF
	STA	BUFF4
	STA	BUFF2
	LDA	BUFF3		; SET OF BITS
	CMP	#7		; BUFF3 SPECS HOW MANY
	BEQ	RND7		; BUFF2 WILL CONTAIN RESULTS
	CMP	#8

	BEQ	RND8
	CMP	#9
	BEQ	RND9
	CMP	#10
	BEQ	RND10
	CMP	#11
	BEQ	RND11
	CMP	#6
	BEQ	RND6
	CMP	#5
	BEQ	RND5
	CMP	#4
	BEQ	RND4
	CMP	#3
	BEQ	RND3
	CMP	#2
	BEQ	RND2
;
RND1:
	LDA	BIT1,X
	STA	BUFF2
	RTS
;
RND5:
	LDA	BIT5,X
	STA	BUFF2
	RTS
;
RND6:
	LDA	BIT6,X
	STA	BUFF2
	RTS
;
RND2:
	LDA	BIT2,X
	STA	BUFF2
	RTS
;
RND3:
	LDA	BIT3,X
	STA	BUFF2
	RTS
;
RND4:
	LDA	BIT4,X
	STA	BUFF2
	RTS
;
;
;
BIT1:
	DB	128
	DB	32
	DB	8
	DB	2
	DB	64
	DB	16
	DB	4
	DB	1
	DB	4
	DB	0
	DB	64
	DB	0
;
BIT2:
	DB	65
	DB	144
	DB	32
	DB	16
	DB	8
	DB	4
	DB	9
	DB	34
	DB	132
	DB	72
	DB	18
	DB	36
;
BIT3:
	DB	18
	DB	42
	DB	74
	DB	146
	DB	69
	DB	72
	DB	73
	DB	65
	DB	133
	DB	52
	DB	176
	DB	36
;
BIT4:
	DB	201
	DB	43
	DB	165
	DB	90
	DB	150
	DB	54
	DB	77
	DB	184
	DB	73
	DB	42
	DB	133
	DB	146
	DB	203
	DB	171
	DB	208
	DB	151
;
BIT7:
	DB	255-128
	DB	255-32
	DB	255-8
	DB	255-2
	DB	255-64
	DB	255-16
	DB	255-4
	DB	255-1
	DB	255-4
	DB	255-0
	DB	255-64
	DB	255-0
;
BIT6:
	DB	255-65
	DB	255-144
	DB	255-32
	DB	255-16
	DB	255-8
	DB	255-4
	DB	255-9
	DB	255-34
	DB	255-132
	DB	255-72
	DB	255-18
	DB	255-36
;
BIT5:
	DB	255-18
	DB	255-42
	DB	255-74
	DB	255-146
	DB	255-69
	DB	255-72
	DB	255-73
	DB	255-65
	DB	255-133
	DB	255-52
	DB	255-176
	DB	255-36
	DB	201
	DB	43
	DB	165
	DB	90
;
; ********************************
;
;
NM1ERS:	; ERASES NAME1 AREA
	LDA	#NAM1/256
	STA	SNPTR+1
	LDA	#NAM1&$FF
	STA	SNPTR
	JMP	EXC1
;
;
NM2ERS:	; ERASES NAME2 AREA
	LDA	#NAM2/256
	STA	SNPTR+1
	LDA	#NAM2&$FF
	STA	SNPTR
	JMP	EXC1
;
;
EXCERS:	; ERASES TITLE BUFFER AREA
	LDA	#FSPACE/256
	STA	SNPTR+1
	LDA	#FSPACE&$FF
	STA	SNPTR
EXC1:
	LDA	#0
	STA	BUFF1
	TAY
EXC2:
	LDA	#0
EXC0:
	STA	(SNPTR),Y
	INY
	BNE	EXC0
	INC	SNPTR+1
	INC	BUFF1
	LDA	BUFF1
	CMP	#9
	BNE	EXC2
	LDA	#0
EXC3:
	STA	(SNPTR),Y
	INY
	CPY	#176
	BNE	EXC3
	RTS
;
;
TITERS:		; ERASES WORDS IN TITLE
	LDA	MEMORG
	STA	SNPTR+1
	LDA	#0
	STA	SNPTR
TIT1:
	STA	BUFF1
	TAY
TIT2:
	LDA	#0
TIT0:
	STA	(SNPTR),Y
	INY
	BNE	TIT0
	INC	SNPTR+1
	INC	BUFF1
	LDA	BUFF1
	CMP	#3
	BNE	TIT2
	RTS
;
;
;subroutine to draw from a template
;
LOOP18	STY	YCNT
	STX	STARTX
	LDA	RANDOM
	AND	RMASK
	CLC
	ADC	TMPLTL,Y
	ADC	STARTX
	STA	LEFT
	LDA	RANDOM
	AND	RMASK
	CLC
	ADC	TMPLTR,Y
	ADC	STARTX
	BCS	X28
	CMP	#$FF	;special case test
	BNE	X24
X28	LDA	#$FE
X24	STA	RIGHT
	JSR	HLINE
	LDA	SNPTR
	CLC
	ADC	#40
	STA	SNPTR
	BCC	X31
	INC	SNPTR+1
X31	LDY	YCNT
	INY
	LDX	STARTX
	LDA	TMPLTR,Y
	BNE	LOOP18
	RTS
;
;subroutines to draw lines
;
PLOT	PHA
	LSR	A
	LSR	A
	TAY
	PLA
	AND	#3
	ASL	A
	ADC	#3
	TAX
	STA	TAMP1
	LDA	(SNPTR),Y
LOOP9	ROL	A
	DEX
	BNE	LOOP9
	STA	TAMP2
	LDA	COLOR
	EOR	TAMP2
	AND	#3
	EOR	TAMP2
	LDX	TAMP1
LOOP8	ROR	A
	DEX
	BNE	LOOP8
	STA	(SNPTR),Y
	RTS
;
HLINE	LDA	LEFT
	JSR	PLOT
	INC	LEFT
	LDA	RIGHT
	CMP	LEFT
	BCS	HLINE
	RTS
;
;DLI service routine
;
DLISRV	PHA
	INC	DLICNT
	LDA	DLICNT
	LSR	A
	BCC	DLI2
	LDA	DL1PF0
	EOR	COLRSH
	AND	DRKMSK
	STA	COLPF0
	LDA	DL1PF2
	EOR	COLRSH
	AND	DRKMSK
	STA	COLPF2
	LDA	DL1PF1
	EOR	COLRSH
	AND	DRKMSK
	STA	COLPF1
	PLA
	RTI
DLI2	LDA	DL2PF0
	EOR	COLRSH
	AND	DRKMSK
	STA	WSYNC
	STA	COLPF0
	LDA	DL2BAK
	EOR	COLRSH
	AND	DRKMSK
	STA	COLBAK
	PLA
	RTI
;
;stage two processing retracts sword
;
VBIS1:
	LDY	#3
	LDA	#01
	STA	(DLPTR),Y
	INY
	LDA	#DLPTCH&$FF
	STA	(DLPTR),Y
	INY
	LDA	#DLPTCH/256
	STA	(DLPTR),Y
;
VBISR:
	LDA	CONSOL	; TEST FOR PREMATURE
	CMP	#7	; END TO TITLE SCENE
	BEQ	VBISR1
	CMP	#5
	BEQ	VBISR1
;
	STA	TAMP1	; TURN OFF VBI
	LDX	#XITVBV/256
	LDY	#XITVBV&255
	LDA	#7
	JSR	SETVBV
;
	PLA		; UNDO VBI RETURN
	PLA		; CLEAN UP STACK
	PLA
	PLA
	PLA
	PLA
	LDA	TAMP1
;
	CMP	#3
	BEQ	VBISR0
	JMP	SWPLOG	; FORCE BEGIN @ START KEY
VBISR0:	JMP	SWPLOD	; LOAD STATE @ OPTION KEY
;
;
VBISR1:
	LDA	JFCNT	; FLASH THE SWORD EVERY 4
	AND	#3
	CMP	#0
	BNE	LL09
	LDA	PCLR0S
	BPL	LL01

	LDA	#$0F
	STA	PCOLR0
	STA	PCLR0S
	JMP	LL09

LL01
	LDA	#$8F
	STA	PCOLR0
	STA	PCLR0S

LL09
	INC	JFCNT
	BNE	L0
	INC	JFCNT+1
;
L0:
	;	LDA	JFCNT	; COMMENTED OUT BECAUSE
	;	CMP	#00	; PHRASE IS ONLY HEARD 1CE
	;	BNE	L1
	;	LDA	JFCNT+1
	;	CMP	#4
	;	BNE	L1
;
	;	LDA	#0
	;	STA	JFCNT
	;	STA	JFCNT+1
	;	STA	NTCNT1
	;	STA	NTCNT2
	;	STA	NTCNT3
	;	STA	TIM1
	;	STA	TIM2
	;	STA	TIM3
	;	JMP	XITVBV
;
L1:			; VOICE 1
	INC	TIM1
	LDX	NTCNT1
;
	LDA	T1,X	; DECAY ON VOICE 1
	SEC
	SBC	C1,X
	CMP	TIM1
	BCS	L1A
	LDA	AUDC1S
	CMP	#$E1
	BEQ	L1A
	LDA	AUDC1S
	SEC
	SBC	#1
	STA	AUDC1
	STA	AUDC1S
;
L1A:
	LDA	T1,X
	CMP	TIM1
	BNE	L1C
	LDA	#1
	STA	TIM1
	INC	NTCNT1
	INX
	LDA	#$E1
	STA	AUDC1
	STA	AUDC1S
	LDA	F1,X
	STA	AUDF1
	JMP	L2
;
L1C:			; ATTACK ON VOICE 1
	LDA	#$11
	CMP	TIM1
	BCC	L2
	LDA	C1,X
	ORA	#$E0
	CMP	AUDC1S
	BEQ	L2
;
	LDA	AUDC1S
	CLC
	ADC	#1
	STA	AUDC1
	STA	AUDC1S
;
L2:			; VOICE 2
	INC	TIM2
	LDX	NTCNT2
;
	LDA	T2,X	; DECAY ON VOICE 2
	SEC
	SBC	C2,X
	CMP	TIM2
	BCS	L2A
	LDA	AUDC2S
	CMP	$E1
	BEQ	L2A
	LDA	AUDC2S
	SEC
	SBC	#1
	STA	AUDC2
	STA	AUDC2S
;
L2A:
	LDA	T2,X
	CMP	TIM2
	BNE	L2C
	LDA	#1
	STA	TIM2
	INC	NTCNT2
	INX
	LDA	#$E1
	STA	AUDC2
	STA	AUDC2S
	LDA	F2,X
	STA	AUDF2
	JMP	L3
;
L2C:			; ATTACK ON VOICE 2
	LDA	#$11
	CMP	TIM2
	BCC	L3
	LDA	C2,X
	ORA	#$E0
	CMP	AUDC2S
	BEQ	L3
;
	LDA	AUDC2S
	CLC
	ADC	#1
	STA	AUDC2
	STA	AUDC2S
;
L3:
	INC	TIM3
	LDX	NTCNT3
	LDA	T3,X
	CMP	TIM3
	BNE	L4
	LDA	#1
	STA	TIM3
	INC	NTCNT3
	INX
	LDA	F3,X
	BNE	L3C
	LDA	#$E1
	STA	AUDC3
L3C:
	LDA	#$E3
	STA	AUDC3
L3D:
	LDA	F3,X
	STA	AUDF3
;
L4:			; END MUSIC PROCESS, DO SWORD
			; DELAY TO SYNC WITH MUSIC
	;	LDA	JFCNT+1
	;	CMP	#2
	;	BCS	L9
	;	LDA	JFCNT+1
	;	CMP #1
	;	BCC	X35
	;	LDA	JFCNT
	;	CMP	#50
	;	BCC	X35
;
L9:
	INC	FMCNT2
	LDA	FMCNT2
	CMP	#$40	;#$60
	BCS	X34
X35	JMP	XITVBV
X34	CMP	#$92	;#$FF
	BNE	X36
	DEC	FMCNT2
	BNE	X35
X36
	AND	#1	;#3
	BNE	X35
	INC	SWDCNT
	RETRC	P0
	RETRC	P3
	RETRC	M
	LDA	HNDPTR
	STA	SNPTR
	SEC
	SBC	#40
	STA	TAMP1
	LDA	HNDPTR+1
	STA	SNPTR+1
	SBC	#0
	STA	TAMP2
	LDX	#11
X33	LDY	#0
X29	LDA	(SNPTR),Y
	STA	(TAMP1),Y
	INY
	CPY	#3
	BNE	X29
	LDA	SNPTR+1
	STA	TAMP2
	LDA	SNPTR
	STA	TAMP1
	CLC
	ADC	#40
	STA	SNPTR
	BCC	X32
	INC	SNPTR+1
X32	DEX
	BNE	X33
	LDA	HNDPTR
	SEC
	SBC	#40
	STA	HNDPTR
	LDA	HNDPTR+1
	SBC	#0
	STA	HNDPTR+1
	JMP	XITVBV
;
HNDTAB	DB	0,0,0
	DB	0,$15,0
	DB	5,$45,$40
	DB	0,5,$40
	DB	5,$45,$50
	DB	0,5,$50
	DB	5,$45,$50
	DB	0,5,$50
	DB	0,5,$54
	DB	0,5,$54
	DB	0,0,0
ITAB	DB	DLAREA
	DB	$6E,$6E,$6E,$6E,$6E
	DB	$6F,$6F,$6F,$6F,$6F
	DB	0,0,0,$4E,$94,$FF
P0TAB	DB	8,$1C,$3E,$7F
	DB	127,127,127,127
	DB	127,127,127,127
	DB	127,127,127,127
	DB	127,127,127,127
	DB	127,127,127,127
	DB	127,127,127,127
	DB	127,127,127,127,0
	DB	0,0,0,0
	DB	0,0,0,0
P3TAB	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	255,255,224,224
	DB	224,224,224,224
	DB	0
MTAB	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	0,0,0,0
	DB	248,248,0,0
	DB	0,0,0,0,0
BASET	DB	$10,$58,$88,$C8
TMPLTL	DB	19,17,15,13,11
	DB	10,9,8,7,6
	DB	7,8,10,0
	DB	72,67,58,57,45
	DB	46,39,36,31,29
	DB	28,25,22,21,22
	DB	23,21,16,12,10
	DB	9,10,12,12,11
	DB	8,6,5,4,3
	DB	3,2,1,0,0
	DB	0,0,0,0,0
	DB	0,0,0,0,0
	DB	0,0,0,0,0
TMPLTR	DB	31,33,35,37,39
	DB	40,41,42,43,44
	DB	43,42,40,0
	DB	98,103,112,113,125
	DB	124,131,134,139,141
	DB	142,145,148,149,148
	DB	147,149,154,158,160
	DB	161,160,158,158,159
	DB	162,164,165,166,167
	DB	167,168,169,170,170
	DB	170,170,170,170,170
	DB	170,170,170,170,170
	DB	170,170,170,0
;
F1:			; MUSIC TABLES
	DB	0
	DB	121	; C4
	DB	162	; G3
	DB	162	; G3
	DB	121	; C4
	DB	108	; D4
	DB	102	; Eb4
	DB	108	; D4
	DB	81	; G4
	DB	81	; G4
	DB	85	; Bb4
	DB	81	; G4
	DB	68	; Bb4
	DB	60	; C5
	DB	68	; Bb4
	DB	76	; Ab4
	DB	0
	DB	0
;

T1:
	DB	1
	DB	[48*TEMPO]+[48/4]*TMPODV
	DB	[12*TEMPO]+[12/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[12*TEMPO]+[12/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[24*TEMPO]+[24/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	[12*TEMPO]+[12/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[48*TEMPO]+[48/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	[32*TEMPO]+[32/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	255
	DB	255
;
C1:
	DB	$01
	DB	$05
	DB	$07
	DB	$07
	DB	$07
	DB	$07
	DB	$07
	DB	$07
	DB	$09
	DB	$0B
	DB	$0B
	DB	$0B
	DB	$0D
	DB	$0D
	DB	$0D
	DB	$0D
	DB	$01
	DB	$01
;
F2:
	DB	0
	DB	162	; G3
	DB	217	; D3
	DB	217	; D3
	DB	162	; G3
	DB	162	; G3
	DB	121	; C4
	DB	162	; G3
	DB	102	; Eb4
	DB	102	; Eb4
	DB	108	; D4
	DB	102	; Eb4
	DB	96	; En4
	DB	81	; G4
	DB	96	; En4
	DB	96	; En4
	DB	96	; En4
	DB	91	; F4
	DB	0
	DB	0
;
T2:
	DB	1
	DB	[48*TEMPO]+[48/4]*TMPODV
	DB	[12*TEMPO]+[12/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[12*TEMPO]+[12/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[24*TEMPO]+[24/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	[12*TEMPO]+[12/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[24*TEMPO]+[24/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	[32*TEMPO]+[32/4]*TMPODV
	DB	[16*TEMPO]+[16/4]*TMPODV
	DB	255
	DB	255
;
C2:
	DB	$01
	DB	$05
	DB	$07
	DB	$07
	DB	$07
	DB	$07
	DB	$07
	DB	$07
	DB	$09
	DB	$0B
	DB	$0B
	DB	$0B
	DB	$0D
	DB	$0D
	DB	$0D
	DB	$0D
	DB	$0D
	DB	$0D
	DB	$01
	DB	$01
;
F3:
	DB	0
	DB	243	; C3   DRUM BEAT
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	243
	DB	243
	DB	0
	DB	0
	DB	0
;
T3:
	DB	1
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[20*TEMPO]+[20/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[24*TEMPO]+[24/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[20*TEMPO]+[20/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[24*TEMPO]+[24/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[40*TEMPO]+[40/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[20*TEMPO]+[20/4]*TMPODV
	DB	[4*TEMPO]+[4/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	[8*TEMPO]+[8/4]*TMPODV
	DB	255
	DB	255
;
;


; EXCALIBUR MONIKER V20  JUNE 14,1983
;
; THIS IS INCLUDED INTO THE TITLE SCENE
; IT IS THE RESIDENT DISK HANDLING CODE
; FOR EXCALIBUR
;
; JUMP VECTORS FOR SWAPPING CODE ARE
;
; $0480 - TITLE SCENE TO CAMELOT
;         LOADS IN LOGIC MODULE ALSO
;
; $0483 - CAMELOT ENTRY POINT
; $0486 - BRITAIN ENTRY POINT
;       - LOADS IN MAP OF BRITAIN ALSO
; $0489 - BATTLE FIELD ENTRY POINT
; $048C - ENDING SCENE ENTRY POINT
; $048F - LOAD PREV GAME STATE ENTRY
; $0492 - SAVE CURRENT GAME STATE
; $0495 - VASSAL CASTLE ENTRY POINT
; $0498 - WINNING SCENE ENTRY POINT
;
; EACH OF THESE VECTORS WILL LOAD IN
; A DIFFERENT SET OF VBI ROUTINES
;


VBOLD	=	$E45F
;
;
	ORG	SWPLOG	;UTILIZES OS PRINTER VARIABLES
			; AND FLOATING POINT VARIABLES

	JMP	LDLOG
	JMP	LDCAM
	JMP	LDBRT
	JMP	LDBAT
	JMP	LDEND
	JMP	LDLOD
	JMP	LDZED
	JMP	LDVAS
	JMP	LDWIN
	JMP	LDRES
;
;
; ********************************
LOGNAM	DB	'D1:LOGIC.OBJ'
CAMNAM	DB	'D1:CAMELOT.OBJ'
BRTNAM	DB	'D1:BRITAIN.OBJ'
BATNAM	DB	'D1:BATTLE.OBJ'
ENDNAM	DB	'D1:ENDING.OBJ'
MAPNAM	DB	'D1:FNTMP4.DAT'
LODNAM	DB	'D1:SAVE.DAT'
ZEDNAM	DB	'D1:SAVE.OBJ'
VASNAM	DB	'D1:VASSAL.OBJ'
WINNAM	DB	'D1:WINNING.OBJ'
;
NAMELO:
	DB	LOGNAM&255
	DB	CAMNAM&255
	DB	BRTNAM&255
	DB	BATNAM&255
	DB	ENDNAM&255
	DB	MAPNAM&255
	DB	LODNAM&255
	DB	ZEDNAM&255
	DB	VASNAM&255
	DB	WINNAM&255
;
NAMEHI:
	DB	LOGNAM/256
	DB	CAMNAM/256
	DB	BRTNAM/256
	DB	BATNAM/256
	DB	ENDNAM/256
	DB	MAPNAM/256
	DB	LODNAM/256
	DB	ZEDNAM/256
	DB	VASNAM/256
	DB	WINNAM/256
;
;
LDLOG:
	JSR	COLORS	; NO ONE ELSE CAN CALL THIS
			; BEACUSE IT GETS OVERWRITTEN
	JSR	STPACT
	JSR	LOGINT
	JSR	INTFAN	; INIT MUSIC INTERP
;
	LDX	#0		; TURN OFF DISPLAY AND
	JSR	INFIL
;
;
	LDA	#LOGADD/256	; PUT START ADDRESS
	PHA		; OF LOGIC ONTO STACK
	LDA	#LOGADD&$FF	; COPYING VBI STATE SAVE
	PHA
	LDA	#0	; SAVE STATE OF INIT
	PHA		; LOGIC CODE ON STACK
	PHA		; CAMELOT WILL START LOGIC
	PHA		; MODULE WHEN LOADED
	PHA
;
;
LDCAM:
	LDX	#1
	STX	VBIENV
	JSR	GETFIL
;
	JSR	PREBRT
	JMP	CAMADD
;
;
LDBRT:
	LDX	#5
	STX	VBIENV
	JSR	GETFIL	; LOAD IN MAP
	LDX	#2
	JSR	GETFIL	; LOAD IN BRITAIN CODE
	JMP	BRTADD
;
;
LDBAT:
	LDA	VBIENV
	STA	VBISAV
	LDX	#3
	STX	VBIENV
	JSR	GETFIL
	JMP	BATADD
;
;
LDEND:
	LDX	#4
	JSR	GETFIL
	JMP	ENDADD
;
;
LDLOD:
	JSR	COLORS
	LDX	#6
	JSR	INFIL	; GET VARIABLES
;
	LDX	#0
	JSR	INFIL	; GET LOGIC
;
	LDA	#LOGADD/256	; PUT START ADDRESS
	PHA		; OF LOGIC ONTO STACK
	LDA	#LOGADD&$FF	; COPYING VBI STATE SAVE
	PHA
	LDA	#0	; SAVE STATE OF INIT
	PHA		; LOGIC CODE ON STACK
	PHA		; CAMELOT WILL START LOGIC
	PHA		; MODULE WHEN LOADED
	PHA
;
LDRES:
	LDA	VBIENV
	CMP	#8
	BEQ	LDVAS
	CMP	#5
	BEQ	LDBRT
	CMP	#3
	BEQ	LDBAT
	JMP	LDCAM	; FINISH LOAD IN SEQUENCE
;
;
LDZED:
	LDX	#7
	JSR	GETFIL
	JMP	ZEDADD
;
;
LDVAS:
	LDX	#8
	STX	VBIENV
	JSR	GETFIL
	JMP	VASADD
;
;
LDWIN:
	LDX	#9
	JSR	GETFIL
	JMP	WINADD
;
;
INFIL:		; TURN OFF DISPLAY AND
	LDA	NAMELO,X	; RESTORE NORMAL IM.VBI
	STA	FILE
	LDA	NAMEHI,X
	STA	FILE+1
	JSR	LOODIT	; STORED IN MAIN VIA NAME
	JMP	VNEW
;

GETFIL:		; TURN OFF DISPLAY AND
	LDA	NAMELO,X	; RESTORE NORMAL IM.VBI
	STA	FILE
	LDA	NAMEHI,X
	STA	FILE+1
	JSR	STPACT
	JSR	LOADIT	; STORED IN MAIN VIA NAME
			; FALL INTO VNEW
;
VNEW:
	LDX	#VBIM/256	; SET IMMEDIATE VBLANK
	LDY	#VBIM&$FF	; PART OF PROTECT BLCK
	LDA	#6
	JSR	SETVBV
	RTS
;
;
STPACT:
	LDA	#0
	STA	SDMCTL
	LDA	#200
	JSR	PAUSE
;
	LDA	#0
	STA	NMIEN
	STA	HPOSP0
	STA	HPOSP1
	STA	HPOSP2
	STA	HPOSP3
	STA	HPOSM0
	STA	HPOSM1
	STA	HPOSM2
	STA	HPOSM3
	STA	GRAFP0
	STA	GRAFP1
	STA	GRAFP2
	STA	GRAFP3
	STA	GRAFM
;
	LDA	#XITDLI&$FF
	STA	DLIVEC
	LDA	#XITDLI/256
	STA	DLIVEC+1
;
	LDX	#XITVBV/256
	LDY	#XITVBV&$FF
	LDA	#7
	JSR	SETVBV
	LDA	#0
	STA	NMIEN
;
	LDX	#VBOLD/256	;RESTORE OLD VBLANK
	LDY	#VBOLD&$FF	;TO DO DISK I/O
	LDA	#6
	JSR	SETVBV
	LDA	#0
	STA	NMIEN
;
	RTS
;
;
PAUSE:
	STA	PAUSEC
PAUSE0:
	LDA	#$FF
	STA	PAUSED
PAUSE1:
	DEC	PAUSED
	BNE	PAUSE1
	DEC	PAUSEC
	BNE	PAUSE0
	RTS
PAUSEC:	DB	0
PAUSED:	DB	0

;
;
XITDLI:
	RTI
;
;
PREBRT:
	LDA	#$D0
	STA	XPOSL
	LDA	#$04
	STA	YPOSH
	LDA	#$80
	STA	YPOSL
	LDA	#$00	; PREPARE FOR CAMELOT EXIT
	STA	XPOSH	; INTO BRITAIN
;
	STA	CAMPGN	; ARTHUR IS HOME NOW !
;
	LDA	PILCAR
	CLC
	ADC	BANK
	STA	BANK
	LDA	PILCAR+16
	ADC	BANK+16
	STA	BANK+16
;
	LDA	#0
	STA	PILCAR
	STA	PILCAR+16
	STA	FLDARM
	STA	FLDKNT
;
	RTS
;
;

; EQUATE.DAT    FEB 8, 1983
;
; CONTAINS SHARED EQUATES USED IN EXCALIBUR
;
ZZZZZZ	=	*
	ORG	$E0
PRODLO	ORG	*+1
PRODHI	ORG	*+1
DIVISR	ORG	*+1
MULTPR:
QUOTNT	ORG	*+1
ACCLO	ORG	*+1
ACCHI	ORG	*+1
SQRTA	ORG	*+1
TEMPX	ORG	*+1
TEMPY	ORG	*+1
NBITS	ORG	*+1
TEMP1	ORG	*+1
SUMLO	ORG	*+1
SUMHI	ORG	*+1
	ORG	ZZZZZZ
;
SWPLOG	=	$0400	; SWAP VECTORS FOR VBI
SWPCAM	=	SWPLOG+$0003	;
SWPBRT	=	SWPLOG+$0006	;
SWPBAT	=	SWPLOG+$0009	;
SWPEND	=	SWPLOG+$000C	;
SWPLOD	=	SWPLOG+$000F	;
SWPZED	=	SWPLOG+$0012	;
SWPVAS	=	SWPLOG+$0015	;
SWPWIN	=	SWPLOG+$0018
SWPRES	=	SWPLOG+$001B
;
TITADD	=	$6300	;
CAMADD	=	$5D01	; STARTING ADDRESSES
BRTADD	=	$6300	;
BATADD	=	$6300	;
ENDADD	=	$3600	;
LOGADD	=	$2000	;
PAUSDL	=	LOGADD+3
LOADIT	=	LOGADD+6
ZEDADD	=	$6300	;
VASADD	=	$6300	;
WINADD	=	$6300	;
;
CALIG	=	$9000	; SHARED SUBROUTINES &
LINLEN	=	$8FFF	; THEIR INTERFACES
PADPTR	=	$00FE	;
;
BRTEXT	=	$B600	; SHARED EQUATES
BIGMAP	=	$A000	; AND VARIABLES
NORTH 	=	$B000
MIDDL 	=	$B200
SOUTH 	=	$B400
STREAM	=	$CE	; MUSIC
FLRATE	=	10	; EMERG. FLASH RATE
;
BOTDAT	=	$5D00
CRPTYP	=	BOTDAT-256
KNGSTS	=	CRPTYP-256
OUTCRP	=	KNGSTS-16
ACTCRP	=	OUTCRP-16
DEMAND	=	ACTCRP-16
DEMREC	=	DEMAND-16
CAMPGN	=	DEMREC-16
TIME  	=	CAMPGN-2
YPOSH 	=	TIME  -1
YPOSL 	=	YPOSH -1
XPOSH 	=	YPOSL -1
XPOSL 	=	XPOSH -1
CASTLE	=	XPOSL -1
DANGER	=	CASTLE-16	;
DLSAVE	=	DANGER-$49
CHRSET	=	DLSAVE-1
ARMDIS	=	CHRSET-32
TITBGT	=	ARMDIS-16
TITGAV	=	TITBGT-16
MONGER	=	TITGAV-16
SAVRAT	=	MONGER-16
AGRSSR	=	SAVRAT-16
OPPONT	=	AGRSSR-01
KGKNTS	=	OPPONT-16
TOTHON	=	KGKNTS-01
RELHON	=	TOTHON-16
KNTARM	=	RELHON-16
BURNT 	=	KNTARM-16
ACCUM 	=	BURNT -16	; MAIN LINE VARIABLES
TRBTOR	=	ACCUM -$10	; GROW BACKWARDS BECAUSE
TAX   	=	TRBTOR-$10	; TO BE FLUSH WITH VBI
TRIBUT	=	TAX   -$10	; VARIABLES 
MAINT 	=	TRIBUT-$10	;
BANK  	=	MAINT -$20	;
LIEGE 	=	BANK  -$10
WEEKHI	=	LIEGE -$01
WEEKLO	=	WEEKHI-$01
KILLHI	=	WEEKLO-$01
KILLLO	=	KILLHI-$01
EXCESS	=	KILLLO-$10
ARMBGT	=	EXCESS-$10
ARMSIZ	=	ARMBGT-$20
ARMEXP	=	ARMSIZ-$20
KTABX 	=	ARMEXP-$10
KTABY 	=	KTABX -$10
KNTIN	=	KTABY -$10
KNTCOL	=	KNTIN-$10
ARRIVE	=	KNTCOL-$01
QUEUE 	=	ARRIVE-256
HEAD  	=	QUEUE -$01
BUTT  	=	HEAD  -$01
LOCK  	=	BUTT  -$01
;
MI_STATE = LOCK    -$01
N_V      = MI_STATE- $04
N_ENV    = N_V     - $04
N_MODE   = N_ENV   - $01
N_D_L    = N_MODE  - $04
N_D_H    = N_D_L   - $04
ACTIVE   = N_D_H   - $04
DISTORT  = ACTIVE  - $04
VOLUME   = DISTORT - $04
TARGET   = VOLUME  - $04
STAGE    = TARGET  - $04
DECAY    = STAGE   - $04
TIME_L   = DECAY   - $04
TIME_H   = TIME_L  - $04
LEVEL    = TIME_H  - $04
ENV      = LEVEL   - $04
TEMP     = ENV     - $02
CMD      = TEMP    - $01
;
DATASIZE: = 60

;
TAXREC   = CMD     - $10
KNTHON   = TAXREC  - $10
KNTKNT   = KNTHON  - 256
SKTABX   = KNTKNT  - $10
SKTABY   = SKTABX  - $10
MAGIC    = SKTABY  - $01
MERFLG   = MAGIC   - $01
MAGCNT   = MERFLG  - $01
SUCESS   = MAGCNT  - $01
VBIENV   = SUCESS  - $01
HITCRP   = VBIENV  - 256
TRBASK   = HITCRP  - 128
TYRANT   = TRBASK  - 16
ADVNCE   = TYRANT  - 16
BRNCNT   = ADVNCE  - 16
TARGIT   = BRNCNT  - 16
RETRET   = TARGIT  - 16
PILAMT   = RETRET  - 01
VBISAV   = PILAMT  - 01
CHGKNG   = VBISAV  - 16
PILCAR   = CHGKNG  - $20
VICTOR   = PILCAR  - 01
LOSER    = VICTOR  - 01
DEDKNG   = LOSER   - 01
FLDARM   = DEDKNG  - 16
FLDKNT   = FLDARM  - 16
HAIRY    = FLDKNT  - 16
PRESTG   = HAIRY   - 16
ATACKR   = PRESTG  - 01
DEFNDR   = ATACKR - 01
VICLOS   = DEFNDR  - 01
LOSLOS   = VICLOS  - 01
WINNER   = LOSLOS  - 01
TURKEY   = WINNER  - 01
SELFLG   = TURKEY  - 01
TRAPFL   = SELFLG  - 01
CRPSTG   = TRAPFL  - 16
HISTRY   = CRPSTG  - 256
HOMARM   = HISTRY  - 16
HOMKNT   = HOMARM  - 16
;
SUPOPP   = HOMKNT  - 16  ; ****
INFOPP   = SUPOPP  - 16  ; ****
INFPOS   = INFOPP  - 16  ; ****
NASTY    = INFPOS  - 16  ; ****
NICEY    = NASTY   - 16  ; ****
AMBITN   = NICEY   - 16  ; ****
COWARD   = AMBITN  - 16  ; ****
WSHWSH   = COWARD  - 16  ; ****
LNGTRM   = WSHWSH  - 256 ; ****
JUSTIC   = LNGTRM  - 256 ; ****
TA       = JUSTIC  - 256 ; ****
TB       = TA      - 256 ; ****
ATKDES   = TB      - 256 ; ****
DEFDES   = ATKDES  - 256 ; ****
ATKBVL   = DEFDES  - 16  ; ****
ATKBID   = ATKBVL  - 16  ; ****
DEFBVL   = ATKBID  - 16  ; ****
DEFBID   = DEFBVL  - 16  ; ****
;
TITPAY   = DEFBID  - 16
HEAD1    = TITPAY  - 01
BUTT1    = HEAD1   - 01
MAILN1   = BUTT1   - 01
MAILN2   = MAILN1  - 01
MAILVB   = MAILN2  - 01
MAILCN   = MAILVB  - 01
GEORGE   = MAILCN  - 16
FILE     = GEORGE  - 02
SFLAG    = FILE    - 01
FLAGLL   = SFLAG   - 01
TARGSV   = FLAGLL  - 16
TRBCNT   = TARGSV  - 16
REVAS    = TRBCNT  - 16
ADLTRY   = REVAS   - 01
BNKRAT   = ADLTRY  - 16
RATBNK   = BNKRAT  - 16
NUMONE   = RATBNK  - 01
PRESHI   = NUMONE  - 01
LANGER   = PRESHI  - 01
;
TOPDAT   = LANGER   - $01
;

;KNTDAT.DAT
;initialization data for KNTKNT
;July 24, 1983
;
KNTDAT	DB	0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0
;Nosnikta
	DB	$60,$0,$50,$60
	DB	$30,$20,$50,$70
	DB	$10,$60,$10,$30
	DB	$40,$60,$20,$30
;Sremmus
	DB	$50,$50,$0,$30
	DB	$30,$60,$40,$40
	DB	$40,$50,$20,$40
	DB	$60,$30,$60,$40
;Drofwarc
	DB	$40,$50,$30,$0
	DB	$40,$30,$30,$20
	DB	$40,$40,$50,$40
	DB	$40,$50,$30,$50
Lancelot
	DB	$20,$30,$40,$60
	DB	$0,$60,$30,$10
	DB	$78,$30,$50,$20
	DB	$50,$20,$60,$10
;Bors
	DB	$60,$20,$50,$30
	DB	$70,$0,$60,$70
	DB	$20,$60,$20,$40
	DB	$20,$50,$30,$60
;Kay
	DB	$10,$40,$30,$50
	DB	$20,$7F,$0,$20
	DB	$70,$30,$60,$30
	DB	$20,$10,$70,$30
;Galahad
	DB	$20,$70,$40,$40
	DB	$10,$60,$30,$0
	DB	$70,$20,$60,$40
	DB	$50,$10,$60,$40
;Mordred
	DB	$70,$10,$50,$30
	DB	$60,$20,$70,$60
	DB	$0,$50,$20,$50
	DB	$30,$60,$10,$40
;Tristran
	DB	$40,$60,$60,$40
	DB	$20,$60,$40,$10
	DB	$40,$0,$60,$30
	DB	$50,$50,$60,$30
;Lamerok
	DB	$50,$10,$10,$50
	DB	$60,$20,$70,$60
	DB	$10,$70,$0,$40
	DB	$60,$10,$40,$60
;Gwynevere
	DB	$10,$40,$30,$30
	DB	$10,$50,$30,$30
	DB	$7F,$20,$50,$0
	DB	$40,$20,$40,$70
;Bedivere
	DB	$30,$50,$50,$50
	DB	$40,$20,$30,$60
	DB	$20,$60,$50,$30
	DB	$0,$70,$50,$30
;Percivale
	DB	$20,$50,$40,$50
	DB	$20,$50,$20,$10
	DB	$70,$40,$10,$20
	DB	$70,$0,$70,$50
;Lucas
	DB	$60,$20,$70,$40
	DB	$7F,$30,$70,$70
	DB	$10,$50,$30,$40
	DB	$60,$60,$0,$70
;Gawain
	DB	$30,$40,$30,$60
	DB	$20,$50,$30,$30
	DB	$40,$40,$70,$60
	DB	$30,$60,$60,$0
;
;
;
KNTRND:
	LDX	#0
KNTR99:
	LDA	KNTDAT,X
	BEQ	KNTR97
	LDA	RANDOM
	AND	#$F
	SEC
	SBC	#8
	ADC	KNTDAT,X
KNTR97:
	STA	KNTKNT,X
KNTR98:
	INX
	BNE	KNTR99
	RTS
;
;
;
	LIST	L,I
	INCLUDE	D3:EQUATE.DAT
;
	LIST	L,I
	INCLUDE	D3:CAM16T.ASM
;
	LIST	L,I
	INCLUDE	D3:COPYRITE.ASM
	INCLUDE	D3:INIT.ASM
	INCLUDE	D3:PERINT.ASM
	INCLUDE	D3:KNTDAT.DAT
	INCLUDE	D3:INTFARE.ASM
	INCLUDE	D4:LOAD.ASM
;
	LIST	L,I
	INCLUDE	D3:CAM11G.SRC
;
	LIST	L,I
	INCLUDE	D3:EXC01M.ASM
	INCLUDE	D3:VBIM.ASM
;
	END	TITADD

	LIST	L,I
	INCLUDE	D3:EQUATE.DAT
;
	LIST	L,I
	INCLUDE	D3:WINNING.ASM
;
	LIST	L,I
	INCLUDE	D3:CAM11G.SRC
;
;

