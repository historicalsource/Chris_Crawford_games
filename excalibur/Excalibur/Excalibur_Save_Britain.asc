UPSTS:
			; INTERPRETS KINGDOM STATUS AS
			; A COLORED CASTLE ON MAP
			; ACC. CONTAINS KINGDOM VALUE
			; ACC. IS PRESERVED
;
	CMP	#$10
	BCC	UPST02
	RTS
;
UPST02:
	PHA
	TAX
	BNE	UPST00
;
	LDA	KNGSTS	; ARTHUR MUST BE
	AND	#$0F	; SUBORDINATE TO HIMSELF
	ORA	#$40
	STA	KNGSTS
	JMP	UPST01
;
UPST00:
	JSR	TYPSTS
	BCS	UPST03
;
UPST01:
	ORA	#$02
	TAY
	TXA
	ASL	A
	TAX
	LDA	CASLST,X
	STA	CRPPTR
	LDA	CASLST+1,X
	STA	CRPPTR+1
	TYA
	LDY	#0
	STA	(CRPPTR),Y
;
UPST03:
	PLA
	RTS
;
;
TYPSTS:
		; FIND THE KIGDOM STATUS AND
		; INTERPRET IT AS COLOR
;
	CPX	#$10
	BCC	TYPS01
	RTS
;
TYPS01:
	LDA	KNGSTS,X
	LDY	#$00	; BLUE  = ENEMY   = 00 = B7

	AND	#$80
	BNE	TYPEND
	LDA	KNGSTS,X
	LDY	#$C0	; RUST  =TRIBUTARY= C0 = B5
	AND	#$20
	BNE	TYPEND
	LDA	KNGSTS,X
	LDY	#$40	; WHITE = SUBORD  = 40 = B4
	AND	#$10
	BNE	TYPEND
	LDA	KNGSTS,X
	LDY	#$80	; GREEN = NUETRAL = 80 = B6
	AND	#$40
	BNE	TYPEND
;
	LDA	KNGSTS,X
	ORA	#$40
	STA	KNGSTS,X
;
	LDA	LIEGE,X
	BNE	TYPS00
	LDA	KNGSTS,X
	AND	#$0F
	ORA	#$10
	STA	KNGSTS,X
	LDY	#$40
	JMP	TYPEND
;
TYPS00:
	LDA	TRBTOR,X
	BNE	TYPEND
	LDA	KNGSTS,X
	AND	#$0F
	ORA	#$20
	STA	KNGSTS,X
	LDY	#$C0
;
TYPEND:
	TYA
	CLC
	RTS
;
;
UPCRP:
			; GETS OUTCRP INDEX = ACTCRP IND
			; CREATES CRPTYPS TO REFLECT IT
			; ACC. CONTAINS KINGDOM VALUE
			; ACC. IS PRESERVED
;
	CMP	#$10
	BCC	UPCRP0
	RTS
;
UPCRP0:
	STA	UPCRPA
	TAX
	ASL	A
	ASL	A
	ASL	A
	ASL	A
	STA	UPCRPX
;
	LDA	#$40
	STA	SKPCNT
;
	LDA	OUTCRP,X
	AND	#$FE
	STA	TIMP1
	LDA	ACTCRP,X
	AND	#$FE
	CMP	TIMP1
	BNE	UPCONT
	LDA	UPCRPA
	RTS
;
UPCONT:
	BCC	UPHIGH
UPLOW:				; MAKE IT HIGHER
	INC	OUTCRP,X
	INC	OUTCRP,X
UPADD:
	DEC	SKPCNT
	BEQ	UPADD2
	LDA	RANDOM
	AND	#$0F
	STA	TIMP1
	LDA	UPCRPX
	CLC
	ADC	TIMP1
	TAX
	LDA	CRPTYP,X
	CMP	#$8B
	BCS	UPADD
	CMP	#$88
	BCC	UPADD
;
UPADD1:
	INC	CRPTYP,X
UPADD2:
	LDA	UPCRPA
	RTS
;
UPHIGH:
	LDA	OUTCRP,X
	CMP	#34
	BCC	UPSUB2
	DEC	OUTCRP,X
	DEC	OUTCRP,X
;
UPSUB:
	DEC	SKPCNT
	BEQ	UPSUB2
	LDA	RANDOM
	AND	#$0F
	STA	TIMP1
	LDA	UPCRPX
	CLC
	ADC	TIMP1
	TAX
	LDA	CRPTYP,X
	CMP	#$89
	BCC	UPSUB
	CMP	#$8C
	BCS	UPSUB
;
UPSUB1:
	DEC	CRPTYP,X
UPSUB2:
	LDA	UPCRPA
	RTS
;
UPCRPA:	DB	0
UPCRPX:	DB	0
SKPCNT:	DB	0
;
;
DISCRP:			; DISPLAY CROPS OF KINGDOM
			; ACC. CONTAINS KINGDOM INDEX
			; ACC. IS PRESERVED
;
	CMP	#$10
	BCC	DISCR1
	RTS
;
DISCR1:
	PHA
	ASL	A
	ASL	A
	ASL	A
	ASL	A
	TAX
	LDY	#0
	LDA	#16
	STA	COUNT
;
DISCR0:
	LDA	CRPLO,X
	STA	CRPPTR
	LDA	CRPHI,X
	STA	CRPPTR+1
	LDA	CRPTYP,X
	STA	(CRPPTR),Y
	INX
	DEC	COUNT
	BNE	DISCR0
	PLA
	RTS
;
;
FNDCRP:			; FIND KINGDOM OF ERASED CROP
			; SAVL,SAVH HAS ADDRESS OF EARESED
			; RETURNS WITH KINGDOM IN ACC.
;
	LDX	#0
FNDKN1:
	LDA	CRPHI,X	;LOWER THAN LO ?
	CMP	SAVH
	BEQ	FNDKN5
	BCS	NXTKNG
	JMP	FNDKN3
;
FNDKN5:
	LDA	CRPLO,X
	CMP	SAVL
	BEQ	GOTKNG
	BCS	NXTKNG
;
FNDKN3:
	INX
	LDA	CRPHI,X	;HIGHER THAN HI ?
	CMP	SAVH
	BEQ	FNDKN4
	BCC	NXTKNG
	JMP	FNDKN6
;
FNDKN4:
	LDA	CRPLO,X
	CMP	SAVL
	BEQ	GOTKNG
	BCC	NXTKNG
;
FNDKN6:
	LDA	#$0E
	STA	COUNT
	INX
;
FNDKN2:
	LDA	CRPHI,X
	CMP	SAVH
	BNE	INCCRP
	LDA	CRPLO,X
	CMP	SAVL
	BEQ	GOTKNG
;
INCCRP:
	INX
	TXA
	CMP	#$00
	BEQ	NOTCRP
	DEC	COUNT
	BNE	FNDKN2
	JMP	FNDKN1
;
NXTKNG:
	TXA
	ORA	#$0F
	TAX
	INX
	BNE	FNDKN1
;
NOTCRP:
	LDA	#128
	RTS
;
GOTKNG:
	STX	COUNT
	TXA
	LSR	A
	LSR	A
	LSR	A
	LSR	A
	RTS
;
;
FNDCAS:
			; finds which castle was hit
			; acc. returns kingdom index
	LDX	#0
CASFN0:
	CPX	#32
	BNE	CASFN4
	LDA	#128
	RTS
;
CASFN4:
	LDA	CASLST,X
	CMP	SAVL
	BEQ	CASFN1
;
CASFN3:
	INX
CASFN2:
	INX
	JMP	CASFN0
;
CASFN1:
	INX
	LDA	CASLST,X
	CMP	SAVH
	BNE	CASFN2
	TXA
	LSR	A
	RTS
;
;

CASLST:
	DW	BIGMAP+$0D69	; ARTHUR     - CAMELOT
	DW	BIGMAP+$0496	; AUGUSEL    - PICTLAND
	DW	BIGMAP+$04BB	; URIAN      - DALRIADA
	DW	BIGMAP+$0586	; LOTH       - GUOTODIN
	DW	BIGMAP+$0730	; CADWALLO   - RHEGED
	DW	BIGMAP+$0800	; BAGDEMAGUS - NORTHUMBRIA
	DW	BIGMAP+$0828	; BALDULF    - ELMET
	DW	BIGMAP+$09A6	; GARWIN     - POWYS
	DW	BIGMAP+$09B3	; COLGRIN    - LINDSEY
	DW	BIGMAP+$0B00	; PENDA      - MERCIA
	DW	BIGMAP+$09D1	; MAELGWYN   - GWYNEDD
	DW	BIGMAP+$0B9D	; CHELDRIC   - ANGLIA
	DW	BIGMAP+$0CB6	; HENGIST    - ESSEX
	DW	BIGMAP+$0DA4	; HORSA      - SUSSEX
	DW	BIGMAP+$0C75	; SATER      - DYFED
	DW	BIGMAP+$0E4D	; HOEL       - DUMNONIA
;
;
CRPHI:
ARTHI:
CAMHI:
	DB	[BIGMAP+$0C4B]/256; LO
	DB	[BIGMAP+$0DFA]/256; HI
	DB	[BIGMAP+$0D98]/256
	DB	[BIGMAP+$0DC8]/256
	DB	[BIGMAP+$0D37]/256
	DB	[BIGMAP+$0CD8]/256
	DB	[BIGMAP+$0D39]/256
	DB	[BIGMAP+$0D0B]/256
	DB	[BIGMAP+$0D6C]/256
	DB	[BIGMAP+$0CDC]/256
	DB	[BIGMAP+$0DCB]/256
	DB	[BIGMAP+$0CDD]/256
	DB	[BIGMAP+$0D9D]/256
	DB	[BIGMAP+$0D3D]/256
	DB	[BIGMAP+$0D6E]/256
	DB	[BIGMAP+$0D3C]/256
;
AUGHI:
PICHI:
	DB	[BIGMAP+$015F]/256; LO
	DB	[BIGMAP+$04F4]/256; HI
	DB	[BIGMAP+$03D8]/256
	DB	[BIGMAP+$0494]/256
	DB	[BIGMAP+$02E5]/256
	DB	[BIGMAP+$0465]/256
	DB	[BIGMAP+$04F3]/256
	DB	[BIGMAP+$02E9]/256
	DB	[BIGMAP+$0429]/256
	DB	[BIGMAP+$04F2]/256
	DB	[BIGMAP+$0165]/256
	DB	[BIGMAP+$04C5]/256
	DB	[BIGMAP+$024E]/256
	DB	[BIGMAP+$04C4]/256
	DB	[BIGMAP+$033C]/256
	DB	[BIGMAP+$0349]/256
;
URIHI:
DALHI:
	DB	[BIGMAP+$042D]/256; LO
	DB	[BIGMAP+$05AF]/256; HI
	DB	[BIGMAP+$048E]/256
	DB	[BIGMAP+$051E]/256
	DB	[BIGMAP+$045D]/256
	DB	[BIGMAP+$057F]/256
	DB	[BIGMAP+$04EB]/256
	DB	[BIGMAP+$051B]/256
	DB	[BIGMAP+$048C]/256
	DB	[BIGMAP+$051A]/256
	DB	[BIGMAP+$04EC]/256
	DB	[BIGMAP+$04BD]/256
	DB	[BIGMAP+$054B]/256
	DB	[BIGMAP+$04BC]/256
	DB	[BIGMAP+$05AE]/256
	DB	[BIGMAP+$04BF]/256
;
LOTHI:
GUOHI:
	DB	[BIGMAP+$0584]/256; LO
	DB	[BIGMAP+$06D7]/256; HI
	DB	[BIGMAP+$05B6]/256
	DB	[BIGMAP+$0676]/256
	DB	[BIGMAP+$05E4]/256
	DB	[BIGMAP+$05B5]/256
	DB	[BIGMAP+$0615]/256
	DB	[BIGMAP+$0589]/256
	DB	[BIGMAP+$05B8]/256
	DB	[BIGMAP+$0647]/256
	DB	[BIGMAP+$05E3]/256
	DB	[BIGMAP+$05B9]/256
	DB	[BIGMAP+$05E7]/256
	DB	[BIGMAP+$0588]/256
	DB	[BIGMAP+$05E8]/256
	DB	[BIGMAP+$05E6]/256
;
CADHI:
RHEHI:
	DB	[BIGMAP+$0610]/256; LO
	DB	[BIGMAP+$072F]/256; HI
	DB	[BIGMAP+$0642]/256
	DB	[BIGMAP+$0700]/256
	DB	[BIGMAP+$06CE]/256
	DB	[BIGMAP+$0671]/256
	DB	[BIGMAP+$072E]/256
	DB	[BIGMAP+$0640]/256
	DB	[BIGMAP+$06FD]/256
	DB	[BIGMAP+$0702]/256
	DB	[BIGMAP+$069F]/256
	DB	[BIGMAP+$0672]/256
	DB	[BIGMAP+$0701]/256
	DB	[BIGMAP+$06D1]/256
	DB	[BIGMAP+$069E]/256
	DB	[BIGMAP+$06A2]/256
;
BAGHI:
NORHI:
	DB	[BIGMAP+$064C]/256; LO
	DB	[BIGMAP+$0860]/256; HI
	DB	[BIGMAP+$06AA]/256
	DB	[BIGMAP+$073C]/256
	DB	[BIGMAP+$06DD]/256
	DB	[BIGMAP+$07CF]/256
	DB	[BIGMAP+$06DB]/256
	DB	[BIGMAP+$0832]/256
	DB	[BIGMAP+$070C]/256
	DB	[BIGMAP+$07CE]/256
	DB	[BIGMAP+$076D]/256
	DB	[BIGMAP+$06DE]/256
	DB	[BIGMAP+$073E]/256
	DB	[BIGMAP+$07D1]/256
	DB	[BIGMAP+$079E]/256
	DB	[BIGMAP+$076F]/256
;
BALHI:
ELMHI:
	DB	[BIGMAP+$07C4]/256; LO
	DB	[BIGMAP+$091B]/256; HI
	DB	[BIGMAP+$07C5]/256
	DB	[BIGMAP+$085A]/256
	DB	[BIGMAP+$0889]/256
	DB	[BIGMAP+$07C6]/256
	DB	[BIGMAP+$08BC]/256
	DB	[BIGMAP+$0858]/256
	DB	[BIGMAP+$08BA]/256
	DB	[BIGMAP+$0857]/256
	DB	[BIGMAP+$08E7]/256
	DB	[BIGMAP+$07F7]/256
	DB	[BIGMAP+$0829]/256
	DB	[BIGMAP+$07F8]/256
	DB	[BIGMAP+$08E9]/256
	DB	[BIGMAP+$0827]/256
;
GARHI:
POWHI:
	DB	[BIGMAP+$0947]/256; LO
	DB	[BIGMAP+$0AFA]/256; HI
	DB	[BIGMAP+$09A7]/256
	DB	[BIGMAP+$0A37]/256
	DB	[BIGMAP+$0A07]/256
	DB	[BIGMAP+$0AF8]/256
	DB	[BIGMAP+$09D8]/256
	DB	[BIGMAP+$0AC9]/256
	DB	[BIGMAP+$0978]/256
	DB	[BIGMAP+$0A99]/256
	DB	[BIGMAP+$09A9]/256
	DB	[BIGMAP+$0A9A]/256
	DB	[BIGMAP+$0976]/256
	DB	[BIGMAP+$0A39]/256
	DB	[BIGMAP+$0A08]/256
	DB	[BIGMAP+$0A68]/256
;
COLHI:
LINHI:
	DB	[BIGMAP+$08C4]/256; LO
	DB	[BIGMAP+$0AA5]/256; HI
	DB	[BIGMAP+$0924]/256
	DB	[BIGMAP+$0A14]/256
	DB	[BIGMAP+$0981]/256
	DB	[BIGMAP+$09E4]/256
	DB	[BIGMAP+$08F3]/256
	DB	[BIGMAP+$0A16]/256
	DB	[BIGMAP+$0A74]/256
	DB	[BIGMAP+$0952]/256
	DB	[BIGMAP+$0AA4]/256
	DB	[BIGMAP+$0984]/256
	DB	[BIGMAP+$0922]/256
	DB	[BIGMAP+$09E2]/256
	DB	[BIGMAP+$0A13]/256
	DB	[BIGMAP+$0A45]/256
;
PENHI:
MERHI:
	DB	[BIGMAP+$097D]/256; LO
	DB	[BIGMAP+$0C1D]/256; HI
	DB	[BIGMAP+$09AE]/256
	DB	[BIGMAP+$0BBD]/256
	DB	[BIGMAP+$0A70]/256
	DB	[BIGMAP+$0B91]/256
	DB	[BIGMAP+$0A0B]/256
	DB	[BIGMAP+$0B5B]/256
	DB	[BIGMAP+$09DF]/256
	DB	[BIGMAP+$0B01]/256
	DB	[BIGMAP+$0A3E]/256
	DB	[BIGMAP+$0AFD]/256
	DB	[BIGMAP+$0B8A]/256
	DB	[BIGMAP+$0AA1]/256
	DB	[BIGMAP+$0B62]/256
	DB	[BIGMAP+$0ACE]/256
;
MAEHI:
GWYHI:
	DB	[BIGMAP+$09D0]/256; LO
	DB	[BIGMAP+$0B26]/256; HI
	DB	[BIGMAP+$09D3]/256
	DB	[BIGMAP+$0A64]/256
	DB	[BIGMAP+$0AF4]/256
	DB	[BIGMAP+$0A35]/256
	DB	[BIGMAP+$0B25]/256
	DB	[BIGMAP+$0A00]/256
	DB	[BIGMAP+$0A34]/256
	DB	[BIGMAP+$0A92]/256
	DB	[BIGMAP+$0A02]/256
	DB	[BIGMAP+$0AF6]/256
	DB	[BIGMAP+$09D4]/256
	DB	[BIGMAP+$0AC4]/256
	DB	[BIGMAP+$0A95]/256
	DB	[BIGMAP+$0AC6]/256
;
CHEHI:
ANGHI:
	DB	[BIGMAP+$0AA9]/256; LO
	DB	[BIGMAP+$0BF9]/256; HI
	DB	[BIGMAP+$0B0C]/256
	DB	[BIGMAP+$0B68]/256
	DB	[BIGMAP+$0AAB]/256
	DB	[BIGMAP+$0B3D]/256
	DB	[BIGMAP+$0ADD]/256
	DB	[BIGMAP+$0BCB]/256
	DB	[BIGMAP+$0ADA]/256
	DB	[BIGMAP+$0B9C]/256
	DB	[BIGMAP+$0B08]/256
	DB	[BIGMAP+$0B6B]/256
	DB	[BIGMAP+$0B05]/256
	DB	[BIGMAP+$0B65]/256
	DB	[BIGMAP+$0B3A]/256
	DB	[BIGMAP+$0BC7]/256
;
HENHI:
ESSHI:
	DB	[BIGMAP+$0BF2]/256; LO
	DB	[BIGMAP+$0CB7]/256; HI
	DB	[BIGMAP+$0C85]/256
	DB	[BIGMAP+$0CB2]/256
	DB	[BIGMAP+$0BF5]/256
	DB	[BIGMAP+$0C23]/256
	DB	[BIGMAP+$0CB4]/256
	DB	[BIGMAP+$0C58]/256
	DB	[BIGMAP+$0CB3]/256
	DB	[BIGMAP+$0C51]/256
	DB	[BIGMAP+$0C83]/256
	DB	[BIGMAP+$0C54]/256
	DB	[BIGMAP+$0C89]/256
	DB	[BIGMAP+$0C52]/256
	DB	[BIGMAP+$0C86]/256
	DB	[BIGMAP+$0C57]/256
;
HORHI:
SUSHI:
	DB	[BIGMAP+$0D10]/256; LO
	DB	[BIGMAP+$0DA7]/256; HI
	DB	[BIGMAP+$0D45]/256
	DB	[BIGMAP+$0D11]/256
	DB	[BIGMAP+$0DA5]/256
	DB	[BIGMAP+$0D78]/256
	DB	[BIGMAP+$0D14]/256
	DB	[BIGMAP+$0D76]/256
	DB	[BIGMAP+$0D1A]/256
	DB	[BIGMAP+$0D47]/256
	DB	[BIGMAP+$0D13]/256
	DB	[BIGMAP+$0D73]/256
	DB	[BIGMAP+$0D18]/256
	DB	[BIGMAP+$0D70]/256
	DB	[BIGMAP+$0DA2]/256
	DB	[BIGMAP+$0D42]/256
;
SATHI:
DYFHI:
	DB	[BIGMAP+$0B82]/256; LO
	DB	[BIGMAP+$0C74]/256; HI
	DB	[BIGMAP+$0BB8]/256
	DB	[BIGMAP+$0C0E]/256
	DB	[BIGMAP+$0BDD]/256
	DB	[BIGMAP+$0C43]/256
	DB	[BIGMAP+$0BE5]/256
	DB	[BIGMAP+$0C12]/256
	DB	[BIGMAP+$0B84]/256
	DB	[BIGMAP+$0BE1]/256
	DB	[BIGMAP+$0BB0]/256
	DB	[BIGMAP+$0C45]/256
	DB	[BIGMAP+$0C72]/256
	DB	[BIGMAP+$0BE3]/256
	DB	[BIGMAP+$0C47]/256
	DB	[BIGMAP+$0C40]/256
;
HOEHI:
DUMHI:
	DB	[BIGMAP+$0D61]/256; LO
	DB	[BIGMAP+$0E51]/256; HI
	DB	[BIGMAP+$0D90]/256
	DB	[BIGMAP+$0DC1]/256
	DB	[BIGMAP+$0D64]/256
	DB	[BIGMAP+$0D92]/256
	DB	[BIGMAP+$0DC3]/256
	DB	[BIGMAP+$0E1F]/256
	DB	[BIGMAP+$0E22]/256
	DB	[BIGMAP+$0DC5]/256
	DB	[BIGMAP+$0DEE]/256
	DB	[BIGMAP+$0DF3]/256
	DB	[BIGMAP+$0E4C]/256
	DB	[BIGMAP+$0DF1]/256
	DB	[BIGMAP+$0E4E]/256
	DB	[BIGMAP+$0DBF]/256
;
;
CRPLO:
ARTLO:
CAMLO:
	DB	[BIGMAP+$0C4B]&$FF; LO
	DB	[BIGMAP+$0DFA]&$FF; HI
	DB	[BIGMAP+$0D98]&$FF
	DB	[BIGMAP+$0DC8]&$FF
	DB	[BIGMAP+$0D37]&$FF
	DB	[BIGMAP+$0CD8]&$FF
	DB	[BIGMAP+$0D39]&$FF
	DB	[BIGMAP+$0D0B]&$FF
	DB	[BIGMAP+$0D6C]&$FF
	DB	[BIGMAP+$0CDC]&$FF
	DB	[BIGMAP+$0DCB]&$FF
	DB	[BIGMAP+$0CDD]&$FF
	DB	[BIGMAP+$0D9D]&$FF
	DB	[BIGMAP+$0D3D]&$FF
	DB	[BIGMAP+$0D6E]&$FF
	DB	[BIGMAP+$0D3C]&$FF
;
AUGLO:
PICLO:
	DB	[BIGMAP+$015F]&$FF; LO
	DB	[BIGMAP+$04F4]&$FF; HI
	DB	[BIGMAP+$03D8]&$FF
	DB	[BIGMAP+$0494]&$FF
	DB	[BIGMAP+$02E5]&$FF
	DB	[BIGMAP+$0465]&$FF
	DB	[BIGMAP+$04F3]&$FF
	DB	[BIGMAP+$02E9]&$FF
	DB	[BIGMAP+$0429]&$FF
	DB	[BIGMAP+$04F2]&$FF
	DB	[BIGMAP+$0165]&$FF
	DB	[BIGMAP+$04C5]&$FF
	DB	[BIGMAP+$024E]&$FF
	DB	[BIGMAP+$04C4]&$FF
	DB	[BIGMAP+$033C]&$FF
	DB	[BIGMAP+$0349]&$FF
;
URILO:
DALLO:
	DB	[BIGMAP+$042D]&$FF; LO
	DB	[BIGMAP+$05AF]&$FF; HI
	DB	[BIGMAP+$048E]&$FF
	DB	[BIGMAP+$051E]&$FF
	DB	[BIGMAP+$045D]&$FF
	DB	[BIGMAP+$057F]&$FF
	DB	[BIGMAP+$04EB]&$FF
	DB	[BIGMAP+$051B]&$FF
	DB	[BIGMAP+$048C]&$FF
	DB	[BIGMAP+$051A]&$FF
	DB	[BIGMAP+$04EC]&$FF
	DB	[BIGMAP+$04BD]&$FF
	DB	[BIGMAP+$054B]&$FF
	DB	[BIGMAP+$04BC]&$FF
	DB	[BIGMAP+$05AE]&$FF
	DB	[BIGMAP+$04BF]&$FF
;
LOTLO:
GUOLO:
	DB	[BIGMAP+$0584]&$FF; LO
	DB	[BIGMAP+$06D7]&$FF; HI
	DB	[BIGMAP+$05B6]&$FF
	DB	[BIGMAP+$0676]&$FF
	DB	[BIGMAP+$05E4]&$FF
	DB	[BIGMAP+$05B5]&$FF
	DB	[BIGMAP+$0615]&$FF
	DB	[BIGMAP+$0589]&$FF
	DB	[BIGMAP+$05B8]&$FF
	DB	[BIGMAP+$0647]&$FF
	DB	[BIGMAP+$05E3]&$FF
	DB	[BIGMAP+$05B9]&$FF
	DB	[BIGMAP+$05E7]&$FF
	DB	[BIGMAP+$0588]&$FF
	DB	[BIGMAP+$05E8]&$FF
	DB	[BIGMAP+$05E6]&$FF
;
CADLO:
RHELO:
	DB	[BIGMAP+$0610]&$FF; LO
	DB	[BIGMAP+$072F]&$FF; HI
	DB	[BIGMAP+$0642]&$FF
	DB	[BIGMAP+$0700]&$FF
	DB	[BIGMAP+$06CE]&$FF
	DB	[BIGMAP+$0671]&$FF
	DB	[BIGMAP+$072E]&$FF
	DB	[BIGMAP+$0640]&$FF
	DB	[BIGMAP+$06FD]&$FF
	DB	[BIGMAP+$0702]&$FF
	DB	[BIGMAP+$069F]&$FF
	DB	[BIGMAP+$0672]&$FF
	DB	[BIGMAP+$0701]&$FF
	DB	[BIGMAP+$06D1]&$FF
	DB	[BIGMAP+$069E]&$FF
	DB	[BIGMAP+$06A2]&$FF
;
BAGLO:
NORLO:
	DB	[BIGMAP+$064C]&$FF; LO
	DB	[BIGMAP+$0860]&$FF; HI
	DB	[BIGMAP+$06AA]&$FF
	DB	[BIGMAP+$073C]&$FF
	DB	[BIGMAP+$06DD]&$FF
	DB	[BIGMAP+$07CF]&$FF
	DB	[BIGMAP+$06DB]&$FF
	DB	[BIGMAP+$0832]&$FF
	DB	[BIGMAP+$070C]&$FF
	DB	[BIGMAP+$07CE]&$FF
	DB	[BIGMAP+$076D]&$FF
	DB	[BIGMAP+$06DE]&$FF
	DB	[BIGMAP+$073E]&$FF
	DB	[BIGMAP+$07D1]&$FF
	DB	[BIGMAP+$079E]&$FF
	DB	[BIGMAP+$076F]&$FF
;
BALLO:
ELMLO:
	DB	[BIGMAP+$07C4]&$FF; LO
	DB	[BIGMAP+$091B]&$FF; HI
	DB	[BIGMAP+$07C5]&$FF
	DB	[BIGMAP+$085A]&$FF
	DB	[BIGMAP+$0889]&$FF
	DB	[BIGMAP+$07C6]&$FF
	DB	[BIGMAP+$08BC]&$FF
	DB	[BIGMAP+$0858]&$FF
	DB	[BIGMAP+$08BA]&$FF
	DB	[BIGMAP+$0857]&$FF
	DB	[BIGMAP+$08E7]&$FF
	DB	[BIGMAP+$07F7]&$FF
	DB	[BIGMAP+$0829]&$FF
	DB	[BIGMAP+$07F8]&$FF
	DB	[BIGMAP+$08E9]&$FF
	DB	[BIGMAP+$0827]&$FF
;
GARLO:
POWLO:
	DB	[BIGMAP+$0947]&$FF; LO
	DB	[BIGMAP+$0AFA]&$FF; HI
	DB	[BIGMAP+$09A7]&$FF
	DB	[BIGMAP+$0A37]&$FF
	DB	[BIGMAP+$0A07]&$FF
	DB	[BIGMAP+$0AF8]&$FF
	DB	[BIGMAP+$09D8]&$FF
	DB	[BIGMAP+$0AC9]&$FF
	DB	[BIGMAP+$0978]&$FF
	DB	[BIGMAP+$0A99]&$FF
	DB	[BIGMAP+$09A9]&$FF
	DB	[BIGMAP+$0A9A]&$FF
	DB	[BIGMAP+$0976]&$FF
	DB	[BIGMAP+$0A39]&$FF
	DB	[BIGMAP+$0A08]&$FF
	DB	[BIGMAP+$0A68]&$FF
;
COLLO:
LINLO:
	DB	[BIGMAP+$08C4]&$FF; LO
	DB	[BIGMAP+$0AA5]&$FF; HI
	DB	[BIGMAP+$0924]&$FF
	DB	[BIGMAP+$0A14]&$FF
	DB	[BIGMAP+$0981]&$FF
	DB	[BIGMAP+$09E4]&$FF
	DB	[BIGMAP+$08F3]&$FF
	DB	[BIGMAP+$0A16]&$FF
	DB	[BIGMAP+$0A74]&$FF
	DB	[BIGMAP+$0952]&$FF
	DB	[BIGMAP+$0AA4]&$FF
	DB	[BIGMAP+$0984]&$FF
	DB	[BIGMAP+$0922]&$FF
	DB	[BIGMAP+$09E2]&$FF
	DB	[BIGMAP+$0A13]&$FF
	DB	[BIGMAP+$0A45]&$FF
;
PENLO:
MERLO:
	DB	[BIGMAP+$097D]&$FF; LO
	DB	[BIGMAP+$0C1D]&$FF; HI
	DB	[BIGMAP+$09AE]&$FF
	DB	[BIGMAP+$0BBD]&$FF
	DB	[BIGMAP+$0A70]&$FF
	DB	[BIGMAP+$0B91]&$FF
	DB	[BIGMAP+$0A0B]&$FF
	DB	[BIGMAP+$0B5B]&$FF
	DB	[BIGMAP+$09DF]&$FF
	DB	[BIGMAP+$0B01]&$FF
	DB	[BIGMAP+$0A3E]&$FF
	DB	[BIGMAP+$0AFD]&$FF
	DB	[BIGMAP+$0B8A]&$FF
	DB	[BIGMAP+$0AA1]&$FF
	DB	[BIGMAP+$0B62]&$FF
	DB	[BIGMAP+$0ACE]&$FF
;
MAELO:
GWYLO:
	DB	[BIGMAP+$09D0]&$FF; LO
	DB	[BIGMAP+$0B26]&$FF; HI
	DB	[BIGMAP+$09D3]&$FF
	DB	[BIGMAP+$0A64]&$FF
	DB	[BIGMAP+$0AF4]&$FF
	DB	[BIGMAP+$0A35]&$FF
	DB	[BIGMAP+$0B25]&$FF
	DB	[BIGMAP+$0A00]&$FF
	DB	[BIGMAP+$0A34]&$FF
	DB	[BIGMAP+$0A92]&$FF
	DB	[BIGMAP+$0A02]&$FF
	DB	[BIGMAP+$0AF6]&$FF
	DB	[BIGMAP+$09D4]&$FF
	DB	[BIGMAP+$0AC4]&$FF
	DB	[BIGMAP+$0A95]&$FF
	DB	[BIGMAP+$0AC6]&$FF
;
CHELO:
ANGLO:
	DB	[BIGMAP+$0AA9]&$FF; LO
	DB	[BIGMAP+$0BF9]&$FF; HI
	DB	[BIGMAP+$0B0C]&$FF
	DB	[BIGMAP+$0B68]&$FF
	DB	[BIGMAP+$0AAB]&$FF
	DB	[BIGMAP+$0B3D]&$FF
	DB	[BIGMAP+$0ADD]&$FF
	DB	[BIGMAP+$0BCB]&$FF
	DB	[BIGMAP+$0ADA]&$FF
	DB	[BIGMAP+$0B9C]&$FF
	DB	[BIGMAP+$0B08]&$FF
	DB	[BIGMAP+$0B6B]&$FF
	DB	[BIGMAP+$0B05]&$FF
	DB	[BIGMAP+$0B65]&$FF
	DB	[BIGMAP+$0B3A]&$FF
	DB	[BIGMAP+$0BC7]&$FF
;
HENLO:
ESSLO:
	DB	[BIGMAP+$0BF2]&$FF; LO
	DB	[BIGMAP+$0CB7]&$FF; HI
	DB	[BIGMAP+$0C85]&$FF
	DB	[BIGMAP+$0CB2]&$FF
	DB	[BIGMAP+$0BF5]&$FF
	DB	[BIGMAP+$0C23]&$FF
	DB	[BIGMAP+$0CB4]&$FF
	DB	[BIGMAP+$0C58]&$FF
	DB	[BIGMAP+$0CB3]&$FF
	DB	[BIGMAP+$0C51]&$FF
	DB	[BIGMAP+$0C83]&$FF
	DB	[BIGMAP+$0C54]&$FF
	DB	[BIGMAP+$0C89]&$FF
	DB	[BIGMAP+$0C52]&$FF
	DB	[BIGMAP+$0C86]&$FF
	DB	[BIGMAP+$0C57]&$FF
;
HORLO:
SUSLO:
	DB	[BIGMAP+$0D10]&$FF; LO
	DB	[BIGMAP+$0DA7]&$FF; HI
	DB	[BIGMAP+$0D45]&$FF
	DB	[BIGMAP+$0D11]&$FF
	DB	[BIGMAP+$0DA5]&$FF
	DB	[BIGMAP+$0D78]&$FF
	DB	[BIGMAP+$0D14]&$FF
	DB	[BIGMAP+$0D76]&$FF
	DB	[BIGMAP+$0D1A]&$FF
	DB	[BIGMAP+$0D47]&$FF
	DB	[BIGMAP+$0D13]&$FF
	DB	[BIGMAP+$0D73]&$FF
	DB	[BIGMAP+$0D18]&$FF
	DB	[BIGMAP+$0D70]&$FF
	DB	[BIGMAP+$0DA2]&$FF
	DB	[BIGMAP+$0D42]&$FF
;
SATLO:
DYFLO:
	DB	[BIGMAP+$0B82]&$FF; LO
	DB	[BIGMAP+$0C74]&$FF; HI
	DB	[BIGMAP+$0BB8]&$FF
	DB	[BIGMAP+$0C0E]&$FF
	DB	[BIGMAP+$0BDD]&$FF
	DB	[BIGMAP+$0C43]&$FF
	DB	[BIGMAP+$0BE5]&$FF
	DB	[BIGMAP+$0C12]&$FF
	DB	[BIGMAP+$0B84]&$FF
	DB	[BIGMAP+$0BE1]&$FF
	DB	[BIGMAP+$0BB0]&$FF
	DB	[BIGMAP+$0C45]&$FF
	DB	[BIGMAP+$0C72]&$FF
	DB	[BIGMAP+$0BE3]&$FF
	DB	[BIGMAP+$0C47]&$FF
	DB	[BIGMAP+$0C40]&$FF
;
HOELO:
DUMLO:
	DB	[BIGMAP+$0D61]&$FF; LO
	DB	[BIGMAP+$0E51]&$FF; HI
	DB	[BIGMAP+$0D90]&$FF
	DB	[BIGMAP+$0DC1]&$FF
	DB	[BIGMAP+$0D64]&$FF
	DB	[BIGMAP+$0D92]&$FF
	DB	[BIGMAP+$0DC3]&$FF
	DB	[BIGMAP+$0E1F]&$FF
	DB	[BIGMAP+$0E22]&$FF
	DB	[BIGMAP+$0DC5]&$FF
	DB	[BIGMAP+$0DEE]&$FF
	DB	[BIGMAP+$0DF3]&$FF
	DB	[BIGMAP+$0E4C]&$FF
	DB	[BIGMAP+$0DF1]&$FF
	DB	[BIGMAP+$0E4E]&$FF
	DB	[BIGMAP+$0DBF]&$FF
;
;

ALONE	=	0
SHARED	=	1
MODULE	=	SHARED
;
; BRITAIN MODULE   OCT 12 1982
; PREVIOUSLY KNOWN AS SCRL24.ASM
;
; THIS IS A VBLANK ROUTINE WITH
; AN INITIALIZATION FRONT
; WHICH RESOTRES THE STATE OF THE
; MAIN CODE WHEN INITIALIZED
;
; IT SWAPS IN THE CAMELOT MODULE
; IT REFLECTS CURRENT MEMORY MAP
; IT HANDLES CROP MANAGEMENT
; IT UPDATES THE KINGDOM STATUS PERIODICALLY


;
;Page zero RAM
;
RTCLKL	=	$14
ATRACT	=	$4D
;
	ORG	$D0
DLSTPT	ORG	*+2
	ORG	$D4
MAPLO	ORG	*+1
MAPHI	ORG	*+1
TIMP1	ORG	*+1
TIMP2	ORG	*+1
CRPPTR	ORG	*+2
PRDLO	ORG	*+1
PRDHI	ORG	*+1
DIVSR	ORG	*+1
MLTPR:
QUOTN	ORG	*+1
;
VVBLKD	=	$224
SDMCTL	=	$022F
DMACTL	=	$D400
DLSTLO	=	$230
DLSTHI	=	$231
COLPM0	=	$2C0
COLPM1	=	$2C1
COLPM2	=	$2C2
COLPM3	=	$2C3
COLOR0	=	$2C4
COLOR1	=	$2C5
COLOR2	=	$2C6
COLOR3	=	$2C7
COLOR4	=	$2C8
SIZEP0	=	$D008
SIZEP1	=	$D009
SIZEP2	=	$D00A
SIZEP3	=	$D00B
CHBAS	=	$2F4
STICK	=	$278
HPOSP0	=	$D000
HPOSP3	=	$D003
HPOSM3	=	$D007
GPRIOR	=	$026F
PRIOR	=	$D01B
P0PF	=	$D004
P2PF	=	$D006
P3PL	=	$D00F
M3PF	=	$D003
TRIG0	=	$D010
TRIG1	=	$D011
GRACTL	=	$D01D
HITCLR	=	$D01E
HSCROLL	=	$D404
VSCROLL	=	$D405
NMIEN	=	$D40E
PMBASE	=	$D407
CHBASE	=	$D409
WSYNC	=	$D40A
SETVBV	=	$E45C
XITVBV	=	$E462
CONSOL	=	$D01F
RANDOM	=	$D20A
;
MISSLE	=	$1C00+384
P0	=	$1E00
P1	=	P0+128
P2	=	P1+128
P3	=	P2+128
DLAREA	=	DLSAVE
;
SIEGE	=	32
BURN	=	2
WALK	=	1
MOUNT	=	2
;
;
;
	ORG	BRTADD
;
	JMP	BRTSTR
;
OFFLO	ORG	*+1	;How far to offset new LMS value
OFFHI	ORG	*+1
LASTSK	ORG	*+1
DELAY	ORG	*+1
TIMSCL	ORG	*+1
SAVL	ORG	*+1
SAVH	ORG	*+1
SAVY	ORG	*+1
COUNT	ORG	*+1
CRPSAV	ORG	*+1
FRAME	ORG	*+1
L30	ORG	*+1
H30	ORG	*+1
BPOS	ORG	*+1
BHITE	ORG	*+1
NAMCNT	ORG	*+1
NAMIND	ORG	*+1
CNTDWN	ORG	*+1
WEEKFL	ORG	*+1
SAVEWK	ORG	*+1
ROLLL	ORG	*+1
ROLLH	ORG	*+1
ZZZCNT	ORG	*+1
TZMP1	ORG	*+1
COLSWP	ORG	*+1
;
BRTSTR:
	LDA	#128	; DISALLOW NORMAL VBI PROCESSING
	STA	FLAGLL
;
	LDA	#0
	STA	SELFLG	; NOT IN PAUSE MODE
;
	LDA	XPOSL	; CREATE THE DISPLAY LIST
	STA	ROLLL
	LDA	XPOSH
	STA	ROLLH
	LDX	#3
	JSR	SHFTIT
	LDA	ROLLL
	STA	SAVL
;
	LDA	YPOSL
	STA	ROLLL
	LDA	YPOSH
	STA	ROLLH
	LDX	#4
	JSR	SHFTIT
;
	LDA	ROLLL
	SEC
	SBC	#5
	ASL	A
	TAX
	LDA	MULT30,X
	CLC
	ADC	#$27
	STA	ROLLL
	LDA	MULT30+1,X
	ADC	#BIGMAP/256
	STA	ROLLH
;
	LDA	ROLLL
	SEC
	SBC	SAVL
	STA	ROLLL
	LDA	ROLLH
	SBC	#0
	STA	ROLLH	;[(RL-5)*30]+$27+BIGMAP-SAVL
;
	LDA	#DLSAVE&255
	STA	CRPPTR
	LDA	#DLSAVE/256
	STA	CRPPTR+1
	LDY	#0
;
	LDA	#$70
	STA	(CRPPTR),Y
	INY
	STA	(CRPPTR),Y
	INY
	STA	(CRPPTR),Y
	INY
;
	LDX	#11
BRTS00:
	LDA	#$77
	STA	(CRPPTR),Y
	INY
	LDA	ROLLL
	STA	(CRPPTR),Y
	INY
	LDA	ROLLH
	STA	(CRPPTR),Y
	INY
;
	LDA	ROLLL
	CLC
	ADC	#$30
	STA	ROLLL
	LDA	ROLLH
	ADC	#0
	STA	ROLLH
;
	DEX
	BNE	BRTS00
;
	DEY
	DEY
	DEY
	LDA	#$57
	STA	(CRPPTR),Y
	INY
	INY
	INY
;
	LDA	#$4F
	STA	(CRPPTR),Y
	INY
	LDA	#BRTEXT&255
	STA	(CRPPTR),Y
	INY
	LDA	#BRTEXT/256
	STA	(CRPPTR),Y
	INY
;
	LDX	#31
	LDA	#$0F
BRTS01:
	STA	(CRPPTR),Y
	INY
	DEX
	BNE	BRTS01
;
	LDA	#$41
	STA	(CRPPTR),Y
	INY
	LDA	#DLSAVE&255
	STA	(CRPPTR),Y
	INY
	LDA	#DLSAVE/256
	STA	(CRPPTR),Y
;
	LDA	#DLAREA&$FF	; POINT TO DISPLAY LIST
	STA	DLSTLO
	STA	DLSTPT
	LDA	#DLAREA/256
	STA	DLSTHI
	STA	DLSTPT+1
;
	LDA	#DLIVEC&$FF
	STA	$200
	LDA	#DLIVEC/256
	STA	$201
;
	LDX	#4
LOOP44	LDA	PFCLTB,X
	STA	COLOR0,X
	DEX
	BPL	LOOP44
;
	LDA	XPOSL
	AND	#$07
	STA	HSCROLL
;
	LDA	YPOSL
	AND	#$0F
	STA	VSCROLL
;
	JSR	CLRTXT	; CLEAR TEXT WINDOW
;
	LDA	DLSTLO	;Restore display list pointer
	STA	DLSTPT
	LDA	DLSTHI
	STA	DLSTPT+1
;
; set up crops
;
	LDA	#0
CROP11:
	JSR	UPSTS
	JSR	UPCRP
	JSR	DISCRP
	TAX
	INX
	TXA
	CMP	#16
	BNE	CROP11
;
; erase extra crops
;
	LDA	#$C0		; THESE WERE CREATED LONG
	STA	BIGMAP+$0AFF	; AGO, AND CAN NOT
	STA	BIGMAP+$0B8E	; BE SELECTIVELY
	STA	BIGMAP+$0C4E	; ERASED FROM DATA
;
; change 9 crops to 8
;
	LDA	#108	; THIS IS 2 CROPS
	STA	NORTH+$5E	; REPLACE BOT ROW
	STA	NORTH+$5F
	STA	MIDDL+$5E	; REPALCE BOT ROW
	STA	MIDDL+$5F
	STA	SOUTH+$58	; REPLACE TOP ROW
	STA	SOUTH+$59
;
; ZERO OUT BRITAIN TIMER
;
	LDA	#0
	STA	WEEKFL
;
;set up players
;
	LDA	#$1C
	STA	PMBASE
;
	LDA	#0
	STA	SIZEP0
	STA	SIZEP1
	STA	SIZEP2
	STA	SIZEP3
	TAX
LOOP43	STA	P0,X
	STA	P2,X
	DEX
	BNE	LOOP43
;
	LDX	#7
LOOP41	LDA	CROWN2,X
	STA	P2+56,X
	LDA	CROWN1,X
	STA	P1+56,X
	DEX
	BPL	LOOP41
	LDA	#1
	STA	P0+61
;
	LDX	#3
LOOP42	LDA	POSTAB,X
	STA	HPOSP0,X
	LDA	PCOLTB,X
	STA	COLPM0,X
	DEX
	BPL	LOOP42
	LDA	#$2E
	STA	SDMCTL
	STA	DMACTL
	LDA	#3
	STA	GRACTL
;
;Now enable deferred vertical blank interrupt
;
	LDX	#VBISR/256
	LDY	#VBISR&$FF
	LDA	#7
	JSR	SETVBV
	LDA	#$C0
	STA	NMIEN
	LDA	#$2E
	STA	SDMCTL
	STA	DMACTL
	LDA	#1
	STA	GPRIOR
	STA	PRIOR
;
	IF	MODULE
XIT:
	PLA		; RESTORE STATE OF MAIN CODE
	TAY
	PLA
	TAX
	PLA
	LSR	FLAGLL	; ALLOW NORMAL VBI PROCESSING
	RTI
	ELSE
	LSR	FLAGLL
HERE	JMP	HERE
	ENDIF
;
;
;This is the vertical blank interrupt routine
;It reads the joystick and scrolls the screen
;
VBISR:
	LDA	FLAGLL
	BPL	VBISR0
	JMP	XITVBV

VBISR0:
	LDA	#$80
	STA	FLAGLL
;
	LDA	SELFLG
	BEQ	VBISR6
	LDA	#128
	STA	FLAGLL
;
VBISR7:
	LDA	CONSOL
	CMP	#7
	BNE	VBISR7
	JSR	PAUSDL
	LDA	#0
	STA	SELFLG
	JMP	ZZZOUT
;
VBISR6:
	LDA	TRIG0	; THIS IS THE SWAP TO THE
	BNE	VBISR1	; TEXTUAL IDENTIFY BIRD
	LDA	MERFLG
	BEQ	VBISR1	; IS MERLIN IN ?
;
	LDA	#128
	STA	FLAGLL
	JSR	BIRDON
	LDX	#VBIRD/256
	LDY	#VBIRD&$FF
	LDA	#7
	JSR	SETVBV
	LDA	#$C0
	STA	NMIEN
	LDA	#$2E
	STA	SDMCTL
ZZZOUT:
	PLA
	TAY
	PLA
	TAX
	PLA
	LSR	FLAGLL
	RTI
;
VBISR1:
	LDA	LANGER		;##
	ORA	DANGER		;##
	BEQ	VBISR5		;##
	LDA	#$2A		;##
	STA	COLSWP		;##
DANG01:
	LDA	DANGER
	BEQ	DANG03		;##
	LDA	GEORGE		; GEORGE DOESN'T ALLOW
	BNE	DANG03		; ARTHUR TO SENSE DANGER
	LDA	#$26		;##
	STA	COLSWP		;##
;
DANG03:
	LDA	CNTDWN
	BEQ	DANGIT
	DEC	CNTDWN
	BNE	VBISR3
;
DANGIT:
	LDA	#$2C		;##
	LDX	COLPM1		;##
	CPX	#$2C		;##
	BNE	DANG02		;##
	LDA	COLSWP		;##
;
DANG02:
	STA	COLPM1
	STA	COLPM2
	LDA	#FLRATE
	STA	CNTDWN
	JMP	VBISR3
;
VBISR5:
	LDA	#$1C
	STA	COLPM1
	STA	COLPM2
;
VBISR3:
	LDA	WEEKFL
	BEQ	VBISR4
	LDA	SAVEWK
	CMP	WEEKLO
	BEQ	ZZZOUT
	LDA	#0
	STA	WEEKFL
	LDA	#$54
	STA	COLPM0
	JSR	CLRTXT
	JMP	ZZZOUT
;
VBISR4:
	LDA	CONSOL
	CMP	#3		; OPTION KEY HIT ?
	BNE	VBISR8
;
	LDA	#128
	STA	FLAGLL
;
	LDX	#XITVBV/256
	LDY	#XITVBV&255
	LDA	#7
	JSR	SETVBV
;
	PLA
	PLA
	PLA
	PLA
	PLA
	PLA
	JMP	SWPZED
;
;
VBISR8:
	CMP	#5		; SELECT KEY HIT
	BNE	VBISR9
	LDA	#$FF
	STA	SELFLG
;
VBISR9:
	CMP	#6
	BNE	VBISR2
	LDA	#125
	STA	HPOSP0
;
VBISR2:
	LDA	RTCLKL
	TAX
	AND	#$1E	; 4 BITS SET IN MASK !
	LSR	A
	STA	TIMP1
	TXA
	AND	#$01
	BEQ	A36
;
	LDA	TIMP1
	JSR	UPSTS
	JMP	A37
;
A36:
	LDA	TIMP1
	JSR	UPCRP
	JSR	DISCRP
A37:
;
A31:
A32:
	LDA	#0
	STA	OFFLO
	STA	OFFHI	;zero the offset
	LDA	P0PF
	AND	#$0F
	BEQ	Y60
	LDA	#128	; DISALLOW LONG VBI
	STA	FLAGLL
	LDA	P0PF	; JUMP TO VIRTUAL VBI CODE
	AND	#$02
	BEQ	A34
	JMP	WHITE
A34:
	LDA	P0PF
	AND	#$04
	BEQ	A35
	JMP	GREEN
A35:
	LDA	P0PF
	AND	#$08
	BEQ	A33
	JMP	RUST
;
A33:
	LDA	P0PF
	AND	#1
	BEQ	Y60
	JMP	BLUE
;
Y60	LDA	STICK	;get joystick reading
Y61	STA	STICK
	CMP	#$F
	BNE	Y62
	;	LDA	#10		; NO DELAY ON CURSOR
	;	STA	DELAY
	;	CLC
	;	ADC	RTCLKL
	;	STA	TIMSCL
OUT	JMP	CHGDL
Y62:
	LDA	#1
	STA	ATRACT
	;	LDA	TIMSCL	; NO DELAY ON CURSOR
	;	CMP	RTCLKL
	;	BNE	OUT
	;	LDA	DELAY
	;	CMP	#1
	;	BEQ	X21
	;	SEC
	;	SBC	#1
	;	STA	DELAY
X21	;	CLC
	;	ADC	RTCLKL
	;	STA	TIMSCL
;
	INC	ZZZCNT	; MOVE ON EVERY 4TH ENTRY
	LDA	ZZZCNT	; SLOW IT DOWN 4 TIMES
	AND	#$03
	BNE	OUT
;
	;	LDA	#WALK	; TRAVELING USES UP TIME
	;	STA	COUNT
	;	JSR	TIMEIT
;
	LDX	#$F
	STX	LASTSK
	LDA	STICK
	AND	#8	;joystick left?
	BNE	CHKRT	;no, move on
	LDA	#$B
	STA	LASTSK
	LDA	XPOSL
	SEC		;decrement x-coordinate
	SBC	#1
	BCS	X2
	DEC	XPOSH
X2	STA	XPOSL
	AND	#7
	STA	HSCROLL	;fine scroll
	CMP	#7	;scroll overflow?
	BNE	CHKUP	;no, move on
	INC	OFFLO	;yes, mark it for offset
CHKRT	LDA	STICK	;get back joystick byte
	AND	#4	;joystick right?
	BNE	CHKUP	;no, move on
	LDA	#$7
	AND	LASTSK
	STA	LASTSK
	LDA	XPOSL
	CLC	;no, increment x-coordinate
	ADC	#1
	STA	XPOSL
	BCC	X4
	INC	XPOSH
X4	AND	#7
	STA	HSCROLL	;fine scroll
	BNE	CHKUP	;scroll overflow? if not, move on
	DEC	OFFLO	;yes, set up offset for character scroll
	DEC	OFFHI
CHKUP	LDA	STICK	;joystick up?
	LSR	A
	BCS	CHKDN	;no, ramble on
	LDA	#$D
	AND	LASTSK
	STA	LASTSK
	LDA	YPOSL
	SEC		;no, decrement y-coordinate
	SBC	#1
	STA	YPOSL
	BCS	X9
	DEC	YPOSH
X9	AND	#$F
	STA	VSCROLL	;fine scroll
	CMP	#$F	;scroll overflow?
	BNE	CHKDN	;no, move on
	LDA	OFFLO	;yes, mark offset
	SEC
	SBC	#$30
	STA	OFFLO
	LDA	OFFHI
	SBC	#0
	STA	OFFHI
CHKDN	LDA	STICK		;Joystick down?
	LSR	A
	LSR	A
	BCS	CHGDL	;no, trudge on
	LDA	#$E
	AND	LASTSK
	STA	LASTSK
	LDA	YPOSL	;yes
	CLC		;no, increment y-coordinate
	ADC	#1
	BCC	X7
	INC	YPOSH
X7	STA	YPOSL
	AND	#$F
	STA	VSCROLL	;fine scroll
	BNE	CHGDL	;scroll overflow? If not, amble on
	LDA	OFFLO	;yes, set up offset for character scroll
	CLC
	ADC	#$30
	STA	OFFLO
	LDA	OFFHI
	ADC	#0
	STA	OFFHI
;
;In this loop we add the offset values to the existing
;LMS addresses of all display lines.
;This scrolls the characters.
;
CHGDL	LDY	#3
DLOOP	LDA	(DLSTPT),Y
	AND	#$7F
	STA	(DLSTPT),Y
	INY
	LDA	(DLSTPT),Y
	CLC
	ADC	OFFLO
	STA	(DLSTPT),Y
	INY
	LDA	(DLSTPT),Y
	ADC	OFFHI
	STA	(DLSTPT),Y
	INY
	CPY	#$24
	BNE	DLOOP
;
	LDX	#4
LOOP45	LDA	YPOSL
	SEC
	SBC	LATLO,X
	LDA	YPOSH
	SBC	LATHI,X
	BCC	DCLDLI
	DEX
	BNE	LOOP45
DCLDLI	LDA	TOPSET,X
	STA	CHBAS
	STA	CHBASE
	LDA	BOTSET,X
	STA	CHRSET
	LDA	DELDLI,X
	SEC
	SBC	YPOSL
	STA	TIMP1
	LDA	DEHDLI,X
	SBC	YPOSH
	LSR	A
	ROR	TIMP1
	LSR	A
	ROR	TIMP1
	LSR	A
	ROR	TIMP1
	LSR	A
	ROR	TIMP1
	LDA	TIMP1
	CMP	#11
	BCS	X0
	ASL	A
	CLC
	ADC	TIMP1
	ADC	#3
	TAY
	LDA	(DLSTPT),Y
	ORA	#$80
	STA	(DLSTPT),Y
;
X0	JMP	ZZZOUT	;exit vertical blank routine
;
DLIVEC	PHA
	LDA	CHRSET
	STA	WSYNC
	STA	CHBASE
	PLA
	RTI
;
;
SHFTIT:
	LSR	ROLLH
	ROR	ROLLL
	DEX
	BNE	SHFTIT
	RTS
;
;
CROWN2	DB	4,$8E,$8E,$DF
	DB	$DF,$FB,$FF,$FF
CROWN1	DB	$0,1,1,3
	DB	3,7,7,7
POSTAB	DB	125,130,127,0
PCOLTB	DB	$54,$1C,$1C,$88
PFCLTB	DB	$86,$0A,$C4,$56,$12
LATLO	DB	$FF,0,$50,$50,$A0
LATHI	DB	$FF,4,3,2,1
TOPSET	DB	SOUTH/256,MIDDL/256,MIDDL/256,NORTH/256,NORTH/256
BOTSET	DB	SOUTH/256,SOUTH/256,MIDDL/256,MIDDL/256,NORTH/256
DELDLI	DB	$FF,$FF,$FF,$4F,$4F
DEHDLI	DB	$FF,3,3,2,2
;
;
; SAVE.ASM           FEB 4 1983
;
; THIS IS A PROGRAM THAT SAVES
; THE GAME STATE OF EXCALIBUR AND
; THEN GIVES CONTROL TO DOS
;
POWRUP	=	$E477
DOSVEC	=	$0A
DOSINI	=	$0C
VKEYBD	=	$208
DOSXIT	=	$179F
VBOLD	=	$E45F
SETVBV	=	$E45C
XITVBV	=	$E462
;
IOCB4	=	$40
EOF	=	$88
CIOV	=	$E456
;
ICHID	=	$0340
ICDNO	=	ICHID+1
ICCOM	=	ICDNO+1
ICSTA	=	ICCOM+1
ICBAL	=	ICSTA+1
ICBAH	=	ICBAL+1
ICPTL	=	ICBAH+1
ICPTH	=	ICPTL+1
ICBLL	=	ICPTH+1
ICBLH	=	ICBLL+1
ICAX1	=	ICBLH+1
ICAX2	=	ICAX1+1
;
OPEN	=	$03
GETCHR	=	$07
PUTCHR	=	$0B
CLOSE	=	$0C
WRITE	=	$08
READ	=	$04
;
;
	ORG	ZEDADD
;
SAVEIT:
	JMP	SAVE1
;
BADDL	ORG	*+1
BADDH	ORG	*+1
BENDL	ORG	*+1
BENDH	ORG	*+1
SAVL	ORG	*+1
SAVH	ORG	*+1
ZZTMP	ORG	*+1
;
LODNAM:	DB	'D1:SAVE.DAT'
;
SAVE1:
	JSR	RESTIT
;
	JSR	OPENIT
	LDA	#0
	JSR	PUTNXT
	LDA	#0
	JSR	PUTNXT
;
	LDA	#TOPDAT&255	; SAVE PERMANENT VAR
	STA	BADDL
	JSR	PUTNXT
	LDA	#TOPDAT/256
	STA	BADDH
	JSR	PUTNXT
	LDA	#BOTDAT&255
	STA	BENDL
	JSR	PUTNXT
	LDA	#BOTDAT/256
	STA	BENDH
	JSR	PUTNXT
;
	JSR	BLOCK
;
	LDA	#$80	; SAVE 1/2 OF ZERO PAGE
	STA	BADDL
	JSR	PUTNXT
	LDA	#$00
	STA	BADDH
	JSR	PUTNXT
	LDA	#$FF
	STA	BENDL
	JSR	PUTNXT
	LDA	#$00
	STA	BENDH
	JSR	PUTNXT
;
	JSR	BLOCK
;
	LDA	#EOF	; END OF FILE CHAR
	JSR	PUTNXT
;
	JSR	CLOSIT
;
	LDA	#LOGADD/256	; SET UP STACK FOR
	PHA			; FAKE RETURN
	LDA	#LOGADD&255
	PHA
	LDA	#0
	PHA
	PHA
	PHA
	PHA
	JMP	SWPRES		; CONTINUE THE GAME
;
;
	;	JMP	POWRUP
;
;
	;	LDA	#$9F		; PREPARE TO GO TO DOS
	;	STA	DOSVEC		; DUPLICATE CODE AT
	;	LDA	#$17		; $3731 BECAUSE DDT
	;	STA	DOSVEC+1	; OVERLAYS THAT AREA
	;	LDA	#$40		; AND (DOSVEC) POINTS
	;	STA	DOSINI		; THERE
	;	LDA	#$15		;
	;	STA	DOSINI+1	;
	;	LDA	#$BE
	;	STA	VKEYBD
	;	LDA	#$FF
	;	STA	VKEYBD+1
	;	JMP	DOSXIT
;
;
BLOCK:
	LDX	#IOCB4
	LDA	BADDL	; STORE BUFFER START ADDR
	STA	ICBAL,X
	LDA	BADDH
	STA	ICBAH,X
;
	LDA	BENDL	; CALC BUFFER LENGTH
	SEC
	SBC	BADDL
	STA	SAVL
	LDA	BENDH
	SBC	BADDH
	STA	SAVH
;
	LDA	SAVL	; ADD 1 TO FINISH CALC
	CLC		; THEN STORE
	ADC	#1
	STA	ICBLL,X
	LDA	SAVH
	ADC	#0
	STA	ICBLH,X
;
	JSR	CIOV
	RTS
;
;
OPENIT:
	LDX	#IOCB4
	LDA	#OPEN
	STA	ICCOM,X
	LDA	#LODNAM&255
	STA	ICBAL,X
	LDA	#LODNAM/256
	STA	ICBAH,X
	LDA	#WRITE
	STA	ICAX1,X
	LDA	#0
	STA	ICAX2,X
	JSR	CIOV
	RTS
;
;
PUTNXT:
	STA	ZZTMP
	LDX	#IOCB4
	LDA	#PUTCHR
	STA	ICCOM,X
	LDA	#0
	STA	ICBLL,X
	STA	ICBLH,X
	LDA	ZZTMP
	JSR	CIOV
	RTS
;
;
CLOSIT:
	LDX	#IOCB4
	LDA	#CLOSE
	STA	ICCOM,X
	JSR	CIOV
	RTS
;
;
RESTIT:
	LDX	#VBOLD/256	; RESTORE OLD VBLANK
	LDY	#VBOLD&255	; TO DO DISK I/O
	LDA	#6
	JSR	SETVBV
;
	LDX	#XITVBV/256
	LDY	#XITVBV&255
	LDA	#7
	JSR	SETVBV
;
	RTS
;
;
; ENDBAT.ASM
;
; REDUCES ARMSIZ AT HOME FOR ECON
; PASSES PRESTIGE TO THE VICTOR
; FOR END PROCESSING OF BATTLE.OBJ
;
; DECIDES PILLAGE REC. IF DEFENDER WINS
; IMPLEMENTS FORCING CAMPAIGN END IF DEFENDER WINS
; IF ATTACKER WINS, DECIDES IF CONTINUE CAMPAIGN
; IF ATTACKER = ARTHUR, NO DECSISION
; DECIDES WHICH SWAP VECTOR TO JUMP TO
;
CONSOL	=	$D01F
;
	LDX	LOSER	; GET LOSER'S INDEX
	LDA	LIEGE,X	; TRANSFER PRESTIGE FROM
	CMP	#$10		; LOSER TO VICTOR
	BCS	ENDIT0	; REMEMBER THAT VASSALS
	TAX		; CAN NOT HAVE PRESTIGE, SO
	LDA	PRESTG,X	; IF VASSALS ARE 
	LSR	A		; INVOLVED, GO INDIRECT TO
	JMP	ENDIT1	; LIEGE.  TAKE 1/4 OF
;				; PRESTIGE. IF LOSER IS VASSAL,
ENDIT0:			; TAKE 1/8 OF LIEGE'S
	LDA	PRESTG,X	; PRESTIGE
ENDIT1:	LSR	A
	LSR	A
	STA	TEMP1
;
	LDX	VICTOR
	LDA	LIEGE,X
	CMP	#$10
	BCS	ENDIT2
	TAX
ENDIT2:	LDA	TEMP1
	CLC
	ADC	PRESTG,X
	STA	PRESTG,X
;
KEYTST:
	LDA	CONSOL
	CMP	#6		; WAIT UNTIL HIT START KEY
	BNE	KEYTST
;
	LDA	DEDKNG
	BEQ	NODEAD
	LDA	LOSER
	BNE	KNGDED
	JMP	SWPEND	; ARTHUR HAS DIED
;
KNGDED:
	LDX	LOSER	; OTHER KING DIED
	LDA	#0		; ARTHUR IS MADE HIS LIEGE
	STA	LIEGE,X
	STA	TITBGT,X
;
	LDA	TRBTOR,X
	BNE	KNGD00
	LDA	TRIBUT,X	; ARTHUR IS NO LONGER TRBTOR
	STA	TITBGT,X
	LDA	#0
	STA	TRIBUT,X
	LDA	#$10
	STA	TRBTOR,X
;
KNGD00:
	LDA	KNGSTS,X	; LOSER IS VASSAL TO ARTHUR
	AND	#$0F
	ORA	#$10
	STA	KNGSTS,X
;
	LDA	LOSER		; ARTHUR IS NUETRAL TO LOSER
	ASL	A
	ASL	A
	ASL	A
	ASL	A
	TAX
	LDA	KNGSTS,X
	AND	#$0F
	ORA	#$40
	STA	KNGSTS,X
;
; WHAT ABOUT THE VASSAL'S KNIGHTS ?
; WHAT ABOUT THE VASSAL'S VASSALS ?
;
	JMP	ARTWIN
;
;
NODEAD:
	LDA	LOSER
	BEQ	ARTLOS
;
ARTWIN:
	LDA	VBISAV
	CMP	#5
	BNE	ARTDEF
	JMP	SWPBRT
;
ARTDEF:
	LDX	LOSER		; ARTHUR GETS ATTACKER'S
	LDA	PILCAR,X	; PILLAGE
	CLC
	ADC	BANK
	STA	BANK
	LDA	PILCAR+16,X
	ADC	BANK+16
	STA	BANK+16
;
	LDA	#0		; ZERO THE PILLAGE CARRY
	STA	PILCAR,X
	STA	PILCAR+16,X
;
	LDX	#0		; ARTHUR IS DEFENDER
	LDY	LOSER		; LOSER WAS ATTACKER
	JSR	CAMSTP	; TURN OFF CAMPAIGN
;
	LDA	VBISAV
	CMP	#1
	BEQ	JMPCAM
	JMP	SWPVAS
JMPCAM:	JMP	SWPCAM
;
;
ARTLOS:
	LDA	VBISAV
	CMP	#5		; ARTHUR WAS ATTAKER
	BNE	REATTK
;
	LDX	VICTOR	; ARTHUR'S PILLAGE GOES
	LDA	PILCAR	; TO THE DEFENDER
	CLC
	ADC	BANK,X
	STA	BANK,X
	LDA	PILCAR+16
	ADC	BANK+16,X
	STA	BANK+16,X
;
	LDA	#0		; ARTHUR DOESN'T GET PILLAGE
	STA	PILCAR
	STA	PILCAR+16
;
	LDA	VICTOR
	ASL	A
	ASL	A
	ASL	A
	ASL	A
	TAX
	LDA	#1
	LDY	#$0F
ARTL00:
	STA	HITCRP,X
	INX
	DEY
	BPL	ARTL00
;
	JMP	SWPBRT
;
;
REATTK:
	LDA	VBISAV
	CMP	#1
	BEQ	CAMATK
;
VASATK:
	JSR	ATKVAS	; RE-ATTACK VASSAL ?
	BCC	VASAT0
	LDX	CASTLE	; VASSAL IS DEFENDER
	LDY	VICTOR	; VICTOR IS ATTACKER
	JSR	CAMSTP	; TURN OFF CAMPAIGN
VASAT0:JMP	SWPVAS
;
CAMATK:
	JSR	ATKCAM	; RE-ATTACK CAMELOT ?
	BCC	CAMAT0
	LDX	#0		; ARTHUR IS DEFENDER
	LDY	VICTOR	; VICTOR IS ATTACKER
	JSR	CAMSTP	; TURN OFF CAMPAIGN
CAMAT0:	JMP	SWPCAM
;
;
CAMSTP:
	LDA	#0		; SHUT DOWN CAMPAIGN
	STA	DANGER,X
	STA	BURNT,X
	STA	CAMPGN,Y
;
	LDA	#$10
	STA	AGRSSR,X
	STA	TARGIT,Y
;
	LDA	#$FF		; BEGIN RETREAT OF ATTACKER
	STA	ADVNCE,Y
;
	RTS
;
;
ATKVAS:
ATKCAM:
; TEMPORARY STUB
	SEC
	RTS
;
;


;
BLUE:
	JSR	POINTER
	CMP	#$02	; CASTLE
	BNE	BLUE0
	;	JSR	FNDCAS
	;	BPL	BLUE2
	JMP	BACK
;
BLUE2:
		; weaken this king and yourself
	;	LDA	#SIEGE
	;	STA	COUNT
	;	JSR	TIMEIT
	;	JMP	BACK
;
BLUE0:
BLUE1:
	LDA	LASTSK
	AND	#$F
	JMP	Y61
;
;
WHITE:
	JSR	POINTER
	CMP	#$42	; CASTLE
	BNE	WHITE0
	LDA	SAVH
	CMP	#[BIGMAP+$D69]/256
	BNE	WHITE2
	LDA	SAVL
	CMP	#[BIGMAP+$D69]&$FF
	BNE	WHITE2
;
WHITE3:
	IF	MODULE
	LDA	#128	; exit into camelot
	STA	FLAGLL
	JSR	COLORS
	;
	LDA	#0		; ARTHUR COMES HOME
	STA	FLDARM
	STA	FLDKNT
	STA	TRAPFL
;
	LDA	ARMSIZ
	STA	HOMARM
;
	LDX	TARGIT
	LDA	#$13
	STA	TARGIT
	STA	AGRSSR,X
	LDA	#$00
	STA	BURNT,X
	STA	DANGER,X
	STA	CAMPGN
;
	JMP	SWPCAM
	ELSE
	JMP	BACK
	ENDIF
;
WHITE2:
	JSR	FNDCAS
	BPL	WHITE4
	JMP	BACK
;
WHITE4:
	STA	CASTLE	; SET UP RE-ENTRY FROM
	TAX		; VASSAL'S CASTLE
	LDA	XLOLST,X
	STA	XPOSL
	LDA	XHILST,X
	STA	XPOSH
	LDA	YLOLST,X
	STA	YPOSL
	LDA	YHILST,X
	STA	YPOSH
;
	LDA	#128	; SWAP VASSAL CASTLE IN !
	STA	FLAGLL
	JSR	COLORS
	JMP	SWPVAS
;
WHITE0:
WHITE1:
	JMP	BACK
;
;
XLOLST:
	DB	$D0,$E8,$40,$E8
	DB	$18,$98,$D8,$E8
	DB	$80,$98,$10,$30
	DB	$68,$78,$F0,$30
;
XHILST:
	DB	$00,$00,$01,$00
	DB	$01,$00,$00,$00
	DB	$00,$00,$01,$00
	DB	$00,$00,$00,$01
;
YLOLST:
	DB	$80,$89,$9A,$D9
	DB	$69,$AA,$B9,$39
	DB	$3A,$A9,$47,$D6
	DB	$38,$88,$27,$C8
;
YHILST:
	DB	$04,$01,$01,$01
	DB	$02,$02,$02,$03
	DB	$03,$03,$03,$03
	DB	$04,$04,$04,$04
;
;
GREEN:
	JSR	POINTER
	CMP	#$82	; CASTLE
	BNE	GREEN0
	;	JSR	FNDCAS
	;	BPL	GREEN8
	JMP	BACK
;
GREEN8:
	;	JSR	MAKENE
		; change the army, too ?
	;	LDA	#SIEGE
	;	STA	COUNT
	;	JSR	TIMEIT
	;	JMP	BACK
;
GREEN0:
GREEN1:
	CMP	#$8C
	BCC	GREEN2
	JMP	BACK
;
GREEN2:
	JSR	FNDCRP
	BPL	GREEN7	; check b7 for crop found
	JMP	BACK
;
GREEN7:
	TAX
	STA	OPPONT
	LDY	COUNT	; did you hit it before ?
	LDA	HITCRP,Y
	BEQ	GREENA
	JMP	BACK
;
GREENA:
	LDA	KNGSTS,X	; can not burn vassals
	AND	#$10
	BEQ	GREEN6
	JMP	BACK
;
GREEN6:
	JSR	MAKEN0	; he is an enemy now
;
	LDY	#0	; lower the crop value
	LDA	(CRPPTR),Y
	CMP	#$89
	BCS	GREEN4
	CMP	#$88
	BEQ	GREENX
	JMP	BACK
;
GREENX:
	LDA	#0
	STA	SAVY
	JMP	GREENY
;
GREEN4:
	PHA
	AND	#$03	; GET PILLAGE INDEX
	STA	SAVY
	PLA
	SEC
	SBC	#$01
GREEN5:
	LDY	#0
	STA	(CRPPTR),Y
	LDY	COUNT
	STA	CRPTYP,Y
;
	DEC	ACTCRP,X
	DEC	ACTCRP,X
	DEC	OUTCRP,X
	DEC	OUTCRP,X
;
GREENY:
	LDY	COUNT		; CAN'T BURN'EM 2WICE
	LDA	#1
	STA	HITCRP,Y
;
	LDY	SAVY
	LDA	PILAGE,Y
	CLC
	ADC	PILCAR
	STA	PILCAR
	LDA	PILCAR+16
	ADC	#0
	STA	PILCAR+16
;
	LDX	OPPONT		; RECORD HISTORY OF
	TYA			; PILLAGES
	ASL	A
	CLC
	ADC	#1
	ADC	HISTRY,X
	STA	HISTRY,X
	BCC	GREENW
	LDA	#$FF
	STA	HISTRY,X
;
GREENW:
	;	LDA	#BURN
	;	STA	COUNT
	;	JSR	TIMEIT
;
	LDA	WEEKLO
	STA	SAVEWK
	LDA	#1
	STA	WEEKFL
	LDA	#$1C
	STA	COLPM0	; TURN CROWN DOT OFF
;
	JSR	DEFART	; DEFENDR DECIDE TO FIGHT
	BCC	GREENZ
	LDA	#128
	STA	FLAGLL
	JSR	ENECRN	; DEF ARMY EXITS CASTLE
	JSR	COLORS
	JMP	SWPBAT	; GOTO BATTLE SCENE
;
GREENZ:
	LDX	OPPONT		; NO DEFENSE MEANS
	LDA	CRPSTG,X	; LOSS OFF CRPSTG
	BEQ	GREENV
	DEC	CRPSTG,X
;
GREENV:
	JSR	KILLEM
	JSR	FIGLOS
;
	LDA	FLDARM
	SEC
	SBC	LOSSES
	BCS	GREENS
	LDA	#0
GREENS:
	STA	FLDARM
;
	LDA	ARMSIZ
	SEC
	SBC	LOSSES
	BCS	GREENR
	LDA	#0
GREENR:
	STA	ARMSIZ
;
	LDA	#40
	STA	LINLEN
	LDX	#12
	LDA	#BRTEXT/256
	STA	PADPTR+1
	LDA	#BRTEXT&255
	STA	PADPTR
;
	LDA	#PSNTXT/256
	STA	CRPPTR+1
	LDA	#PSNTXT&255
	STA	CRPPTR
	LDA	#0
	STA	COUNT
	JSR	PRNTIT
;
	JSR	BSPCE
;
	LDA	#KILTXT/256
	STA	CRPPTR+1
	LDA	#KILTXT&255
	STA	CRPPTR
	LDA	#0
	STA	COUNT
	JSR	PRNTIT
;
	LDA	LOSSES
	STA	NUMBER
	JSR	SHONUM
;
	LDX	OPPONT
	LDA	LIEGE,X		; IF HE IS A VASSAL
	CMP	#$10		; THEN HE MUST RE-CHOOSE
	BCS	GREENU
	LDA	#1
	STA	REVAS,X
;
	TXA			; GET INDEX OF VASSAL-
	ASL	A		; LIEGE RELATIONSHIP
	ASL	A
	ASL	A
	ASL	A
	CLC
	ADC	LIEGE,X
	TAY
;
	LDA	LNGTRM,Y	; VASSAL DISLIKES LIEGE
	SEC			; 8 POINTS LESS
	SBC	#2
	BCS	GREENT
	LDA	#0
GREENT:
	STA	LNGTRM,Y
;
GREENU:
	PLA
	TAY
	PLA
	TAX
	PLA
	LSR	FLAGLL
	RTI
;
;
PILAGE:	DB	1,8,16,24
PSNTXT:	DB	'Peasants',$FF
KILTXT:	DB	'kill',$FF
;
;
RUST:
	STA	HITCLR
	;	JSR	POINTER
	;	CMP	#$C2	; CASTLE
	;	BNE	RUST0
	;	JSR	FNDCAS
	;	BPL	RUST2
	;	JMP	BACK
;
RUST2:
	;	JMP	BACK
;
RUST0:
RUST1:
	;	LDA	#MOUNT
	;	STA	COUNT
	;	JSR	TIMEIT
;
;
BACK:
	JMP	Y60	; CONTINUE PROCESSING
;
;
;
KILLEM:
	LDA	#0
	STA	LOSSES
	LDA	PEASNT
	BEQ	KILL04
;
KILL00:
	LDX	#$0F
	LDA	#0
	STA	KILFLG
;
KILL01:
	STX	KILLX
	LDA	KNTIN,X
	BEQ	KILL03
;
	LDA	KNTCOL,X
	CMP	#$36
	BNE	KILL03
;
	LDA	KNTARM,X
	BEQ	KILL03
	DEC	KNTARM,X
	INC	LOSSES
	INC	KILFLG
	DEC	PEASNT
	BEQ	KILL04
;
KILL03:
	LDX	KILLX
	DEX
	BNE	KILL01
	LDA	KILFLG
	BNE	KILL00
;
KILL04:
	RTS
;
KILLX:	DB	0
KILFLG:	DB	0
;
;
;
COLORS:
	LDA	#$00
	STA	COLOR0
	STA	COLOR1
	STA	COLOR2
	STA	COLOR3
	STA	COLOR4
	STA	COLPM0
	STA	COLPM1
	STA	COLPM2
	STA	COLPM3
	RTS
;
;
TIMEIT:
	;	LDA	TIME
	;	CLC
	;	ADC	COUNT
	;	STA	TIME
	;	LDA	TIME+1
	;	ADC	#00
	;	STA	TIME+1
	RTS
;
;
GETSITE:
	LDA	DLAREA+4	; GET LMS AND ADD OFFSET
	CLC
	ADC	#$FC
	STA	SAVL
	LDA	DLAREA+5
	ADC	#$00
	STA	SAVH
;
	LDA	XPOSL	; IF TOO FAR LEFT, SUB 1
	AND	#$07
	CMP	#$05
	BCC	GET00	; 0-4 ARE GOOD
	LDA	SAVL
	SEC
	SBC	#$01
	STA	SAVL
	LDA	SAVH
	SBC	#$00
	STA	SAVH
;
GET00:
	LDA	YPOSL	; IF TOO FAR UP, ADD $30
	AND	#$0F
	CMP	#$05
	BCC	GET01	; 0-5 ARE GOOD
	BNE	GET02
	LDA	XPOSL
	AND	#$07
	CMP	#$04
	BNE	GET01
;
GET02:
	LDA	SAVL
	CLC
	ADC	#$30
	STA	SAVL
	LDA	SAVH
	ADC	#$00
	STA	SAVH
;
GET01:
	RTS
;
;
POINTER:	; stes up pointer to collision
	STA	HITCLR
POINT0:	JSR	GETSITE
	LDA	SAVL
	STA	CRPPTR
	LDA	SAVH
	STA	CRPPTR+1
	LDY	#0
	LDA	(CRPPTR),Y
	RTS
;
;
MAKENE:
	TAX
MAKEN0:
	LDA	KNGSTS,X
	AND	#$0F
	ORA	#$80	; make him Arthur's enemy
	STA	KNGSTS,X
;
	LDA	TRBTOR,X	; IF HE PAID TRIBUTE
	BNE	MAKEN1		; TO ARTHUR, TURN IT
	LDA	#00		; OFF
	STA	TRIBUT,X
	LDA	#$10
	STA	TRBTOR,X
;
MAKEN1:
	TXA
	ASL	A
	ASL	A
	ASL	A
	ASL	A
	TAY
;
	LDA	KNGSTS,Y
	AND	#$0F
	ORA	#$80	; make Arthur his enemy
	STA	KNGSTS,Y
;
	RTS
;
;
ENECRN:
		; MAKE ENEMY CROWN PASS FROM
		; DEFENDING CASTLE TO ARTHUR
		; X HAS INDEX OF ENEMY CASTLE
		; XPOSL, XPOSH, YPOSL, YPOSH
		; SHOW WHERE ARTHUR IS
;
	LDA	#$88		; THE SWORD IS BLUE
	STA	COLPM3
	LDX	#127		; ERASE PLAYER 3
	LDA	#00		; AND MOVE IT OFF SCREEN
	STA	HPOSP3
ENECR6:
	STA	P3,X
	DEX
	BNE	ENECR6
;
	LDX	OPPONT
	LDA	XLOLST,X
	STA	XLOSAV
	LDA	XHILST,X
	STA	XHISAV
;
	LDA	YLOLST,X
	STA	YLOSAV
	LDA	YHILST,X
	STA	YHISAV
;
	LDA	XPOSH
	CMP	XHISAV
	BCC	XMINUS
	BNE	XPLUS
;
	LDA	XPOSL
	CMP	XLOSAV
	BCC	XMINUS
	BNE	XPLUS
;
XNIL:
	LDA	#$00
	JMP	XMIN0
;
XMINUS:
	LDA	#$FF
XMIN0:
	STA	XHIINC
	STA	XLOINC
	JMP	ENECR0
;
XPLUS:
	LDA	#$00
	STA	XHIINC
	LDA	#$01
	STA	XLOINC
;
ENECR0:
	LDA	YPOSH
	CMP	YHISAV
	BCC	YMINUS
	BNE	YPLUS
;
	LDA	YPOSL
	CMP	YLOSAV
	BCC	YMINUS
	BNE	YPLUS
;
YNIL:
	LDA	#$00
	JMP	YMIN0
;
YMINUS:
	LDA	#$FF
YMIN0:
	STA	YHIINC
	STA	YLOINC
	JMP	ENECR1
;
YPLUS:
	LDA	#$00
	STA	YHIINC
	LDA	#$01
	STA	YLOINC
;
ENECR1:
	JSR	DISCRN
;
	LDA	#0
	STA	XFL
	STA	YFL
;
	LDA	XPOSL
	CMP	XLOSAV
	BNE	ENECR2
	LDA	XPOSH
	CMP	XHISAV
	BEQ	ENECR3
;
ENECR2:
	LDA	XLOSAV
	CLC
	ADC	XLOINC
	STA	XLOSAV
	LDA	XHISAV
	ADC	XHIINC
	STA	XHISAV
	LDA	#1
	STA	XFL
;
ENECR3:
	LDA	YPOSL
	CMP	YLOSAV
	BNE	ENECR4
	LDA	YPOSH
	CMP	YHISAV
	BEQ	ENECR5
;
ENECR4:
	LDA	YLOSAV
	CLC
	ADC	YLOINC
	STA	YLOSAV
	LDA	YHISAV
	ADC	YHIINC
	STA	YHISAV
	LDA	#1
	STA	YFL
;
ENECR5:
	LDA	XFL
	ORA	YFL
	BNE	ENECR1
	RTS
;
;
XLOSAV:	DB	0
XHISAV:	DB	0
YLOSAV:	DB	0
YHISAV:	DB	0
XLOINC:	DB	0
XHIINC:	DB	0
YLOINC:	DB	0
YHIINC:	DB	0
XFL:	DB	0
YFL:	DB	0
XLOWRK:	DB	0
XHIWRK:	DB	0
YLOWRK:	DB	0
YHIWRK:	DB	0
;
;
DISCRN:
		; DISPLAYS BLUE ENEMY CROWN
		; RELATIVE TO POSITION OF ARTHUR
	LDA	YFL
	BEQ	NOY
;
	LDA	YPOSL
	SEC
	SBC	YLOSAV
	STA	YLOWRK
	LDA	YPOSH
	SBC	YHISAV
	STA	YHIWRK
	BMI	DDNCRN
;
DUPCRN:
	LSR	YLOWRK
	LDA	#56
	SEC
	SBC	YLOWRK
	STA	YLOWRK
	BCC	NOY	; NOT WAY OFF TOP
	JMP	DMKCRN
;
DDNCRN:
	LDA	YLOWRK
	EOR	#$FF
	CLC
	ADC	#1
	LSR	A
	CLC
	ADC	#56
	STA	YLOWRK
	BCS	NOY	; NOT WAY OFF BOTTOM
;
DMKCRN:
	CMP	#14	; NOT TOO HIGH
	BCC	NOY
	CMP	#90	; NOT TOO LOW
	BCS	NOY
;
	TAX
	LDA	#0
	STA	P3,X
	INX
	LDY	#0
DMKCR2:
	LDA	[NORTH+$20],Y	; SWORD SHAPE IN
	STA	P3,X		; CHAR SET
	INX
	INY
	CPY	#8
	BNE	DMKCR2
;
NOY:
	LDA	XFL
	BEQ	NOX
;
	LDA	XPOSL
	SEC
	SBC	XLOSAV
	STA	XLOWRK
	LDA	XPOSH
	SBC	XHISAV
	STA	XHIWRK
	BMI	DLTCRN
;
DRTCRN:
	LDA	#127
	CLC
	ADC	XLOWRK
	STA	XLOWRK
	BCS	NOX	; NOT WAY OFF RIGHT
	JMP	DPSCRN
;
DLTCRN:
	LDA	XLOWRK
	EOR	#$FF
	CLC
	ADC	#1
	STA	XLOWRK
	LDA	#127
	SEC
	SBC	XLOWRK
	STA	XLOWRK
	BCC	NOX	; NOT WAY OFF LEFT
;
DPSCRN:
	LDA	XLOWRK
	STA	HPOSP3
;
NOX:
	LDX	#12
	JSR	PAUSIT
	RTS
;
;
PAUSIT:
	LDY	#255
PAUS00:
	ROR	TIMP1
	ROL	TIMP1
	DEY
	BNE	PAUS00
	DEX
	BNE	PAUSIT
	RTS
;
;

;DEFSIM VERSION 0  APRIL 4, 1983
;
;DEFART simulator for EXCALIBUR
;
;formulae: given that BIGARM is the
;size of the bigger army,
;and that SMLARM is the size of the
;smaller army, and that
;BIGLOS and SMLLOS are their respective losses, then
;
;BIGLOS=(.5*(SMLARM/BIGARM)**2)*SMLARM
;SMLLOS=(.5*(SMLARM/BIGARM)**2)*BIGARM
;
;Note that the attacking army will lose
;one man-at-arms for every eight defending peasants.
;
;We randomize the above formulae by
;replacing the leading coefficient
;(.5) with the term:
;(.25+RND/2)
;where RND is a random number between
;zero and one.
;adjustment to work with 8-bit-words
;is already in the code.
;
;
;
;internal variables
ATKARM	ORG	*+1	;attacker army size
DEFARM	ORG	*+1	;defender army size
SMLARM	ORG	*+1	;smaller army size
BIGARM	ORG	*+1	;bigger army size
BIGKNG	ORG	*+1	;bigger king
SMLKNG	ORG	*+1	;smaller king
BIGLOS	ORG	*+1	;bigger army's loss
SMLLOS	ORG	*+1	;smaller army's loss
PEASNT	ORG	*+1	;number of peasants
RATSQD	ORG	*+1	;(SMLARM/BIGARM)**2
BIGFNL	ORG	*+1	;final size of bigger army
SMLFNL	ORG	*+1	;final size of smaller army
SAVKNT	ORG	*+1	; TEMP VALUE
;
;
DEFART:
	LDA	FLDKNT
	STA	SAVKNT
	CLC
	ADC	FLDARM
	STA	ATKARM
;
	JSR	FIGXTM
	JSR	FIGPST
;
	LDA	ATKARM
	SEC
	SBC	PEASNT
	BCS	Z09
	LDA	#0
Z09	STA	ATKARM	;peasants take their toll first
;
	LDX	OPPONT
	LDA	HOMARM,X
	CLC
	ADC	HOMKNT,X
	STA	DEFARM	;defender's army size
	LDA	LIEGE,X
	CMP	#$10
	BCS	Z00	;leigelord contribution
	TAY
	LDA	HOMARM,Y
	LSR	A
	ADC	DEFARM
	BCC	Z01
	LDA	#$FF
Z01	STA	DEFARM
;
Z00
	LDX	OPPONT
	LDA	RANDOM
	AND	#$7F
	CLC
	ADC	KGAVE,X
	STA	FRAC
	LDA	DEFARM
	JSR	FRCT1B
	STA	DEFARM
;
	LDA	RANDOM
	AND	#$7F
	CLC
	ADC	KGAVE
	STA	FRAC
	LDA	ATKARM
	JSR	FRCT1B
	STA	ATKARM
;
	LDA	DEFARM
	LDY	#0
	STY	SMLKNG	;assume for now that attacker is smaller
	LDY	OPPONT
	LDX	ATKARM
	CMP	ATKARM
	BCS	Z02
;
	TXA
	LDX	DEFARM
	LDY	OPPONT
	STY	SMLKNG	;actually, defender is smaller
	LDY	#0
;
Z02	STA	BIGARM
	STX	SMLARM
	STY	BIGKNG
;
	STX	PRDHI
	STA	DIVSR
	LDA	#0
	STA	PRDLO
	JSR	DIVIDE	;SMLARM/BIGARM
	LDA	PRDLO
	STA	MLTPR
	STA	DIVSR
	JSR	MULTPY	;(SMLARM/BIGARM)**2
	LDA	PRDHI
	STA	RATSQD
	STA	MLTPR
	LDA	RANDOM
	LSR	A
	CLC
	ADC	#$40
	STA	DIVSR
	JSR	MULTPY	;(.25+RND/2)*(SMLARM/BIGARM)**2
	LDA	PRDHI
	STA	MLTPR
	LDA	SMLARM
	STA	DIVSR
	JSR	MULTPY	;((.25+RND/2)*(SMLARM/BIGARM)**2)*SMLARM
	LDA	PRDHI
	STA	BIGLOS
;
	LDA	RANDOM
	LSR	A
	CLC
	ADC	#$40
	STA	MLTPR
	LDA	RATSQD
	STA	DIVSR
	JSR	MULTPY	;(.25+RND/2)*(SMLARM/BIGARM)**2
	LDA	PRDHI
	STA	MLTPR
	LDA	BIGARM
	STA	DIVSR
	JSR	MULTPY	;BIGARM*(.25+RND/2)*(SMLARM/BIGARM)**2
	LDA	PRDHI
	STA	SMLLOS
;
;determine who has the largest final army
;that king wins the battle
;
	LDA	BIGARM
	SEC
	SBC	BIGLOS
	STA	BIGFNL
	LDA	SMLARM
	SEC
	SBC	SMLLOS
	STA	SMLFNL
;
;(no, neither computation can roll under)
;
	LDA	SMLKNG
	BNE	Z03
	LDA	BIGFNL
	CMP	SMLFNL
	BCC	Z07
	RTS
;
Z07:
	LDA	BIGLOS
	STA	DEFLOS
	LDA	SMLLOS
	STA	ATKLOS
	JMP	Z04
;
Z03:
	LDA	SMLFNL
	CMP	BIGFNL
	BCC	Z08
	RTS
;
Z08:
	LDA	BIGLOS
	STA	ATKLOS
	LDA	SMLLOS
	STA	DEFLOS
;
Z04:
	LSR	PEASNT
	LDA	ATKLOS
	CLC
	ADC	PEASNT
	BCC	Z06
	LDA	#$FF
Z06:
	SEC
	SBC	DEFLOS
	BCS	Z05
	LDA	#0
Z05:
	CMP	#3
	RTS
;
DEFLOS:	DB	0
ATKLOS:	DB	0
;
;
;
DIVIDE:
	LDY	#16
	LDA	#0
	STA	MLTPR
;
DIVZ00:
	ASL	PRDLO
	ROL	PRDHI
	ROL	MLTPR
	BCC	DIVZ01
	LDA	MLTPR
	SBC	DIVSR
	JMP	DIVZ02
;
DIVZ01:
	LDA	MLTPR
	SEC
	SBC	DIVSR
	BCC	DIVZ03
;
DIVZ02:
	STA	MLTPR
	INC	PRDLO
;
DIVZ03:
	DEY
	BNE	DIVZ00
	RTS
;
;
MULTPY	LDA	#0
	STA	PRDLO
	STA	PRDHI
	STA	TZMP1
LOOP05	LSR	DIVSR
	BCC	X07
	LDA	PRDLO
	CLC
	ADC	QUOTN
	STA	PRDLO
	LDA	PRDHI
	ADC	TZMP1
	STA	PRDHI
X07	LDA	DIVSR
	BEQ	X08
	ASL	QUOTN
	ROL	TZMP1
	BCC	LOOP05
X08	RTS
;
;
;
;
;
;
FIGPST:
	LDY	OPPONT
	LDA	ACTCRP,Y
	STA	PRDLO
	LDA	#0
	STA	PRDHI
	LDA	EXPTMH
	STA	TYMP2
	LDA	EXPTML
;**	LSR	TYMP2
;**	ROR	A
	LSR	TYMP2
	BEQ	X64
	SEC
	LDA	#$FF
X64	ROR	A
	STA	DIVSR
	JSR	DIVIDE
	LDY	PRDLO
	INY	;guarantees at least one casualty
	LDA	#0
	STA	PEASNT
	LDA	ATKARM
	STA	TYMP3
Y26:
	LDA	TYMP3
	CMP	SAVKNT
	BCC	Y27
	BEQ	Y27
	DEC	TYMP3
	INC	PEASNT
	DEY
	BNE	Y26
Y27:
	RTS
;
TYMP2:	DB	0
TYMP3:	DB	0
;
;
;
FIGXTM:
				; FIGURES EXPERIENCE
	LDA	ARMEXP	; PER MAA FOR ARTHUR
	STA	PRDLO
	LDA	ARMEXP+16
	STA	PRDHI
	LDA	ARMSIZ
	STA	DIVSR
	JSR	DIVIDE
	LDA	PRDHI
	STA	EXPTMH
	LDA	PRDLO
	STA	EXPTML
	RTS
;
EXPTML:	DB	0
EXPTMH:	DB	0
;
;
;
KGLDR:				; NOT USED AT PRESENT
	;	DB	$7F,$20,$60,$10
	;	DB	$7F,$50,$20,$70
	;	DB	$40,$30,$60,$10
	;	DB	$70,$30,$50,$20
;
;
KGLOYT:				; NOT USED AT PRESENT
	;	DB	$7F,$30,$40,$70
	;	DB	$60,$10,$20,$50
	;	DB	$60,$40,$40,$10
	;	DB	$50,$60,$20,$70
;
;
KGAVE:				; AVERAGE OF 2 ASPECTS
	DB	$78,$38,$50,$10		; ($80-KGLOYT)
	DB	$40,$60,$40,$50		; + KGLDR
	DB	$30,$38,$50,$40		; SO ABSTRACT
	DB	$60,$28,$58,$48		; CAN BE REAL
;
;
;
FRCT1B:
	; A    = 1 BYTE TO BE REDUCED
	; FRAC = FRACTION TO USE
	; RETURNS RESULT IN A
	LDY	FRAC
	CPY	#$FF
	BNE	FRCT01
	RTS
;
FRCT01:
	STA	SAVA
	LDA	#$80
	STA	MASK
	LDA	#0
	STA	RESULT
;
FRCT03:
	LSR	SAVA
	LDA	MASK
	BIT	FRAC
	BEQ	FRCT02
	LDA	SAVA
	CLC
	ADC	RESULT
	STA	RESULT
FRCT02:
	LSR	MASK
	BCC	FRCT03
	LDA	RESULT
	RTS
;
MASK:	DB	0
RESULT:	DB	0
SAVA:	DB	0
FRAC:	DB	0
;
;
;
FIGLOS:
	JSR	FIGXTM
	LDA	EXPTML
	STA	MLTPR
	LDA	LOSSES
	STA	DIVSR
	JSR	MULTPY
;
	LDA	ARMEXP
	SEC
	SBC	PRDLO
	STA	ARMEXP
	LDA	ARMEXP+16
	SBC	PRDHI
	BCS	FIGL00
	LDA	#0
	STA	ARMEXP
FIGL00:
	STA	ARMEXP+16
	RTS
;
LOSSES:	DB	0
;
;
;
; FILE BIRD.ASM
;
VBIRD:
	LDA	FLAGLL
	BPL	VBIRD0
	JMP	XITVBV
;
VBIRD0:
	LDA	#128
	STA	FLAGLL
	LDA	SELFLG
	BEQ	VBD1
;
VBD5:
	LDA	CONSOL
	CMP	#7
	BNE	VBD5
;
	JSR	PAUSDL
	LDA	#0
	STA	SELFLG
	JMP	VBDOUT
;
VBD1:
	LDA	DANGER
	BEQ	VBD3
	LDA	CNTDWN
	BEQ	DANGBD
	DEC	CNTDWN
	BNE	VBD3
;
DANGBD:
	LDA	COLPM1
	EOR	#$04
	STA	COLPM1
	STA	COLPM2
	LDA	#FLRATE
	STA	CNTDWN
;
VBD3:
	LDA	CONSOL	; SAVE STATE OF GAME
	CMP	#3
	BNE	VBD4
;
	LDX	#XITVBV/256
	LDY	#XITVBV&255
	LDA	#7
	JSR	SETVBV
;
	PLA
	PLA
	PLA
	PLA
	PLA
	PLA
	JMP	SWPZED
;
;
VBD4:
	CMP	#5
	BNE	VBD2
	LDA	#$FF
	STA	SELFLG
;
VBD2:
	LDA	NAMCNT
	BEQ	VBIRD2
	DEC	NAMCNT
	LDA	NAMCNT
	BNE	VBIRD2
	JSR	CLRTXT
	LDA	#16
	STA	NAMIND
;
VBIRD2:
	LDA	RTCLKL
	TAX
	ADC	#$01
	STA	SAVL
	TXA
	AND	#$1E
	LSR	A
	DEC	SAVL
	BMI	VBD01
	JSR	UPSTS
	JMP	VBD02
;
VBD01:
	JSR	UPCRP
	JSR	DISCRP
;
VBD02:
	LDA	M3PF
	AND	#$0F
	BEQ	VBD03
	JMP	TBIRD	; ALL COLLISIONS TREATED THE SAME
;
VBD03:
	LDA	P0PF
	AND	#$02
	BEQ	VBD04
	JSR	POINT0
	AND	#$0F
	CMP	#$04	; IS IT AN ARMY ?
	BEQ	VBD05	; COLLISION AGAINST JEWEL
			; MEANS AN ATTACKING ARMY, GO BACK
;
VBD04:
	LDA	P3PL	; WHEN BIRD HITS CROWN IT
	BEQ	VBD06	; BECOMES JEWEL AGAIN
;
VBD05:
	LDA	#128
	STA	FLAGLL
	STA	HITCLR
	JSR	BIRDOF
	JSR	CLRTXT
	LDX	#VBISR/256
	LDY	#VBISR&$FF
	LDA	#7
	JSR	SETVBV
	LDA	#$C0
	STA	NMIEN
	LDA	#$2E
	STA	SDMCTL
	LDA	RTCLKL
	ADC	#32
	STA	TIMSCL
	JMP	VBDOUT
;
VBD06:
	LDA	STICK
	CMP	#$0F
	BNE	VBD08
	LDA	#10
	STA	DELAY
	CLC
	ADC	RTCLKL
	STA	TIMSCL
;
VBD07:	JMP	NXTFRM
;
VBD08:
	LDA	#1
	STA	ATRACT
	LDA	TIMSCL
	CMP	RTCLKL
	BNE	VBD07
	LDA	DELAY
	CMP	#1
	BEQ	VBD09
	SEC
	SBC	#1
	STA	DELAY
;
VBD09:
	CLC
	ADC	RTCLKL
	STA	TIMSCL
;
VBD10:
	LDA	#$0F
	STA	LASTSK
	LDA	STICK	; FAST CURSOR CODE
	AND	#4
	BNE	VBD11
	LDA	#$07
	AND	LASTSK
	STA	LASTSK
	DEC	BPOS	; LEFT ?
	LDA	BPOS
	CMP	#45
	BNE	VBD12
	INC	BPOS
	JMP	VBD12
;
VBD11:
	LDA	STICK	; FAST CURSOR CODE
	AND	#8
	BNE	VBD12
	LDA	#$0B
	AND	LASTSK
	STA	LASTSK
	INC	BPOS	; RIGHT ?
	LDA	BPOS
	CMP	#205
	BNE	VBD12
	DEC	BPOS
;
VBD12:
	LDA	STICK	; FAST CURSOR CODE
	LSR	A
	BCS	VBD13
	LDA	#$0D
	AND	LASTSK
	STA	LASTSK
	DEC	BHITE	; UP ?
	LDA	BHITE
	CMP	#14
	BNE	NXTFRM
	INC	BHITE
	JMP	NXTFRM
;
VBD13:
	LDA	STICK	; FAST CURSOR CODE
	LSR	A
	LSR	A
	BCS	NXTFRM
	LDA	#$0E
	AND	LASTSK
	STA	LASTSK
	INC	BHITE	; DOWN ?
	LDA	BHITE
	CMP	#90
	BNE	NXTFRM
	DEC	BHITE
;
NXTFRM:
	LDA	RTCLKL
	AND	#$03
	BNE	VBD14
	INC	FRAME
;
VBD14:
	LDA	BPOS
	STA	HPOSP3
	CLC
	ADC	#3
	STA	HPOSM3
;
	LDA	FRAME
	AND	#$0F
	ASL	A
	ASL	A
	ASL	A
	TAX
	LDA	BHITE
	TAY
	LDA	BIRD,X
	STA	P3,Y
	LDA	BIRD+1,X
	STA	P3+1,Y
	LDA	BIRD+2,X
	STA	P3+2,Y
	LDA	BIRD+3,X
	STA	P3+3,Y
	LDA	BIRD+4,X
	STA	P3+4,Y
	LDA	BIRD+5,X
	STA	P3+5,Y
	LDA	BIRD+6,X
	STA	P3+6,Y
	LDA	BIRD+7,X
	STA	P3+7,Y
;
	LDA	#0
	STA	MISSLE+2,Y
	STA	MISSLE+4,Y
	LDA	#$AA
	STA	MISSLE+3,Y
;
VBDOUT:
	PLA
	TAY
	PLA
	TAX
	PLA
	LSR	FLAGLL	; THIS WON'T HURT IF OFF
	RTI
;
;
TBIRD:
	LDA	#128
	STA	FLAGLL
	JSR	BRDPNT
	AND	#$0F
	CMP	#$02	; CASTLE
	BNE	TBIRD1
	JSR	FNDCAS
	BPL	TBIRD3
TBIRD1:	JMP	VBD03
;
TBIRD3:
	CMP	NAMIND
	BNE	TBIRD5
	LDA	#64
	STA	NAMCNT
	JMP	VBD03
;
TBIRD5:
	DEC	MAGIC		; WEAKEN MERLIN
;
	STA	NAMIND
	JSR	CLRTXT
	LDA	NAMIND
	TAX
	LDA	NMSLEN,X
	STA	COUNT
	LDA	#NAMES/256
	STA	CRPPTR+1
	LDA	#NAMES&$FF
	STA	CRPPTR
;
	LDA	#40
	STA	LINLEN
	LDA	#BRTEXT/256
	STA	PADPTR+1
	LDA	#BRTEXT&$FF
	STA	PADPTR
;
	LDX	NAMIND
	LDA	HOMARM,X
	STA	NUMBER
;
	LDA	LIEGE,X
	CMP	#$10
	BCC	TBIRD6
	LDX	#8
	LDA	#'K'
	JSR	CALIG
	LDA	#'i'
	JSR	CALIG
	LDA	#'n'
	JSR	CALIG
	LDA	#'g'
	JSR	CALIG
	JMP	TBIRD7
;
TBIRD6:
	JSR	ADDLEG		; ADD LIEGE LOAN 
	LDX	#8
	LDA	#'V'
	JSR	CALIG
	LDA	#'a'
	JSR	CALIG
	LDA	#'s'
	JSR	CALIG
	LDA	#'s'
	JSR	CALIG
	LDA	#'a'
	JSR	CALIG
	LDA	#'l'
	JSR	CALIG
;
TBIRD7:
	JSR	SPACE
;
TBIRD4:
	JSR	PRNTIT
;
TBIRD8:
	JSR	SHONUM		; DISPLAY DEF ARMY SIZE
	LDA	#64
	STA	NAMCNT
	LDA	RTCLKL
	ADC	#$10
	STA	TIMSCL
	JMP	VBD10
;
NUMBER:	DB	0
DIGITS:	DB	0,0,0
;
;
;
PRNTIT:
	LDY	COUNT
	LDA	(CRPPTR),Y
	CMP	#$FF
	BEQ	PRNT00
	JSR	CALIG
	INC	COUNT
	JMP	PRNTIT
;
PRNT00:
	RTS
;
;
;
BSPCE:
	INX
	INX
	INX
	INX
SPACE:
	INX
	INX
	INX
	INX
	INX
	INX
	RTS
;
;
;
BIRDON:
	LDA	#$1C
	STA	COLPM0	; JEWEL IN CROWN
	LDA	#$00		; #$0E
	STA	COLPM3	; BIRD COLOR
	LDA	#48
	STA	BHITE
	LDA	#129
	STA	BPOS
	LDA	#0
	STA	FRAME
	RTS
;
;
BIRDOF:
	LDA	#$84
	STA	COLPM0
	LDA	#$1C
	STA	COLPM3
	LDA	#0
	STA	HPOSP3
	STA	HPOSM3
;
	LDX	#40
BRDOF0:
	STA	P3,X
	STA	MISSLE,X
	INX
	CPX	#80
	BNE	BRDOF0
	RTS
;
;
ADDLEG:
	LDX	NAMIND
	LDA	LIEGE,X
	STA	ADDTMP
	TXA
	ASL	A
	ASL	A
	ASL	A
	ASL	A
	CLC
	ADC	ADDTMP
	TAX
	LDY	DIST,X
	LDA	FRCDST,Y
	STA	FRAC
;
	LDY	ADDTMP
	LDA	HOMARM,Y
	JSR	FRCT1B
	CLC
	ADC	NUMBER
	BCC	ADDL00
	LDA	#$FF
;
ADDL00:
	STA	NUMBER
	RTS
;
ADDTMP:	DB	0
;
;
;
SHONUM:
	JSR	DIGCHR
;
	LDA	#40
	STA	LINLEN
	LDA	#[BRTEXT+[1*40]-9]/256
	STA	PADPTR+1
	LDA	#[BRTEXT+[1*40]-9]&255
	STA	PADPTR
	LDX	#4
;
	LDA	DIGITS
	CMP	#$7B
	BEQ	SHON00
	JSR	CALIG
	JMP	SHON01
;
SHON00:
	LDX	#16
SHON01:
	LDA	DIGITS+1
	CMP	#$7B
	BEQ	SHON03
SHON02:
	JSR	CALIG
	JMP	SHON04
;
SHON03:
	LDA	DIGITS
	CMP	#$7B
	BNE	SHON02
	LDX	#32
;
SHON04:
	LDA	DIGITS+2
	JSR	CALIG
	RTS
;
;
;
DIGCHR:
	LDX	#$7B
	STX	DIGITS
	STX	DIGITS+1
	STX	DIGITS+2
;
DIGC00:
	LDA	NUMBER
	CMP	#100
	BCC	DIGC01
	INC	DIGITS
	SEC
	SBC	#100
	STA	NUMBER
	JMP	DIGC00
;
DIGC01:
	LDA	NUMBER
	CMP	#10
	BCC	DIGC02
	INC	DIGITS+1
	SEC
	SBC	#10
	STA	NUMBER
	JMP	DIGC01
;
DIGC02:
	LDA	NUMBER
	CLC
	ADC	#$7B
	STA	DIGITS+2
	RTS
;
;
;
CLRTXT:
	LDX	#0
	LDA	#0
CLR01:
	STA	BRTEXT,X
	STA	BRTEXT+[1*256],X
	STA	BRTEXT+[2*256],X
	STA	BRTEXT+[3*256],X
	STA	BRTEXT+[4*256],X
	INX
	BNE	CLR01
	RTS
;
;
BRDPNT:
	STA	HITCLR
	LDA	DLAREA+4
	STA	SAVL
	LDA	DLAREA+5
	STA	SAVH
;
	LDA	XPOSL
	AND	#$07
	STA	L30
	LDA	BPOS
	SEC
	SBC	L30
	SEC
	SBC	#$1D
	LSR	A
	LSR	A
	LSR	A
	STA	L30
;
	LDA	YPOSL
	AND	#$0F
	LSR	A
	STA	H30
	LDA	BHITE
	CLC
	ADC	H30
	SEC
	SBC	#$0C
	LSR	A
	LSR	A
	LSR	A
	ASL	A
	TAX
	LDA	L30
	CLC
	ADC	MULT30,X
	STA	L30
	LDA	MULT30+1,X
	ADC	#0
	STA	H30
;
	LDA	SAVL
	CLC
	ADC	L30
	STA	SAVL
	LDA	SAVH
	ADC	H30
	STA	SAVH
;
	LDA	SAVL
	STA	CRPPTR
	LDA	SAVH
	STA	CRPPTR+1
	LDY	#0
	LDA	(CRPPTR),Y
	RTS
;
;
MULT30:
	DW	[0*$30]
	DW	[1*$30]
	DW	[2*$30]
	DW	[3*$30]
	DW	[4*$30]
	DW	[5*$30]
	DW	[6*$30]
	DW	[7*$30]
	DW	[8*$30]
	DW	[9*$30]
	DW	[10*$30]
	DW	[11*$30]
	DW	[12*$30]
	DW	[13*$30]
	DW	[14*$30]
	DW	[15*$30]
	DW	[16*$30]
	DW	[17*$30]
	DW	[18*$30]
	DW	[19*$30]
	DW	[20*$30]
	DW	[21*$30]
	DW	[22*$30]
	DW	[23*$30]
	DW	[24*$30]
	DW	[25*$30]
	DW	[26*$30]
	DW	[27*$30]
	DW	[28*$30]
	DW	[29*$30]
	DW	[30*$30]
	DW	[31*$30]
	DW	[32*$30]
	DW	[33*$30]
	DW	[34*$30]
	DW	[35*$30]
	DW	[36*$30]
	DW	[37*$30]
	DW	[38*$30]
	DW	[39*$30]
	DW	[40*$30]
	DW	[41*$30]
	DW	[42*$30]
	DW	[43*$30]
	DW	[44*$30]
	DW	[45*$30]
	DW	[46*$30]
	DW	[47*$30]
	DW	[48*$30]
	DW	[49*$30]
	DW	[50*$30]
	DW	[51*$30]
	DW	[52*$30]
	DW	[53*$30]
	DW	[54*$30]
	DW	[55*$30]
	DW	[56*$30]
	DW	[57*$30]
	DW	[58*$30]
	DW	[59*$30]
	DW	[60*$30]
	DW	[61*$30]
	DW	[62*$30]
	DW	[63*$30]
	DW	[64*$30]
	DW	[65*$30]
	DW	[66*$30]
	DW	[67*$30]
	DW	[68*$30]
	DW	[69*$30]
	DW	[70*$30]
	DW	[71*$30]
	DW	[72*$30]
	DW	[73*$30]
	DW	[74*$30]
	DW	[75*$30]
	DW	[76*$30]
	DW	[77*$30]
	DW	[78*$30]
	DW	[79*$30]
	DW	[80*$30]
	DW	[81*$30]
	DW	[82*$30]
	DW	[83*$30]
	DW	[84*$30]
	DW	[85*$30]
	DW	[86*$30]
	DW	[87*$30]
	DW	[88*$30]
	DW	[89*$30]


;
;
NAMES:
NM0:	DB	'Arthur',$FF
NM1:	DB	'Augusel',$FF
NM2:	DB	'Uryens',$FF
NM3:	DB	'Lot',$FF
NM4:	DB	'Idres',$FF
NM5:	DB	'Colgrin',$FF
NM6:	DB	'Baldulf',$FF
NM7:	DB	'Garwin',$FF
NM8:	DB	'Sater',$FF
NM9:	DB	'Penda',$FF
NMA:	DB	'Pellinore',$FF
NMB:	DB	'Cheldric',$FF
NMC:	DB	'Hengist',$FF
NMD:	DB	'Horsa',$FF
NME:	DB	'Royns',$FF
NMF:	DB	'Hoel',$FF
;
;
NMSLEN:
	DB	0
	DB	[NM1-NM0]&$FF
	DB	[NM2-NM0]&$FF
	DB	[NM3-NM0]&$FF
	DB	[NM4-NM0]&$FF
	DB	[NM5-NM0]&$FF
	DB	[NM6-NM0]&$FF
	DB	[NM7-NM0]&$FF
	DB	[NM8-NM0]&$FF
	DB	[NM9-NM0]&$FF
	DB	[NMA-NM0]&$FF
	DB	[NMB-NM0]&$FF
	DB	[NMC-NM0]&$FF
	DB	[NMD-NM0]&$FF
	DB	[NME-NM0]&$FF
	DB	[NMF-NM0]&$FF
;
;
BIRD:
	; ************
	DB	0
	DB	102
	DB	219
	DB	129
	DB	0
	DB	0
	DB	0
	DB	0
	; ************
	DB	0
	DB	102
	DB	219
	DB	129
	DB	0
	DB	0
	DB	0
	DB	0
	; ************
	DB	0
	DB	126
	DB	219
	DB	16
	DB	0
	DB	0
	DB	0
	DB	0
	; ************
	DB	0
	DB	102
	DB	219
	DB	24
	DB	0
	DB	0
	DB	0
	DB	0
	; ************
	DB	0
	DB	231
	DB	126
	DB	24
	DB	0
	DB	0
	DB	0
	DB	0
	; ************
	DB	0
	DB	195
	DB	102
	DB	60
	DB	24
	DB	0
	DB	0
	DB	0
	; ************
	DB	0
	DB	66
	DB	102
	DB	102
	DB	60
	DB	24
	DB	0
	DB	0
	; ************
	DB	0
	DB	36
	DB	36
	DB	36
	DB	24
	DB	24
	DB	0
	DB	0
	; ************
	DB	0
	DB	40
	DB	40
	DB	40
	DB	40
	DB	16
	DB	16
	DB	0
	; ************
	DB	0
	DB	40
	DB	40
	DB	40
	DB	40
	DB	16
	DB	16
	DB	0
	; ************
	DB	0
	DB	36
	DB	36
	DB	36
	DB	24
	DB	24
	DB	0
	DB	0
	; ************
	DB	0
	DB	66
	DB	102
	DB	102
	DB	24
	DB	24
	DB	0
	DB	0
	; ************
	DB	0
	DB	195
	DB	102
	DB	60
	DB	24
	DB	0
	DB	0
	DB	0
	; ************
	DB	0
	DB	231
	DB	126
	DB	24
	DB	0
	DB	0
	DB	0
	DB	0
	; ************
	DB	0
	DB	102
	DB	219
	DB	24
	DB	0
	DB	0
	DB	0
	DB	0
	; ************
	DB	0
	DB	126
	DB	219
	DB	16
	DB	0
	DB	0
	DB	0
	DB	0


	LIST	L,I
	INCLUDE	D2:EQUATE.DAT
;
	LIST	L,I
	INCLUDE	D2:SAVE.ASM
;
	END
	LIST	L,I
	INCLUDE	D2:EQUATE.DAT
;
	LIST	L,I
	INCLUDE	D2:BRITAIN.ASM
;
	LIST	L,I
	INCLUDE	D2:COLL.ASM
;
	LIST	L,I
	INCLUDE	D2:DEFSIM.ASM
;
	LIST	L,I
	INCLUDE	D2:UPDATE.ASM
;
	LIST	L,I
	INCLUDE	D2:BIRD.ASM
;
	LIST	L,I
	INCLUDE	D4:DISTANCE.ASM
;
	END
; NEWSGEN                 NOV 8, 1982
;
; THIS WILL SCROLL NEWS IN THE
; THRONE ROOM OF THE CAMELOT MODULE
;
; THIS FILE IS INCLUDED INTO THE
; CAMELOT MODULE
;
; THE NEWS SCROLLING IS PERFORMED
; VIRTUAL VBI.
;
; THE NEWS IS CYCLED INFINITELY UNTIL
; THE USER TELLS IT TO STOP WITH A
; VERTICAL JOYSTICK MOVEMENT
;
; PRESSING THE RED BUTTON BRINGS IN
; THE NEXT PIECE OF NEWS, IF ANY.
; IF THERE IS NONE, THE USER AUTO-
; MATICALLY EXITS THE NEWS MODE
;
; NEWS IS STORED IN COMPRESSED FORMAT
; IN A FIFO QUEUE. HEAD POINTS TO
; THE FRONT OF THE QUEUE. TAIL POINTS
; TO THE END OF THE QUEUE.
;
CHRRAM	=	WNDRAM+40
TABEL	=	$917F	; SHARED FROM CALIG
CHRPTR	=	$FC	; SHARED FROM CALIG
;	SCNPTR	=	$FA	; SHARED FROM CALIG
STRIG0	=	$0284	; OS SHADOW
;
WIDTH	ORG	*+1
HAIT	ORG	*+1
TAIL	ORG	*+1
LENGTH	ORG	*+1
SAVOFF	ORG	*+1
SAVIT	ORG	*+1
SAVY	ORG	*+1
SAVY2	ORG	*+1
SAVX	ORG	*+1
SAVA	ORG	*+1
SAVPTR	ORG	*+2
NEWSFL	ORG	*+1
SIRFL	ORG	*+1
TIMCOL	ORG	*+1
ROLADD	ORG	*+2
;
NEWS	LDA	HEAD	; IS THERE ANY NEWS ?
	CMP	BUTT
	BEQ	NEWS02		;NO NEWS
	JSR	EXPAND	; TURN THE MESSAGE MACRO
			; INTO ASCII IN A BUFFER
	LDA	EXPBUF
	BNE	NEWS09
NEWS02	RTS
;
NEWS09:
	LDA	#1
	STA	STRIG0
	LDX	#0		; OFF SCREEN AND SCROLLED
	STX	SAVY	; ONTO SCREEN
;;;	JSR	HALFIT		;##
;
NEWS01:
	LDY	SAVY	; GET THE CHARACTER
	LDA	(KNGPTR),Y
	STA	SAVCHR
	INC	SAVY
	CMP	#$FF
	BEQ	NEWS50		; IF LAST CHAR, SCROLL
			; MESSAGE OFF TO RIGHT
;
	JSR	NEWSTR
;
NEWS08:
	LDA	#LOW CHRRAM
	STA	PADPTR
	LDA	#HIGH CHRRAM
	STA	PADPTR+1
;
	LDA	#44		; THE LINE LENGTH IS 44
	STA	LINLEN		; SO THAT CHAR IS PLACED
;
	LDA	SAVCHR
	CMP	#' '
	BNE	NEWS99
	LDA	#8
	STA	WIDTH
	JSR	ROLLIT
	JMP	NEWS01
;
NEWS99:
	JSR	GETIT	; DRAW THE CHARACTER
	JSR	ROLLIT
	JSR	BAKCLR	; ZERO OUT BACK OF BUFFER
			; TO STOP WRAP AROUND OF BLCK MOVE
	JMP	NEWS01
;            
NEWS50:
	LDY	#0
	STY	SAVY
;
NEWS51	JSR	NEWSTR
;
NEWS53:
	LDX	#8
	STX	WIDTH
	JSR	ROLLIT
	JSR	BAKCLR
	INC	SAVY
	LDA	SAVY
	CMP	#42
	BNE	NEWS51
	LDY	#0
	STY	SAVY
	JMP	NEWS01
;
NEWSTR	LDA	LASTRG		;DEBOUNCE TRIG
	BEQ	NEWS10
	LDA	TRIG0
	STA	LASTRG
	BNE	NEWS04
	STA	ATRACT
NEWST2	LDA	WINFLG
	BEQ	NEWST1
;
YOUWIN	JSR	BLKOUT
	LDA	#128
	STA	SFLAG
	JMP	SWPWIN
;
NEWST1	JSR	DONOIS
	JSR	CLWIN	; IF TRIG IS PRESSED,
	PLA		;FOR THE RTS
	PLA
	JMP	NEWS	; CLEAR WINDOW AND GET NEXT
NEWS10	LDA	TRIG0
	STA	LASTRG
;
NEWS04	LDA	STICK0
	AND	#3
	CMP	#3
	BEQ	NEWS03	; IF JOYSTICK UP OR DOWN,
	STA	ATRACT
	LDA	WINFLG
	BNE	YOUWIN
	PLA			;NEED SO WILL RTS OUT OF NEWS
	PLA			;WHEN RTS FROM CLWIN
	JMP	CLWIN	; NO MORE NEWS IS WANTED
; CLEAN UP IS DONE AFTER THE CALL
NEWS03	RTS
;
BAKCLR:
	LDA	#LOW [WNDRAM+43]
	STA	PADPTR
	LDA	#HIGH [WNDRAM+43]
	STA	PADPTR+1
	LDX	#32
	LDY	#0
BAKCL1	STY	PADPTR
	LDA	#44
	JSR	INCPTR
	DEX
	BNE	BAKCL1
	RTS
;
;
HALFIT:
;##	LDA	#LOW[CHRRAM-32]	;##
;##	STA	PADPTR		;##
;##	LDA	#HIGH[CHRRAM-32]	;##
;##	STA	PADPTR+1	;##
;##;
;##	LDA	#0		;##
;##	STA	WIDACC		;##
;##	LDA	#44		;##
;##	STA	LINLEN		;##
;##	LDA	#$FF		;##
;##	STA	SAVOFF		;##
;##;
;##HALF00:				;##
;##	INC	SAVOFF		;##
;##	LDY	SAVOFF		;##
;##	LDA	(KNGPTR),Y	;##
;##	CMP	#$FF		;##
;##	BNE	HALF07		;##
;##;
;##	DEC SAVOFF		;##
;##	LDX	#0		;##
;##	JMP	HALF08		;##
;##;
;##HALF07:
;##	CMP	#$20		;##
;##	BNE	HALF01		;##
;##	LDA	#$08		;##
;##	JMP	HALF02		;##
;##;
;##HALF01:	JSR	GETPRP		;##
;##;
;##HALF02:	CLC			;##
;##	ADC	WIDACC		;##
;##	STA	WIDACC		;##
;##	CMP	#$DF		;##
;##	BCC	HALF00		;##
;##;
;##	LDA	#$FF		;##
;##	SEC			;##
;##	SBC	WIDACC		;##
;##	STA	WIDACC		;##
;##;
;##HALF03:				;##
;##	JSR	INCPTR		;##
;##	LDA	WIDACC		;##
;##	SEC			;##
;##	SBC	#$08		;##
;##	STA	WIDACC		;##
;##	CMP	#$08		;##
;##	BCS	HALF03		;##
;##;
;##	LDX	WIDACC		;##
;##HALF08:
;##	LDY	#$FF		;##
;##	STY	SAVY		;##
;##HALF04:				;##
;##	INC	SAVY		;##
;##	LDY	SAVY		;##
;##	LDA	(KNGPTR),Y	;##
;##	CMP	#$20		;##
;##	BNE	HALF05		;##
;##	TXA			;##
;##	CLC			;##
;##	ADC	#$08		;##
;##	TAX			;##
;##	JMP	HALF06		;##
;##;
;##HALF05:	JSR	CALIG		;##
;##;
;##HALF06:				;##
;##	LDY	SAVY		;##
;##	CPY	SAVOFF		;##
;##	BNE	HALF04		;##
;##;
;##	INC	SAVY		;##
;##	RTS
;##;
;##WIDACC:	DB	0
;
;
;
ROLLIT:
	LDA	#LOW [WNDRAM-44]
	STA	ROLADD
	LDA	#HIGH [WNDRAM-44]
	STA	ROLADD+1
	LDA	#0
	STA	HAIT
ROLL00:
	LDA	ROLADD
	CLC
	ADC	#44
	STA	ROLADD
	STA	ROLS00+1
	LDA	ROLADD+1
	ADC	#0
	STA	ROLADD+1
	STA	ROLS00+2
	JSR	ROLSUB
	JSR	ROLSUB
;CHECK FOR TRIG. HERE INSTEAD OF
;JSR SO WON'T HAVE TO PLA 2 MORE
;TIMES. IF PRESSED, WILL JMP TO
;REGULAR TRIG HANDLER
	LDA	LASTRG
	BEQ	ROLL01
	LDA	TRIG0
	STA	LASTRG
	BNE	ROLL02
	STA	ATRACT
	JMP	NEWST2
ROLL01	LDA	TRIG0
	STA	LASTRG
;
ROLL02
	INC	HAIT
	LDA	HAIT
	CMP	#31
	BNE	ROLL00
	LDA	#1
	JSR	PAUSE
	DEC	WIDTH
	DEC	WIDTH
	BEQ	ROLSTP
	BPL	ROLLIT
ROLSTP:	RTS
;
;
ROLSUB:
	LDX	#44
	CLC
ROLS00:
	ROL	WNDRAM+[00*44],X
	DEX
	BNE	ROLS00
	RTS
;
;
PAUSE:
	CLC
	ADC	RTCLKL
PAUSE0:
	CMP	RTCLKL
	BNE	PAUSE0
	RTS
;
;
GETIT:
	JSR	GETPRP		;##
	LDA	(CHRPTR),Y
	STA	HAIT
	INY
	LDA	(CHRPTR),Y
	CLC
	ADC	HAIT
	STA	TAIL
;
	ASL	A		; *2 FOR 2 BYTES WIDE
	PHA
	LDA	#0
	STA	SAVIT
	LDA	WIDTH
	CMP	#17
	BMI	GETIT0
	LDA	#$FF
	STA	SAVIT
	PLA
	CLC
	ADC	TAIL
	PHA
GETIT0:
	PLA
	STA	LENGTH
;
	LDA	#26		; SKIP LINES AT TOP
	SEC
	SBC	HAIT
	TAX
LOOP30:
	JSR	PADINC
	DEX
	BPL	LOOP30
;
	LDA	CHRPTR
	CLC
	ADC	#3
	STA	CHRPTR
	BCC	GETIT2
	INC	CHRPTR+1
GETIT2:
	LDY	#0
	STY	SAVY2
;
GETIT3:
	LDY	SAVY2
	LDA	(CHRPTR),Y
	INC	SAVY2
	LDY	#0
	STA	(PADPTR),Y
;
	LDY	SAVY2
	LDA	(CHRPTR),Y
	INC	SAVY2
	LDY	#1
	STA	(PADPTR),Y
;
	LDA	SAVIT
	BPL	GETIT4
	LDY	SAVY2
	LDA	(CHRPTR),Y
	INC	SAVY2
	LDY	#2
	STA	(PADPTR),Y
;
GETIT4:
	JSR	PADINC
	LDY	SAVY2
	CPY	LENGTH
	BNE	GETIT3
	RTS
;
;
;
GETPRP:
	CMP	#$41	;## IS IT A NUMBER
	BCS	GETIT5	;## IF NOT, DO NORMAL
	CLC		;## ADD OFFSET FOR BAD ASCII
	ADC	#[58-$30+$41]	;## & PARTIAL ASCI
GETIT5:
	SEC
	SBC	#$41
	ASL	A
	TAX
	LDA	TABEL,X
	STA	CHRPTR
	LDA	TABEL+1,X
	STA	CHRPTR+1
;
	LDY	#0
	LDA	(CHRPTR),Y
	STA	WIDTH
	INY
	RTS
;
;
;
PADINC:
	LDA	#44	; *** USED TO BE PADPTR ***
			; *** CHANGED BY L.S. MAY 5 1983 *
	JMP	INCPTR
;
;
EXPAND:
;POINT TO BUFFER
;SETPTR
	LDA	#LOW EXPBUF
	STA	KNGPTR
	LDA	#HIGH EXPBUF
	STA	KNGPTR+1
;
; CLEAR IT OUT
;CLBUF
	LDY	#62	; CLEAR OUT EXPANSION BUFFER
	LDA	#0
CLBUF0
	STA	(KNGPTR),Y
	DEY
	BPL	CLBUF0
;
	LDA	#0
	STA	NEWSFL
	JSR	GETQUE	; GET FIRST NAME OF MESS
	CMP	#$FF	;## IS IT A WEEK MESSAGE
	BNE	CLBUF1	;## THEN
;
	JSR	NOKING	;##
	JSR	NEWSNM	;## PUT HOW MANY WEEKS
	JSR	WKNEWS	; ## FOLLOWED BY TEXT
	JMP	EXP99
;
CLBUF1:
	LDY	#0
	JSR	PUTNAM
	JSR	GETQUE	; GET MESSAGE
	JSR	NEWSLT
	JSR	PUTMES
	BCS	EXP99	; IF NEEDED, GET 2ND NAME
	JSR	GETQUE
	JSR	PUTNAM
	JSR	NEWSAV
	LDA	TIMCOL
	STA	PCOLR0
	STA	PCOLR1
	LDY	#2
	LDA	(KNGPTR),Y
	CLC
	ADC	#LOW [PLAY0+24]
	STA	PADPTR
	LDA	#HIGH PLAY0
	STA	PADPTR+1
	DEY
	LDA	(KNGPTR),Y
	STA	HEIGHT
	DEY
	LDA	(KNGPTR),Y
	STA	HPOSP0
	CLC
	ADC	#8
	STA	HPOSP1
	LDA	KNGPTR
	CLC
	ADC	#3
	STA	KNGPTR
	BCC	Q01
	INC	KNGPTR+1
Q01	JSR	T20
	JSR	NEWRES
;
EXP99
	LDA	#$FF
	STA	(KNGPTR),Y
	STA	NEWSFL
	RTS
;
;
NOKING:
	LDA	#0
	STA	HPOSP2
	STA	HPOSP3
	STA	HPOSP1
	STA	HPOSP0
	RTS
;
;
NEWSNM:
	JSR	GETQUE	;## GET WEEK COUNTER
	STA	NUMLO	;## FOR WHEN NEWS WAS GEND
	JSR	GETQUE	;##
	STA	NUMHI	;##
;
	LDA	WEEKLO	;## CALCULATE HOW MANY
	SEC		;## WEEKS AGO THAT WAS
	SBC	NUMLO	;##
	STA	NUMLO	;##
	LDA	WEEKHI	;##
	SBC	NUMHI	;##
	STA	NUMHI	;##
;
	JSR	GETDGT		;##
	LDY	#0		;##
	LDA	DDIGIT+2	;##
	BEQ	NEWSN0		;##
	ORA	#$30		;##
	STA	(KNGPTR),Y	;##
	INY			;##
;
NEWSN0:				;##
	LDA	DDIGIT+3	;##
	BEQ	NEWSN1		;##
	ORA	#$30		;##
	STA	(KNGPTR),Y	;##
	INY			;##
;
NEWSN1:				;##
	LDA	DDIGIT+4	;##
	ORA	#$30		;##
	STA	(KNGPTR),Y	;##
	INY			;##
	RTS			;##
;
;
WKNEWS:
	LDA	#LOW WKMES	;##
	STA	EXPPTR	;##
	LDA	#HIGH WKMES	;##
	STA	EXPPTR+1	;##
	JMP	PUTN99	;##
;
WKMES:	DB	' weeks ago',$FF	;##
;              
;
PUTMES	TAX
	CPX	#8
	BNE	PUTME1
	STX	WINFLG
PUTME1
	LDA	MESCOL,X
	STA	PCOLR2
	STA	PCOLR3
	LDA	MESC2,X
	STA	TIMCOL
	TXA
	ASL	A		; PULL OUT ADDRESS OF MESSAGE
	TAX
	LDA	MESDAT,X
	STA	EXPPTR
	INX
	LDA	MESDAT,X
	STA	EXPPTR+1
	STY	SAVY
	LDY	#0
	STY	SAVOFF
;
	JMP	PUTN01	; GOTO SHARED CODE
;
;
MESDAT:
	DW	MESS00
	DW	MESS01
	DW	MESS02
	DW	MESS03
	DW	MESS04
	DW	MESS05
	DW	MESS06
	DW	MESS07
	DW	MESS08
	DW	MESS09
	DW	MESS10
	DW	MESS11
	DW	MESS12
	DW	MESS13
	DW	MESS14
;
; *****  SINGLE NOUN MESSAGES  *****
; *****  ALWAYS END WITH $FF   *****
MESS00:	DB	' has arrived ',$FF
MESS05:	DB	' returns empty handed ',$FF
MESS06:	DB	' returns with pillage from ',$FE
MESS07:	DB	' turns back ',$FF
MESS08:	DB	' is King of all Britain ',$FF
MESS09:	DB	' has no tithes',$FF
MESS10	DB	' is weakening ',$FF
MESS11	DB	' is faltering ',$FF
MESS12	DB	' is desperate ',$FF
MESS13	DB	' is ready to abdicate ',$FF
MESS14	DB	' offers tribute',$FF
;
; *****  DOUBLE NOUN MESSAGES  *****
; *****  ALWAYS END WITH $FE   *****
MESS01:	DB	' repulses ',$FE
MESS02:	DB	' defeats ',$FE
MESS03:	DB	' campaigns on ',$FE
MESS04:	DB	' becomes vassal to ',$FE
;
MESCOL	DB	SUBORD,ENEMY,ENEMY,ENEMY
	DB	SUBORD,NEUTRL,TRBTRY,ENEMY
	DB	TRBTRY,SUBORD,ORANGE,ORANGE
	DB	ORANGE,ORANGE,TRBTRY
MESC2	DB	0,NEUTRL,SUBORD,ORANGE
	DB	TRBTRY,0,ORANGE
;
PUTNAM:
	ASL	A
	STA	TIMP2
	LSR	A
	CMP	#$20		;THERE ARE 32 VALID NAMES
	BCC	PUTN00
	AND	#$0F		;VASSAL KING
	ASL	A
	STA	TIMP2
	JMP	PUTN04
;
PUTN00:
	LDX	#0
	CMP	#$10
	BCC	PUTN03
;
EXPSIR	LDA	#0
	STA	SIRFL
	LDA	SIR,X
	STA	(KNGPTR),Y
	INY
	INX
	CPX	#3
	BNE	EXPSIR
	JMP	PUTN05

PUTN04	LDX	#5		;VASSAL
PUTN03	LDA	KING,X		;EXPKNG
	CMP	#$FF
	BEQ	PUTN05
	STA	(KNGPTR),Y
	INY
	INX
	JMP	PUTN03
;
PUTN05	LDA	#$20
	STA	(KNGPTR),Y
	INY
	LDX	TIMP2
	LDA	KNGDAT,X
	STA	EXPPTR
	INX
	LDA	KNGDAT,X
	STA	EXPPTR+1
;
PUTN99:
	STY	SAVY
	LDY	#0
	STY	SAVOFF
;
PUTN01:
	LDY	SAVOFF	; STUFF THE TEXT INTO BUF
	LDA	(EXPPTR),Y
	BMI	PUTN02	; GET OUT WHEN BIT 7 SET
	LDY	SAVY
	STA	(KNGPTR),Y
	INC	SAVY
	INC	SAVOFF
	JMP	PUTN01
;
PUTN02:
	LDY	SAVY
	ROR	A		; SET UP FLAG FOR DOUBLE/SINGLE MESSAGES
	RTS
;
;
GETQUE:
	LDX	HEAD	; GET NEXT CHAR IN QUEUE
	LDA	QUEUE,X
	INC	HEAD
	RTS
;
NEWSAV	STA	SAVA
	STX	SAVX
	STY	SAVY
	LDA	KNGPTR
	STA	SAVPTR
	LDA	KNGPTR+1
	STA	SAVPTR+1
	LDA	SAVOFF		;KNGPTR=(EXPPTR,Y)+1
	CLC			;WHERE Y=SAVOFF
	ADC	EXPPTR
	STA	KNGPTR
	LDA	EXPPTR+1
	ADC	#0
	STA	KNGPTR+1
	INC	KNGPTR
	BNE	NEWSA1
	INC	KNGPTR+1
NEWSA1	RTS
;
NEWSLT	JSR	NEWSAV
	LDA	SIRFL
	BNE	NEWSL1
	LDA	#$FF
	STA	SIRFL
	LDA	#LOW [CAMEL+7]	;SKIPS NAME
	STA	KNGPTR
	LDA	#HIGH [CAMEL+7]
	STA	KNGPTR+1
NEWSL1	JSR	CLRP01
	JSR	KNGDOM
;JMP NEWRES
;
NEWRES	LDA	SAVPTR
	STA	KNGPTR
	LDA	SAVPTR+1
	STA	KNGPTR+1
	LDX	SAVX
	LDY	SAVY
	LDA	SAVA
	RTS
;
